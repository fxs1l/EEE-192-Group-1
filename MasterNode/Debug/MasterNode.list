
MasterNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080073a8  080073a8  000173a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007638  08007638  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007640  08007640  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007648  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  080076b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080076b8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcdc  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b63  00000000  00000000  0002ddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ec  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019000  00000000  00000000  00031dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e22  00000000  00000000  0004adec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096023  00000000  00000000  0005cc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000375c  00000000  00000000  000f2c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f6390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007390 	.word	0x08007390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007390 	.word	0x08007390

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <TIM2_Init>:
#include "delay.h"

volatile int doDelay = 0;
const int default_ARR = 5000;
void TIM2_Init(void) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<0); // Enable clock for TIM2
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <TIM2_Init+0x94>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <TIM2_Init+0x94>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 32000-1; // Set PSC+1 = 320000
 8000ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28

	// For a peripheral clock frequency of 32MHz,
	// each tick of the timer is 1ms
	// Frequency of 1.5Hz = Period of 666.667ms
	TIM2->ARR = default_ARR; // Set timer to reset after CNT = 5000 or 5s
 8000ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= (1<<0); // Enable timer interrupt generation
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	60d3      	str	r3, [r2, #12]

	NVIC->IP[TIM2_IRQn] = (2 << 4); // Set priority to 2
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <TIM2_Init+0x98>)
 8000eea:	2220      	movs	r2, #32
 8000eec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
//	NVIC_SetPriority(TIM2_IRQn, 2);
	NVIC->ISER[TIM2_IRQn >> 5] |= (1 << (TIM2_IRQn % 32)); // Enable interrupt
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <TIM2_Init+0x98>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <TIM2_Init+0x98>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(1<<0);
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	6113      	str	r3, [r2, #16]

	TIM2->EGR |= (1<<0);
 8000f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6153      	str	r3, [r2, #20]
	TIM2->CR1 &= ~(1<<0); // Disabletimer, for now
 8000f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
//	NVIC->IP[TIM2_IRQn] = (2 << 4); // Set priority to 2
//	NVIC->ISER[TIM2_IRQn >> 5] |= (1 << (TIM2_IRQn % 32)); // Enable interrupt
//	TIM2->SR &= ~(1<<0);
//	TIM2->SR &= ~(1<<0); // Clear UIF update interrupt flag
//	TIM2->EGR |= (1<<0);
	TIM2->CR1 &= ~(1<<0); // Disable timer, for now
 8000f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	doDelay = 0; // release lock
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <TIM2_IRQHandler+0x44>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	if (TIM2->SR & TIM_SR_UIF) {
 8000f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00f      	beq.n	8000f88 <TIM2_IRQHandler+0x38>
		TIM2->SR &= ~(1<<0); // Clear UIF update interrupt flag
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6113      	str	r3, [r2, #16]
		TIM2->CR1 &= ~(1<<0);
 8000f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]
		// Handle the update event (e.g., toggle an LED, update a variable, etc.)
	}
//	NVIC_SystemReset();
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000008c 	.word	0x2000008c

08000f98 <startTimer>:

void startTimer(void){
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
//	TIM2->CR1 &= ~(1<<0);
	TIM2->EGR |= (1<<0); // Reset timer counter registers
 8000f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= (1<<0);
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]
	doDelay = 1; // start code lock
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <startTimer+0x34>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	2000008c 	.word	0x2000008c

08000fd0 <SystemClock_HSEConfig>:
//	/* USER CODE END Error_Handler_Debug */
//	}
//}

void SystemClock_HSEConfig(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 fe08 	bl	8005bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <SystemClock_HSEConfig+0xc8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <SystemClock_HSEConfig+0xc8>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <SystemClock_HSEConfig+0xc8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <SystemClock_HSEConfig+0xcc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a20      	ldr	r2, [pc, #128]	; (800109c <SystemClock_HSEConfig+0xcc>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <SystemClock_HSEConfig+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001044:	2348      	movs	r3, #72	; 0x48
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f002 fc41 	bl	80038dc <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_HSEConfig+0x94>
  {
    Error_Handler();
 8001060:	f000 f81e 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fea3 	bl	8003dcc <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_HSEConfig+0xc0>
  {
    Error_Handler();
 800108c:	f000 f808 	bl	80010a0 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <Error_Handler>:

void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>

080010aa <bufclr>:
#include "ESPDataLogger.h"
#include "stdio.h"
#include "string.h"

void bufclr (char *buf)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff f894 	bl	80001e0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e007      	b.n	80010d2 <bufclr+0x28>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3301      	adds	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbf3      	blt.n	80010c2 <bufclr+0x18>
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b096      	sub	sp, #88	; 0x58
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80010ee:	f000 f9ab 	bl	8001448 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80010f2:	4821      	ldr	r0, [pc, #132]	; (8001178 <ESP_Init+0x94>)
 80010f4:	f000 fa74 	bl	80015e0 <Uart_sendstring>
//	HAL_Delay(1000);

	Uart_flush();
 80010f8:	f000 f9ee 	bl	80014d8 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80010fc:	481f      	ldr	r0, [pc, #124]	; (800117c <ESP_Init+0x98>)
 80010fe:	f000 fa6f 	bl	80015e0 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8001102:	bf00      	nop
 8001104:	481e      	ldr	r0, [pc, #120]	; (8001180 <ESP_Init+0x9c>)
 8001106:	f000 fa9b 	bl	8001640 <Wait_for>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f9      	beq.n	8001104 <ESP_Init+0x20>
//	HAL_Delay(1000);

	Uart_flush();
 8001110:	f000 f9e2 	bl	80014d8 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8001114:	481b      	ldr	r0, [pc, #108]	; (8001184 <ESP_Init+0xa0>)
 8001116:	f000 fa63 	bl	80015e0 <Uart_sendstring>
//	HAL_Delay(1000);
	while (!(Wait_for("OK\r\n")));
 800111a:	bf00      	nop
 800111c:	4818      	ldr	r0, [pc, #96]	; (8001180 <ESP_Init+0x9c>)
 800111e:	f000 fa8f 	bl	8001640 <Wait_for>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f9      	beq.n	800111c <ESP_Init+0x38>

	Uart_flush();
 8001128:	f000 f9d6 	bl	80014d8 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800112c:	f107 0008 	add.w	r0, r7, #8
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4914      	ldr	r1, [pc, #80]	; (8001188 <ESP_Init+0xa4>)
 8001136:	f004 fd3d 	bl	8005bb4 <siprintf>

	Uart_sendstring(data);
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa4e 	bl	80015e0 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8001144:	bf00      	nop
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <ESP_Init+0xa8>)
 8001148:	f000 fa7a 	bl	8001640 <Wait_for>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f9      	beq.n	8001146 <ESP_Init+0x62>
//	HAL_Delay(1000);

	Uart_flush();
 8001152:	f000 f9c1 	bl	80014d8 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <ESP_Init+0xac>)
 8001158:	f000 fa42 	bl	80015e0 <Uart_sendstring>
//	HAL_Delay(1000);
	while (!(Wait_for("OK\r\n")));
 800115c:	bf00      	nop
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <ESP_Init+0x9c>)
 8001160:	f000 fa6e 	bl	8001640 <Wait_for>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f9      	beq.n	800115e <ESP_Init+0x7a>

	Uart_flush();
 800116a:	f000 f9b5 	bl	80014d8 <Uart_flush>

}
 800116e:	bf00      	nop
 8001170:	3758      	adds	r7, #88	; 0x58
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	080073a8 	.word	0x080073a8
 800117c:	080073b4 	.word	0x080073b4
 8001180:	080073bc 	.word	0x080073bc
 8001184:	080073c4 	.word	0x080073c4
 8001188:	080073d4 	.word	0x080073d4
 800118c:	080073ec 	.word	0x080073ec
 8001190:	080073f8 	.word	0x080073f8

08001194 <ESP_Send_Data>:
#define SCALE_FACTOR 100
void ESP_Send_Data (char *APIkey, int Field_num, char* value)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0a8      	sub	sp, #160	; 0xa0
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	char local_buf[100] = {0};
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
 80011a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011a8:	2260      	movs	r2, #96	; 0x60
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fd21 	bl	8005bf4 <memset>
	char local_buf2[30] = {0};
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	831a      	strh	r2, [r3, #24]

	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80011ca:	4829      	ldr	r0, [pc, #164]	; (8001270 <ESP_Send_Data+0xdc>)
 80011cc:	f000 fa08 	bl	80015e0 <Uart_sendstring>


	while (!(Wait_for("OK\r\n")));
 80011d0:	bf00      	nop
 80011d2:	4828      	ldr	r0, [pc, #160]	; (8001274 <ESP_Send_Data+0xe0>)
 80011d4:	f000 fa34 	bl	8001640 <Wait_for>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <ESP_Send_Data+0x3e>
//	HAL_Delay(500);

	sprintf (local_buf, "GET /update?api_key=%s&field%d=%s\r\n", APIkey, Field_num, value);
 80011de:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4923      	ldr	r1, [pc, #140]	; (8001278 <ESP_Send_Data+0xe4>)
 80011ec:	f004 fce2 	bl	8005bb4 <siprintf>
	int len = strlen (local_buf);
 80011f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe fff3 	bl	80001e0 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001208:	491c      	ldr	r1, [pc, #112]	; (800127c <ESP_Send_Data+0xe8>)
 800120a:	4618      	mov	r0, r3
 800120c:	f004 fcd2 	bl	8005bb4 <siprintf>
	Uart_sendstring(local_buf2);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f9e3 	bl	80015e0 <Uart_sendstring>
	while (!(Wait_for(">")));
 800121a:	bf00      	nop
 800121c:	4818      	ldr	r0, [pc, #96]	; (8001280 <ESP_Send_Data+0xec>)
 800121e:	f000 fa0f 	bl	8001640 <Wait_for>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <ESP_Send_Data+0x88>
//	HAL_Delay(500);

	Uart_sendstring (local_buf);
 8001228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f9d7 	bl	80015e0 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8001232:	bf00      	nop
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <ESP_Send_Data+0xf0>)
 8001236:	f000 fa03 	bl	8001640 <Wait_for>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f9      	beq.n	8001234 <ESP_Send_Data+0xa0>
//	HAL_Delay(500);
//
	while (!(Wait_for("CLOSED")));
 8001240:	bf00      	nop
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <ESP_Send_Data+0xf4>)
 8001244:	f000 f9fc 	bl	8001640 <Wait_for>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f9      	beq.n	8001242 <ESP_Send_Data+0xae>

	bufclr(local_buf);
 800124e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff29 	bl	80010aa <bufclr>
	bufclr(local_buf2);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff24 	bl	80010aa <bufclr>

	Ringbuf_init();
 8001262:	f000 f8f1 	bl	8001448 <Ringbuf_init>

}
 8001266:	bf00      	nop
 8001268:	3798      	adds	r7, #152	; 0x98
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08007408 	.word	0x08007408
 8001274:	080073bc 	.word	0x080073bc
 8001278:	08007434 	.word	0x08007434
 800127c:	08007458 	.word	0x08007458
 8001280:	08007468 	.word	0x08007468
 8001284:	0800746c 	.word	0x0800746c
 8001288:	08007478 	.word	0x08007478

0800128c <ESP_Send_Multi>:

void ESP_Send_Multi (char *APIkey, int numberoffileds, char* value[])
{
 800128c:	b580      	push	{r7, lr}
 800128e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8001292:	af00      	add	r7, sp, #0
 8001294:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001298:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800129c:	6018      	str	r0, [r3, #0]
 800129e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80012a2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80012a6:	6019      	str	r1, [r3, #0]
 80012a8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80012ac:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80012b0:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 80012b2:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80012b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 fc94 	bl	8005bf4 <memset>
	char local_buf2[30] = {0};
 80012cc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80012d0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 80012ea:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80012ee:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	3304      	adds	r3, #4
 80012f8:	22c4      	movs	r2, #196	; 0xc4
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fc79 	bl	8005bf4 <memset>

	Uart_sendstring("AT+CIPSTART=\"TCP\",\"35.169.236.61\",80\r\n");
 8001302:	4848      	ldr	r0, [pc, #288]	; (8001424 <ESP_Send_Multi+0x198>)
 8001304:	f000 f96c 	bl	80015e0 <Uart_sendstring>

	while (!(Wait_for("OK\r\n")));
 8001308:	bf00      	nop
 800130a:	4847      	ldr	r0, [pc, #284]	; (8001428 <ESP_Send_Multi+0x19c>)
 800130c:	f000 f998 	bl	8001640 <Wait_for>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f9      	beq.n	800130a <ESP_Send_Multi+0x7e>
//	HAL_Delay(500);

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8001316:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800131a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800131e:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4941      	ldr	r1, [pc, #260]	; (800142c <ESP_Send_Multi+0x1a0>)
 8001326:	f004 fc45 	bl	8005bb4 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001330:	e01f      	b.n	8001372 <ESP_Send_Multi+0xe6>
	{
		sprintf(field_buf, "&field%d=%s",i+1, value[i]);
 8001332:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8001336:	1c59      	adds	r1, r3, #1
 8001338:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8001342:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	4413      	add	r3, r2
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f107 0014 	add.w	r0, r7, #20
 8001350:	460a      	mov	r2, r1
 8001352:	4937      	ldr	r1, [pc, #220]	; (8001430 <ESP_Send_Multi+0x1a4>)
 8001354:	f004 fc2e 	bl	8005bb4 <siprintf>
		strcat(local_buf, field_buf);
 8001358:	f107 0214 	add.w	r2, r7, #20
 800135c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fc4e 	bl	8005c04 <strcat>
	for (int i=0; i<numberoffileds; i++)
 8001368:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800136c:	3301      	adds	r3, #1
 800136e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001372:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001376:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800137a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbd6      	blt.n	8001332 <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8001384:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff29 	bl	80001e0 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001396:	4413      	add	r3, r2
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <ESP_Send_Multi+0x1a8>)
 800139a:	8811      	ldrh	r1, [r2, #0]
 800139c:	7892      	ldrb	r2, [r2, #2]
 800139e:	8019      	strh	r1, [r3, #0]
 80013a0:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 80013a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff1a 	bl	80001e0 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80013b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b6:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 80013ba:	491f      	ldr	r1, [pc, #124]	; (8001438 <ESP_Send_Multi+0x1ac>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fbf9 	bl	8005bb4 <siprintf>
	Uart_sendstring(local_buf2);
 80013c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f90a 	bl	80015e0 <Uart_sendstring>
	while (!(Wait_for(">")));
 80013cc:	bf00      	nop
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <ESP_Send_Multi+0x1b0>)
 80013d0:	f000 f936 	bl	8001640 <Wait_for>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f9      	beq.n	80013ce <ESP_Send_Multi+0x142>
//	HAL_Delay(500);

	Uart_sendstring (local_buf);
 80013da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f8fe 	bl	80015e0 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 80013e4:	bf00      	nop
 80013e6:	4816      	ldr	r0, [pc, #88]	; (8001440 <ESP_Send_Multi+0x1b4>)
 80013e8:	f000 f92a 	bl	8001640 <Wait_for>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f9      	beq.n	80013e6 <ESP_Send_Multi+0x15a>

	while (!(Wait_for("CLOSED")));
 80013f2:	bf00      	nop
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <ESP_Send_Multi+0x1b8>)
 80013f6:	f000 f923 	bl	8001640 <Wait_for>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f9      	beq.n	80013f4 <ESP_Send_Multi+0x168>
//	HAL_Delay(500);

	bufclr(local_buf);
 8001400:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe50 	bl	80010aa <bufclr>
	bufclr(local_buf2);
 800140a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe4b 	bl	80010aa <bufclr>

	Ringbuf_init();
 8001414:	f000 f818 	bl	8001448 <Ringbuf_init>

}
 8001418:	bf00      	nop
 800141a:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	08007480 	.word	0x08007480
 8001428:	080073bc 	.word	0x080073bc
 800142c:	080074a8 	.word	0x080074a8
 8001430:	080074c0 	.word	0x080074c0
 8001434:	080074cc 	.word	0x080074cc
 8001438:	08007458 	.word	0x08007458
 800143c:	08007468 	.word	0x08007468
 8001440:	0800746c 	.word	0x0800746c
 8001444:	08007478 	.word	0x08007478

08001448 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <Ringbuf_init+0x3c>)
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <Ringbuf_init+0x40>)
 8001450:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <Ringbuf_init+0x44>)
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <Ringbuf_init+0x48>)
 8001456:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <Ringbuf_init+0x4c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <Ringbuf_init+0x4c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <Ringbuf_init+0x4c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <Ringbuf_init+0x4c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0220 	orr.w	r2, r2, #32
 8001476:	60da      	str	r2, [r3, #12]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000120 	.word	0x20000120
 8001488:	20000090 	.word	0x20000090
 800148c:	20000124 	.word	0x20000124
 8001490:	200000d8 	.word	0x200000d8
 8001494:	200001d0 	.word	0x200001d0

08001498 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	3301      	adds	r3, #1
 80014aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ae:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d007      	beq.n	80014ca <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	79f9      	ldrb	r1, [r7, #7]
 80014c2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <Uart_flush>:

void Uart_flush (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <Uart_flush+0x1c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <Uart_flush+0x1c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000120 	.word	0x20000120

080014f8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <Uart_read+0x4c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <Uart_read+0x4c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	429a      	cmp	r2, r3
 800150c:	d102      	bne.n	8001514 <Uart_read+0x1c>
  {
    return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e010      	b.n	8001536 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <Uart_read+0x4c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <Uart_read+0x4c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <Uart_read+0x4c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <Uart_read+0x4c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8001534:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000120 	.word	0x20000120

08001548 <Uart_write>:

void Uart_write(int c)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db21      	blt.n	800159a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <Uart_write+0x60>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	3301      	adds	r3, #1
 800155e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001562:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8001564:	bf00      	nop
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <Uart_write+0x60>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	429a      	cmp	r2, r3
 8001570:	d0f9      	beq.n	8001566 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <Uart_write+0x60>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <Uart_write+0x60>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	b2c9      	uxtb	r1, r1
 8001580:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <Uart_write+0x60>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <Uart_write+0x64>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <Uart_write+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001598:	60da      	str	r2, [r3, #12]
	}
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000124 	.word	0x20000124
 80015ac:	200001d0 	.word	0x200001d0

080015b0 <IsDataAvailable>:

int IsDataAvailable(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <IsDataAvailable+0x2c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <IsDataAvailable+0x2c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3340      	adds	r3, #64	; 0x40
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000120 	.word	0x20000120

080015e0 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80015e8:	e006      	b.n	80015f8 <Uart_sendstring+0x18>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ffa8 	bl	8001548 <Uart_write>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f4      	bne.n	80015ea <Uart_sendstring+0xa>
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <Uart_peek+0x30>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <Uart_peek+0x30>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	429a      	cmp	r2, r3
 800161e:	d102      	bne.n	8001626 <Uart_peek+0x1a>
  {
    return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	e005      	b.n	8001632 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <Uart_peek+0x30>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <Uart_peek+0x30>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000120 	.word	0x20000120

08001640 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7fe fdc7 	bl	80001e0 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8001656:	bf00      	nop
 8001658:	f7ff ffaa 	bl	80015b0 <IsDataAvailable>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0fa      	beq.n	8001658 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8001662:	f7ff ffd3 	bl	800160c <Uart_peek>
 8001666:	4601      	mov	r1, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4299      	cmp	r1, r3
 8001672:	d01a      	beq.n	80016aa <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <Wait_for+0xa4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <Wait_for+0xa4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001686:	e7e6      	b.n	8001656 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3301      	adds	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800168e:	f7ff ff33 	bl	80014f8 <Uart_read>
		if (so_far == len) return 1;
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d101      	bne.n	800169e <Wait_for+0x5e>
 800169a:	2301      	movs	r3, #1
 800169c:	e01d      	b.n	80016da <Wait_for+0x9a>
		while (!IsDataAvailable());
 800169e:	bf00      	nop
 80016a0:	f7ff ff86 	bl	80015b0 <IsDataAvailable>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0fa      	beq.n	80016a0 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 80016aa:	f7ff ffaf 	bl	800160c <Uart_peek>
 80016ae:	4601      	mov	r1, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4299      	cmp	r1, r3
 80016ba:	d0e5      	beq.n	8001688 <Wait_for+0x48>
	}

	if (so_far != len)
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d002      	beq.n	80016ca <Wait_for+0x8a>
	{
		so_far = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
		goto again;
 80016c8:	e7c5      	b.n	8001656 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d101      	bne.n	80016d6 <Wait_for+0x96>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e001      	b.n	80016da <Wait_for+0x9a>
	else return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000120 	.word	0x20000120

080016e8 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d013      	beq.n	8001732 <Uart_isr+0x4a>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <Uart_isr+0xac>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff feb4 	bl	8001498 <store_char>
        return;
 8001730:	e02c      	b.n	800178c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b00      	cmp	r3, #0
 800173a:	d027      	beq.n	800178c <Uart_isr+0xa4>
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b00      	cmp	r3, #0
 8001744:	d022      	beq.n	800178c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <Uart_isr+0xb0>)
 8001748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <Uart_isr+0xb0>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	429a      	cmp	r2, r3
 8001750:	d108      	bne.n	8001764 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001760:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001762:	e012      	b.n	800178a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <Uart_isr+0xb0>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <Uart_isr+0xb0>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <Uart_isr+0xb0>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	3301      	adds	r3, #1
 8001774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <Uart_isr+0xb0>)
 800177a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7bba      	ldrb	r2, [r7, #14]
 8001788:	605a      	str	r2, [r3, #4]
    	return;
 800178a:	bf00      	nop
    }
}
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000120 	.word	0x20000120
 8001798:	200000d8 	.word	0x200000d8

0800179c <newLoRa>:
						|    spreading factor = 7				|
						|    bandwidth = 125 KHz        		|
						|    coding rate = 4/5            		|
						----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	SPI_Init();
 80017a4:	f000 fe32 	bl	800240c <SPI_Init>
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80017a8:	f240 13b1 	movw	r3, #433	; 0x1b1
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80017ae:	2307      	movs	r3, #7
 80017b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80017b4:	2307      	movs	r3, #7
 80017b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80017cc:	2308      	movs	r3, #8
 80017ce:	86bb      	strh	r3, [r7, #52]	; 0x34

	new_LoRa.CS_port         = NSS_GPIO_Port;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <newLoRa+0x70>)
 80017d2:	60fb      	str	r3, [r7, #12]
	new_LoRa.CS_pin          = NSS_Pin;
 80017d4:	2301      	movs	r3, #1
 80017d6:	823b      	strh	r3, [r7, #16]
	new_LoRa.reset_port      = RST_GPIO_Port;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <newLoRa+0x70>)
 80017da:	617b      	str	r3, [r7, #20]
	new_LoRa.reset_pin       = RST_Pin;
 80017dc:	2302      	movs	r3, #2
 80017de:	833b      	strh	r3, [r7, #24]
	new_LoRa.DIO0_port       = DIO0_GPIO_Port;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <newLoRa+0x70>)
 80017e2:	61fb      	str	r3, [r7, #28]
	new_LoRa.DIO0_pin        = DIO0_Pin;
 80017e4:	2304      	movs	r3, #4
 80017e6:	843b      	strh	r3, [r7, #32]
	new_LoRa.hSPIx           = &hspi1;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <newLoRa+0x74>)
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
	return new_LoRa;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	461d      	mov	r5, r3
 80017f0:	f107 040c 	add.w	r4, r7, #12
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001800:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	3738      	adds	r7, #56	; 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bdb0      	pop	{r4, r5, r7, pc}
 800180c:	40020400 	.word	0x40020400
 8001810:	20000128 	.word	0x20000128

08001814 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800181e:	2101      	movs	r1, #1
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f9fe 	bl	8001c22 <LoRa_read>
 8001826:	4603      	mov	r3, r0
 8001828:	73bb      	strb	r3, [r7, #14]
	data = read;
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	f023 0307 	bic.w	r3, r3, #7
 800183a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
 8001842:	e03e      	b.n	80018c2 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10c      	bne.n	8001864 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800184a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800184e:	f023 0307 	bic.w	r3, r3, #7
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	b25b      	sxtb	r3, r3
 800185a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	61da      	str	r2, [r3, #28]
 8001862:	e02e      	b.n	80018c2 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d10c      	bne.n	8001884 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800186a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800186e:	f023 0307 	bic.w	r3, r3, #7
 8001872:	b25b      	sxtb	r3, r3
 8001874:	f043 0303 	orr.w	r3, r3, #3
 8001878:	b25b      	sxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	61da      	str	r2, [r3, #28]
 8001882:	e01e      	b.n	80018c2 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d10c      	bne.n	80018a4 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800188a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	b25b      	sxtb	r3, r3
 8001894:	f043 0305 	orr.w	r3, r3, #5
 8001898:	b25b      	sxtb	r3, r3
 800189a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2205      	movs	r2, #5
 80018a0:	61da      	str	r2, [r3, #28]
 80018a2:	e00e      	b.n	80018c2 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d10b      	bne.n	80018c2 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80018aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	f043 0306 	orr.w	r3, r3, #6
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2206      	movs	r2, #6
 80018c0:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	461a      	mov	r2, r3
 80018c6:	2101      	movs	r1, #1
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f9c4 	bl	8001c56 <LoRa_write>
	//HAL_Delay(10);
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	889b      	ldrh	r3, [r3, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	f001 ffd9 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6998      	ldr	r0, [r3, #24]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	f002 fd16 	bl	8004332 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001906:	bf00      	nop
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4618      	mov	r0, r3
 800190e:	f003 f8ff 	bl	8004b10 <HAL_SPI_GetState>
 8001912:	4603      	mov	r3, r0
 8001914:	2b01      	cmp	r3, #1
 8001916:	d1f7      	bne.n	8001908 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6998      	ldr	r0, [r3, #24]
 800191c:	8b3a      	ldrh	r2, [r7, #24]
 800191e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	f002 fe41 	bl	80045aa <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001928:	bf00      	nop
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f8ee 	bl	8004b10 <HAL_SPI_GetState>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d1f7      	bne.n	800192a <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	889b      	ldrh	r3, [r3, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	4619      	mov	r1, r3
 8001946:	f001 ffaf 	bl	80038a8 <HAL_GPIO_WritePin>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	f001 ff9b 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6998      	ldr	r0, [r3, #24]
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	f002 fcd8 	bl	8004332 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001982:	bf00      	nop
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f8c1 	bl	8004b10 <HAL_SPI_GetState>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d1f7      	bne.n	8001984 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6998      	ldr	r0, [r3, #24]
 8001998:	8b3a      	ldrh	r2, [r7, #24]
 800199a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	f002 fcc7 	bl	8004332 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80019a4:	bf00      	nop
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f8b0 	bl	8004b10 <HAL_SPI_GetState>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d1f7      	bne.n	80019a6 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	889b      	ldrh	r3, [r3, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	4619      	mov	r1, r3
 80019c2:	f001 ff71 	bl	80038a8 <HAL_GPIO_WritePin>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80019da:	2126      	movs	r1, #38	; 0x26
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f920 	bl	8001c22 <LoRa_read>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73bb      	strb	r3, [r7, #14]

	if(value)
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e003      	b.n	80019fe <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	f023 0308 	bic.w	r3, r3, #8
 80019fc:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	461a      	mov	r2, r3
 8001a02:	2126      	movs	r1, #38	; 0x26
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f926 	bl	8001c56 <LoRa_write>
	HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f001 fc30 	bl	8003270 <HAL_Delay>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b096      	sub	sp, #88	; 0x58
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <LoRa_setAutoLDO+0x68>)
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4611      	mov	r1, r2
 8001a28:	2250      	movs	r2, #80	; 0x50
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 f926 	bl	8005c7c <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a36:	461a      	mov	r2, r3
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4093      	lsls	r3, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd79 	bl	8000534 <__aeabi_i2d>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	3358      	adds	r3, #88	; 0x58
 8001a4c:	443b      	add	r3, r7
 8001a4e:	3b50      	subs	r3, #80	; 0x50
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe ff02 	bl	800085c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f882 	bl	8000b68 <__aeabi_d2iz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	bfcc      	ite	gt
 8001a6a:	2301      	movgt	r3, #1
 8001a6c:	2300      	movle	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffab 	bl	80019ce <LoRa_setLowDaraRateOptimization>
}
 8001a78:	bf00      	nop
 8001a7a:	3758      	adds	r7, #88	; 0x58
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	080074d0 	.word	0x080074d0

08001a84 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	04db      	lsls	r3, r3, #19
 8001a92:	115b      	asrs	r3, r3, #5
 8001a94:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2106      	movs	r1, #6
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8d7 	bl	8001c56 <LoRa_write>
	HAL_Delay(5);
 8001aa8:	2005      	movs	r0, #5
 8001aaa:	f001 fbe1 	bl	8003270 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2107      	movs	r1, #7
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8cb 	bl	8001c56 <LoRa_write>
	HAL_Delay(5);
 8001ac0:	2005      	movs	r0, #5
 8001ac2:	f001 fbd5 	bl	8003270 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	461a      	mov	r2, r3
 8001ace:	2108      	movs	r1, #8
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8c0 	bl	8001c56 <LoRa_write>
	HAL_Delay(5);
 8001ad6:	2005      	movs	r0, #5
 8001ad8:	f001 fbca 	bl	8003270 <HAL_Delay>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	dd01      	ble.n	8001af8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001af4:	230c      	movs	r3, #12
 8001af6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	dc01      	bgt.n	8001b02 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001afe:	2307      	movs	r3, #7
 8001b00:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001b02:	211e      	movs	r1, #30
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f88c 	bl	8001c22 <LoRa_read>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f001 fbae 	bl	8003270 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001b28:	7bbb      	ldrb	r3, [r7, #14]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	211e      	movs	r1, #30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f891 	bl	8001c56 <LoRa_write>
	HAL_Delay(10);
 8001b34:	200a      	movs	r0, #10
 8001b36:	f001 fb9b 	bl	8003270 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff6c 	bl	8001a18 <LoRa_setAutoLDO>
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	461a      	mov	r2, r3
 8001b58:	2109      	movs	r1, #9
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f87b 	bl	8001c56 <LoRa_write>
	HAL_Delay(10);
 8001b60:	200a      	movs	r0, #10
 8001b62:	f001 fb85 	bl	8003270 <HAL_Delay>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	2b2c      	cmp	r3, #44	; 0x2c
 8001b84:	d801      	bhi.n	8001b8a <LoRa_setOCP+0x1a>
		current = 45;
 8001b86:	232d      	movs	r3, #45	; 0x2d
 8001b88:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	2bf0      	cmp	r3, #240	; 0xf0
 8001b8e:	d901      	bls.n	8001b94 <LoRa_setOCP+0x24>
		current = 240;
 8001b90:	23f0      	movs	r3, #240	; 0xf0
 8001b92:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b78      	cmp	r3, #120	; 0x78
 8001b98:	d809      	bhi.n	8001bae <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	3b2d      	subs	r3, #45	; 0x2d
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <LoRa_setOCP+0x78>)
 8001ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba4:	1052      	asrs	r2, r2, #1
 8001ba6:	17db      	asrs	r3, r3, #31
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e00b      	b.n	8001bc6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2bf0      	cmp	r3, #240	; 0xf0
 8001bb2:	d808      	bhi.n	8001bc6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	331e      	adds	r3, #30
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoRa_setOCP+0x78>)
 8001bba:	fb82 1203 	smull	r1, r2, r2, r3
 8001bbe:	1092      	asrs	r2, r2, #2
 8001bc0:	17db      	asrs	r3, r3, #31
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	3320      	adds	r3, #32
 8001bca:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	210b      	movs	r1, #11
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f83f 	bl	8001c56 <LoRa_write>
	HAL_Delay(10);
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f001 fb49 	bl	8003270 <HAL_Delay>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	66666667 	.word	0x66666667

08001bec <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001bf4:	211e      	movs	r1, #30
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f813 	bl	8001c22 <LoRa_read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	f043 0307 	orr.w	r3, r3, #7
 8001c06:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	211e      	movs	r1, #30
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f821 	bl	8001c56 <LoRa_write>
	HAL_Delay(10);
 8001c14:	200a      	movs	r0, #10
 8001c16:	f001 fb2b 	bl	8003270 <HAL_Delay>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af02      	add	r7, sp, #8
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001c38:	f107 030f 	add.w	r3, r7, #15
 8001c3c:	f107 010e 	add.w	r1, r7, #14
 8001c40:	2201      	movs	r2, #1
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe45 	bl	80018d6 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
 8001c62:	4613      	mov	r3, r2
 8001c64:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001c70:	78bb      	ldrb	r3, [r7, #2]
 8001c72:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001c74:	f107 030f 	add.w	r3, r7, #15
 8001c78:	f107 010e 	add.w	r1, r7, #14
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	9200      	str	r2, [sp, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fe65 	bl	8001952 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	72fb      	strb	r3, [r7, #11]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	889b      	ldrh	r3, [r3, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f001 fdf5 	bl	80038a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6998      	ldr	r0, [r3, #24]
 8001cc2:	f107 0117 	add.w	r1, r7, #23
 8001cc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f002 fb31 	bl	8004332 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001cd0:	bf00      	nop
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 ff1a 	bl	8004b10 <HAL_SPI_GetState>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d1f7      	bne.n	8001cd2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6998      	ldr	r0, [r3, #24]
 8001ce6:	7abb      	ldrb	r3, [r7, #10]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f002 fb1f 	bl	8004332 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001cf4:	bf00      	nop
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 ff08 	bl	8004b10 <HAL_SPI_GetState>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d1f7      	bne.n	8001cf6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	889b      	ldrh	r3, [r3, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	f001 fdc9 	bl	80038a8 <HAL_GPIO_WritePin>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

	return 1;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	460b      	mov	r3, r1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001d50:	2101      	movs	r1, #1
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff fd5e 	bl	8001814 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001d58:	210e      	movs	r1, #14
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff ff61 	bl	8001c22 <LoRa_read>
 8001d60:	4603      	mov	r3, r0
 8001d62:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	461a      	mov	r2, r3
 8001d68:	210d      	movs	r1, #13
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff ff73 	bl	8001c56 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2122      	movs	r1, #34	; 0x22
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff ff6d 	bl	8001c56 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	2100      	movs	r1, #0
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff ff84 	bl	8001c90 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001d88:	2103      	movs	r1, #3
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fd42 	bl	8001814 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001d90:	2112      	movs	r1, #18
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff ff45 	bl	8001c22 <LoRa_read>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	2112      	movs	r1, #18
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff53 	bl	8001c56 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff fd2e 	bl	8001814 <LoRa_gotoMode>
			return 1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e00f      	b.n	8001ddc <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	88bb      	ldrh	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001dc8:	6979      	ldr	r1, [r7, #20]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fd22 	bl	8001814 <LoRa_gotoMode>
				return 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e003      	b.n	8001ddc <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f001 fa4b 	bl	8003270 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001dda:	e7d9      	b.n	8001d90 <LoRa_transmit+0x5c>
	}
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001dec:	2105      	movs	r1, #5
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fd10 	bl	8001814 <LoRa_gotoMode>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	e007      	b.n	8001e24 <LoRa_receive+0x28>
		data[i]=0;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf3      	blt.n	8001e14 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fcf0 	bl	8001814 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001e34:	2112      	movs	r1, #18
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fef3 	bl	8001c22 <LoRa_read>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d02f      	beq.n	8001eaa <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001e4a:	22ff      	movs	r2, #255	; 0xff
 8001e4c:	2112      	movs	r1, #18
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff ff01 	bl	8001c56 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001e54:	2113      	movs	r1, #19
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff fee3 	bl	8001c22 <LoRa_read>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001e60:	2110      	movs	r1, #16
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff fedd 	bl	8001c22 <LoRa_read>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	210d      	movs	r1, #13
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff feef 	bl	8001c56 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001e78:	7cba      	ldrb	r2, [r7, #18]
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf28      	it	cs
 8001e80:	4613      	movcs	r3, r2
 8001e82:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00b      	b.n	8001ea2 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	18d4      	adds	r4, r2, r3
 8001e90:	2100      	movs	r1, #0
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff fec5 	bl	8001c22 <LoRa_read>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dbef      	blt.n	8001e8a <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001eaa:	2105      	movs	r1, #5
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fcb1 	bl	8001814 <LoRa_gotoMode>
    return min;
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3724      	adds	r7, #36	; 0x24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}

08001ebc <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff2a 	bl	8001d1e <LoRa_isvalid>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8096 	beq.w	8001ffe <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fc9d 	bl	8001814 <LoRa_gotoMode>
			HAL_Delay(10);
 8001eda:	200a      	movs	r0, #10
 8001edc:	f001 f9c8 	bl	8003270 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fe9d 	bl	8001c22 <LoRa_read>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001eec:	200a      	movs	r0, #10
 8001eee:	f001 f9bf 	bl	8003270 <HAL_Delay>
			data = read | 0x80;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ef8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001efa:	7bbb      	ldrb	r3, [r7, #14]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2101      	movs	r1, #1
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fea8 	bl	8001c56 <LoRa_write>
			HAL_Delay(100);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f001 f9b2 	bl	8003270 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fdb6 	bl	8001a84 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe11 	bl	8001b48 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe1e 	bl	8001b70 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001f34:	2223      	movs	r2, #35	; 0x23
 8001f36:	210c      	movs	r1, #12
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fe8c 	bl	8001c56 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fe54 	bl	8001bec <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fdc9 	bl	8001ae4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	211f      	movs	r1, #31
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fe7d 	bl	8001c56 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	211d      	movs	r1, #29
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe69 	bl	8001c56 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fd47 	bl	8001a18 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	2120      	movs	r1, #32
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe5c 	bl	8001c56 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2121      	movs	r1, #33	; 0x21
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fe54 	bl	8001c56 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fe36 	bl	8001c22 <LoRa_read>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001fc0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2140      	movs	r1, #64	; 0x40
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fe44 	bl	8001c56 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001fce:	2101      	movs	r1, #1
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fc1f 	bl	8001814 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f001 f947 	bl	8003270 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001fe2:	2142      	movs	r1, #66	; 0x42
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe1c 	bl	8001c22 <LoRa_read>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d101      	bne.n	8001ff8 <LoRa_init+0x13c>
				return LORA_OK;
 8001ff4:	23c8      	movs	r3, #200	; 0xc8
 8001ff6:	e004      	b.n	8002002 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001ff8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001ffc:	e001      	b.n	8002002 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001ffe:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <ADC_Init>:

#include "adc.h"

void GPIOA_PA1_Init();

void ADC_Init() {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
    // Configure PA1 for ADC
    GPIOA_PA1_Init();
 8002010:	f000 f874 	bl	80020fc <GPIOA_PA1_Init>

	// Enable ADC1 clock
	RCC->APB2ENR |= (1 << 8);
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <ADC_Init+0xe4>)
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	4a35      	ldr	r2, [pc, #212]	; (80020f0 <ADC_Init+0xe4>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6453      	str	r3, [r2, #68]	; 0x44

	// Prescaler = 2
	ADC->CCR &= ~(1 << 16);
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <ADC_Init+0xe8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <ADC_Init+0xe8>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~(1 << 17);
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <ADC_Init+0xe8>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <ADC_Init+0xe8>)
 8002032:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002036:	6053      	str	r3, [r2, #4]

	// Configure ADC resolution
	ADC1->CR1 &= ~(1 << 25);
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <ADC_Init+0xec>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a2e      	ldr	r2, [pc, #184]	; (80020f8 <ADC_Init+0xec>)
 800203e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002042:	6053      	str	r3, [r2, #4]
	ADC1->CR1 &= ~(1 << 24);
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <ADC_Init+0xec>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <ADC_Init+0xec>)
 800204a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204e:	6053      	str	r3, [r2, #4]

	// Configure to Scan mode
	ADC1->CR1 |= (1 << 8);
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <ADC_Init+0xec>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <ADC_Init+0xec>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6053      	str	r3, [r2, #4]
	// Enable Interrupt for EOC
	ADC1->CR1 |= (1 << 5);
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <ADC_Init+0xec>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <ADC_Init+0xec>)
 8002062:	f043 0320 	orr.w	r3, r3, #32
 8002066:	6053      	str	r3, [r2, #4]
	// Configure sampling time
	ADC1->SMPR2 &= ~(1 << 5);
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <ADC_Init+0xec>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <ADC_Init+0xec>)
 800206e:	f023 0320 	bic.w	r3, r3, #32
 8002072:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~(1 << 4);
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <ADC_Init+0xec>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <ADC_Init+0xec>)
 800207a:	f023 0310 	bic.w	r3, r3, #16
 800207e:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= (1 << 3);
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <ADC_Init+0xec>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <ADC_Init+0xec>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6113      	str	r3, [r2, #16]
	// End of conversion selection:
	ADC1->CR2 &= ~(1 << 10);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <ADC_Init+0xec>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <ADC_Init+0xec>)
 8002092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002096:	6093      	str	r3, [r2, #8]

	// Configure data alignment: Right alignment
	ADC1->CR2 &= ~(1 << 11);
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <ADC_Init+0xec>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <ADC_Init+0xec>)
 800209e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020a2:	6093      	str	r3, [r2, #8]

	// Regular channel sequence length: 1 conversion
	ADC1->SQR1 &= ~(1 << 23);
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <ADC_Init+0xec>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <ADC_Init+0xec>)
 80020aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1 << 22);
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <ADC_Init+0xec>)
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <ADC_Init+0xec>)
 80020b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020ba:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1 << 21);
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <ADC_Init+0xec>)
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <ADC_Init+0xec>)
 80020c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020c6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1 << 20);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <ADC_Init+0xec>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <ADC_Init+0xec>)
 80020ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020d2:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Assign channel for first conversion
	ADC1->SQR3 |= (1 << 0);
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <ADC_Init+0xec>)
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <ADC_Init+0xec>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6353      	str	r3, [r2, #52]	; 0x34

	// Continuous conversion mode
	ADC1->CR2 |= (1 << 1);
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <ADC_Init+0xec>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <ADC_Init+0xec>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40012300 	.word	0x40012300
 80020f8:	40012000 	.word	0x40012000

080020fc <GPIOA_PA1_Init>:

void GPIOA_PA1_Init() {
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB1ENR |= (1 << 0);
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <GPIOA_PA1_Init+0x34>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <GPIOA_PA1_Init+0x34>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA1 to analog mode
	GPIOA->MODER |= (1 << 3);
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <GPIOA_PA1_Init+0x38>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a08      	ldr	r2, [pc, #32]	; (8002134 <GPIOA_PA1_Init+0x38>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 2);
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <GPIOA_PA1_Init+0x38>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <GPIOA_PA1_Init+0x38>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6013      	str	r3, [r2, #0]

}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <I2C_Config>:
#include "i2c.h"

void I2C_Config(){
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
    // Enable the I2C CLOCK and GPIO CLOCK
	RCC->APB1ENR |= (1<<21);  // enable I2C CLOCK
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <I2C_Config+0xa0>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <I2C_Config+0xa0>)
 8002142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (1<<1);  // Enable GPIOB CLOCK
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <I2C_Config+0xa0>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <I2C_Config+0xa0>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	6313      	str	r3, [r2, #48]	; 0x30


	// Configure the I2C PINs for ALternate Functions
	GPIOB->MODER |= (2<<16) | (2<<18);  // Bits (17:16)= 1:0 --> Alternate Function for Pin PB8; Bits (19:18)= 1:0 --> Alternate Function for Pin PB9
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <I2C_Config+0xa4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <I2C_Config+0xa4>)
 800215a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800215e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1<<8) | (1<<9);  //  Bit8=1, Bit9=1  output open drain
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <I2C_Config+0xa4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <I2C_Config+0xa4>)
 8002166:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800216a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3<<16) | (3<<18);  // Bits (17:16)= 1:1 --> High Speed for PIN PB8; Bits (19:18)= 1:1 --> High Speed for PIN PB9
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <I2C_Config+0xa4>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <I2C_Config+0xa4>)
 8002172:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002176:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1<<16) | (1<<18);  // Bits (17:16)= 0:1 --> Pull up for PIN PB8; Bits (19:18)= 0:1 --> pull up for PIN PB9
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <I2C_Config+0xa4>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <I2C_Config+0xa4>)
 800217e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002182:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] |= (4<<0) | (4<<4);  // Bits (3:2:1:0) = 0:1:0:0 --> AF4 for pin PB8;  Bits (7:6:5:4) = 0:1:0:0 --> AF4 for pin PB9
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <I2C_Config+0xa4>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <I2C_Config+0xa4>)
 800218a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800218e:	6253      	str	r3, [r2, #36]	; 0x24


	// Reset the I2C
	I2C1->CR1 |= (1<<15);
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <I2C_Config+0xa8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <I2C_Config+0xa8>)
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <I2C_Config+0xa8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <I2C_Config+0xa8>)
 80021a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021a6:	6013      	str	r3, [r2, #0]

	// Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
//	I2C1->CR2 |= (18<<0);  // PCLK1 FREQUENCY in MHz
	I2C1->CR2 |= (36<<0);  // PCLK1 FREQUENCY in MHz
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <I2C_Config+0xa8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <I2C_Config+0xa8>)
 80021ae:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80021b2:	6053      	str	r3, [r2, #4]

	// Configure the clock control registers
	I2C1->CCR = 180<<0;  // check calculation in PDF
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <I2C_Config+0xa8>)
 80021b6:	22b4      	movs	r2, #180	; 0xb4
 80021b8:	61da      	str	r2, [r3, #28]

	// Configure the rise time register
	I2C1->TRISE = 37;  // check PDF again
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <I2C_Config+0xa8>)
 80021bc:	2225      	movs	r2, #37	; 0x25
 80021be:	621a      	str	r2, [r3, #32]

	// Program the I2C_CR1 register to enable the peripheral
	I2C1->CR1 |= (1<<0);  // Enable I2C
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <I2C_Config+0xa8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <I2C_Config+0xa8>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40005400 	.word	0x40005400

080021e4 <I2C_Write>:

void I2C_Write (uint8_t data) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
	/**** STEPS FOLLOWED  ************
	1. Wait for the TXE (bit 7 in SR1) to set. This indicates that the DR is empty
	2. Send the DATA to the DR Register
	3. Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission
	*/
	while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 80021ee:	bf00      	nop
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <I2C_Write+0x3c>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f9      	beq.n	80021f0 <I2C_Write+0xc>
	I2C1->DR = data;
 80021fc:	4a08      	ldr	r2, [pc, #32]	; (8002220 <I2C_Write+0x3c>)
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF bit to set
 8002202:	bf00      	nop
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <I2C_Write+0x3c>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f9      	beq.n	8002204 <I2C_Write+0x20>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400

08002224 <I2C_Address>:

void I2C_Address (uint8_t Address) {
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
/**** STEPS FOLLOWED  ************
1. Send the Slave Address to the DR Register
2. Wait for the ADDR (bit 1 in SR1) to set. This indicates the end of address transmission
3. clear the ADDR by reading the SR1 and SR2
*/
	I2C1->DR = Address;  //  send the address
 800222e:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <I2C_Address+0x3c>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 8002234:	bf00      	nop
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <I2C_Address+0x3c>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f9      	beq.n	8002236 <I2C_Address+0x12>
	uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <I2C_Address+0x3c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <I2C_Address+0x3c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	73fb      	strb	r3, [r7, #15]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40005400 	.word	0x40005400

08002264 <I2C_Start>:

void I2C_Start (void) {
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	/**** STEPS FOLLOWED  ************
	1. Send the START condition
	2. Wait for the SB ( Bit 0 in SR1) to set. This indicates that the start condition is generated
	*/

	I2C1->CR1 |= (1<<10);  // Enable the ACK
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <I2C_Start+0x38>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <I2C_Start+0x38>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002272:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8);  // Generate START
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <I2C_Start+0x38>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a08      	ldr	r2, [pc, #32]	; (800229c <I2C_Start+0x38>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & (1<<0)));  // Wait for SB bit to set
 8002280:	bf00      	nop
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <I2C_Start+0x38>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f9      	beq.n	8002282 <I2C_Start+0x1e>
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40005400 	.word	0x40005400

080022a0 <I2C_Stop>:

void I2C_Stop (void) {
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<9);  // Stop I2C
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <I2C_Stop+0x1c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <I2C_Stop+0x1c>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40005400 	.word	0x40005400

080022c0 <I2C_Read>:
	}

	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF to set
}

void I2C_Read (uint8_t Address, uint8_t *buffer, uint8_t size) {
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
 80022cc:	4613      	mov	r3, r2
 80022ce:	71bb      	strb	r3, [r7, #6]
			 second last data byte (after second last RxNE event)
		g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
		   after reading the second last data byte (after the second last RxNE event)
	 */

	int remaining = size;
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	60fb      	str	r3, [r7, #12]

	/**** STEP 1 ****/
	if (size == 1)
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d12f      	bne.n	800233a <I2C_Read+0x7a>
	{
		/**** STEP 1-a ****/
		I2C1->DR = Address;  //  send the address
 80022da:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <I2C_Read+0x148>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 80022e0:	bf00      	nop
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <I2C_Read+0x148>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f9      	beq.n	80022e2 <I2C_Read+0x22>

		/**** STEP 1-b ****/
		I2C1->CR1 &= ~(1<<10);  // clear the ACK bit
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <I2C_Read+0x148>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a45      	ldr	r2, [pc, #276]	; (8002408 <I2C_Read+0x148>)
 80022f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f8:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <I2C_Read+0x148>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <I2C_Read+0x148>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1<<9);  // Stop I2C
 800230a:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <I2C_Read+0x148>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <I2C_Read+0x148>)
 8002310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002314:	6013      	str	r3, [r2, #0]

		/**** STEP 1-c ****/
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8002316:	bf00      	nop
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <I2C_Read+0x148>)
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f9      	beq.n	8002318 <I2C_Read+0x58>

		/**** STEP 1-d ****/
		buffer[size-remaining] = I2C1->DR;  // Read the data from the DATA REGISTER
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <I2C_Read+0x148>)
 8002326:	6919      	ldr	r1, [r3, #16]
 8002328:	79ba      	ldrb	r2, [r7, #6]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	461a      	mov	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
		// Read the Last BYTE
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
		buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
	}

}
 8002338:	e060      	b.n	80023fc <I2C_Read+0x13c>
		I2C1->DR = Address;  //  send the address
 800233a:	4a33      	ldr	r2, [pc, #204]	; (8002408 <I2C_Read+0x148>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 8002340:	bf00      	nop
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <I2C_Read+0x148>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f9      	beq.n	8002342 <I2C_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <I2C_Read+0x148>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <I2C_Read+0x148>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	72fb      	strb	r3, [r7, #11]
		while (remaining>2)
 800235e:	e019      	b.n	8002394 <I2C_Read+0xd4>
			while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8002360:	bf00      	nop
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <I2C_Read+0x148>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f9      	beq.n	8002362 <I2C_Read+0xa2>
			buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <I2C_Read+0x148>)
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	79ba      	ldrb	r2, [r7, #6]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	461a      	mov	r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	b2ca      	uxtb	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1<<10;  // Set the ACK bit to Acknowledge the data received
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <I2C_Read+0x148>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a20      	ldr	r2, [pc, #128]	; (8002408 <I2C_Read+0x148>)
 8002388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238c:	6013      	str	r3, [r2, #0]
			remaining--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b01      	subs	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
		while (remaining>2)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b02      	cmp	r3, #2
 8002398:	dce2      	bgt.n	8002360 <I2C_Read+0xa0>
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 800239a:	bf00      	nop
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <I2C_Read+0x148>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f9      	beq.n	800239c <I2C_Read+0xdc>
		buffer[size-remaining] = I2C1->DR;
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <I2C_Read+0x148>)
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	79ba      	ldrb	r2, [r7, #6]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1<<10);  // clear the ACK bit
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <I2C_Read+0x148>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a11      	ldr	r2, [pc, #68]	; (8002408 <I2C_Read+0x148>)
 80023c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023c6:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1<<9);  // Stop I2C
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <I2C_Read+0x148>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <I2C_Read+0x148>)
 80023ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d2:	6013      	str	r3, [r2, #0]
		remaining--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 80023da:	bf00      	nop
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <I2C_Read+0x148>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f9      	beq.n	80023dc <I2C_Read+0x11c>
		buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <I2C_Read+0x148>)
 80023ea:	6919      	ldr	r1, [r3, #16]
 80023ec:	79ba      	ldrb	r2, [r7, #6]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40005400 	.word	0x40005400

0800240c <SPI_Init>:
SPI_HandleTypeDef hspi1;

void SPI1_GPIOA_Init();
void SPI1_GPIOB_Init();

void SPI_Init(){
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0

    /**
	HAL-Based Code
	*/

	hspi1.Instance = SPI1;
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <SPI_Init+0x64>)
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <SPI_Init+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <SPI_Init+0x64>)
 8002418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800241c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <SPI_Init+0x64>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <SPI_Init+0x64>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <SPI_Init+0x64>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <SPI_Init+0x64>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <SPI_Init+0x64>)
 8002438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <SPI_Init+0x64>)
 8002440:	2208      	movs	r2, #8
 8002442:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <SPI_Init+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <SPI_Init+0x64>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <SPI_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <SPI_Init+0x64>)
 8002458:	220a      	movs	r2, #10
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
    SPI1_GPIOA_Init(&hspi1);
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <SPI_Init+0x64>)
 800245e:	f000 f80b 	bl	8002478 <SPI1_GPIOA_Init>
    SPI1_GPIOB_Init();
 8002462:	f000 f851 	bl	8002508 <SPI1_GPIOB_Init>

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002466:	4802      	ldr	r0, [pc, #8]	; (8002470 <SPI_Init+0x64>)
 8002468:	f001 fed0 	bl	800420c <HAL_SPI_Init>
    {
        // Error_Handler();
    }

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000128 	.word	0x20000128
 8002474:	40013000 	.word	0x40013000

08002478 <SPI1_GPIOA_Init>:

void SPI1_GPIOA_Init(SPI_HandleTypeDef* spiHandle){
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

    /**
	HAL-Based Code
	*/

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
      if(spiHandle->Instance==SPI1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <SPI1_GPIOA_Init+0x84>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d12b      	bne.n	80024f2 <SPI1_GPIOA_Init+0x7a>
      {
      /* USER CODE BEGIN SPI1_MspInit 0 */

      /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <SPI1_GPIOA_Init+0x88>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <SPI1_GPIOA_Init+0x88>)
 80024a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <SPI1_GPIOA_Init+0x88>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <SPI1_GPIOA_Init+0x88>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <SPI1_GPIOA_Init+0x88>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <SPI1_GPIOA_Init+0x88>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA6     ------> SPI1_MISO
        PA7     ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024d2:	23e0      	movs	r3, #224	; 0xe0
 80024d4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e2:	2305      	movs	r3, #5
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <SPI1_GPIOA_Init+0x8c>)
 80024ee:	f001 f857 	bl	80035a0 <HAL_GPIO_Init>

      /* USER CODE BEGIN SPI1_MspInit 1 */

      /* USER CODE END SPI1_MspInit 1 */
      }
}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40013000 	.word	0x40013000
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000

08002508 <SPI1_GPIOB_Init>:

void SPI1_GPIOB_Init(){
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0


    /**
	HAL-Based Code
	*/
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <SPI1_GPIOB_Init+0xec>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800258e:	2201      	movs	r2, #1
 8002590:	2103      	movs	r1, #3
 8002592:	4819      	ldr	r0, [pc, #100]	; (80025f8 <SPI1_GPIOB_Init+0xf0>)
 8002594:	f001 f988 	bl	80038a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800259e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4813      	ldr	r0, [pc, #76]	; (80025fc <SPI1_GPIOB_Init+0xf4>)
 80025b0:	f000 fff6 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80025b4:	2303      	movs	r3, #3
 80025b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	480b      	ldr	r0, [pc, #44]	; (80025f8 <SPI1_GPIOB_Init+0xf0>)
 80025cc:	f000 ffe8 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 80025d0:	2304      	movs	r3, #4
 80025d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <SPI1_GPIOB_Init+0xf0>)
 80025e6:	f000 ffdb 	bl	80035a0 <HAL_GPIO_Init>
}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800

08002600 <GY521_Write>:
static float Gyro_X_Bias = 0.0f;
static float Gyro_Y_Bias = 0.0f;
static float Gyro_Z_Bias = 0.0f;

void GY521_Write (uint8_t Address, uint8_t Reg, uint8_t Data)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	460b      	mov	r3, r1
 800260c:	71bb      	strb	r3, [r7, #6]
 800260e:	4613      	mov	r3, r2
 8002610:	717b      	strb	r3, [r7, #5]
	I2C_Start();
 8002612:	f7ff fe27 	bl	8002264 <I2C_Start>
	I2C_Address (Address);
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe03 	bl	8002224 <I2C_Address>
	I2C_Write (Reg);
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fddf 	bl	80021e4 <I2C_Write>
	I2C_Write (Data);
 8002626:	797b      	ldrb	r3, [r7, #5]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fddb 	bl	80021e4 <I2C_Write>
	I2C_Stop ();
 800262e:	f7ff fe37 	bl	80022a0 <I2C_Stop>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <GY521_Read>:

void GY521_Read (uint8_t Address, uint8_t Reg, uint8_t *buffer, uint8_t size)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	460b      	mov	r3, r1
 800264a:	71bb      	strb	r3, [r7, #6]
 800264c:	4613      	mov	r3, r2
 800264e:	717b      	strb	r3, [r7, #5]
	I2C_Start();
 8002650:	f7ff fe08 	bl	8002264 <I2C_Start>
	I2C_Address (Address);
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fde4 	bl	8002224 <I2C_Address>
	I2C_Write (Reg);
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fdc0 	bl	80021e4 <I2C_Write>
	I2C_Start ();  // repeated start
 8002664:	f7ff fdfe 	bl	8002264 <I2C_Start>
	I2C_Read (Address+0x01, buffer, size);
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	3301      	adds	r3, #1
 800266c:	797a      	ldrb	r2, [r7, #5]
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fe25 	bl	80022c0 <I2C_Read>
	I2C_Stop ();
 8002676:	f7ff fe13 	bl	80022a0 <I2C_Stop>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <GY521_Read_Accel>:
// 	GPIOA->ODR &= ~(1<<5); // PA5 initially LOW
// }


void GY521_Read_Accel (void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0

	uint8_t Rx_data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	GY521_Read (GY521_ADDR, ACCEL_X_OUT_H_REG, Rx_data, 6);
 800268a:	1d3a      	adds	r2, r7, #4
 800268c:	2306      	movs	r3, #6
 800268e:	213b      	movs	r1, #59	; 0x3b
 8002690:	20d0      	movs	r0, #208	; 0xd0
 8002692:	f7ff ffd2 	bl	800263a <GY521_Read>

	Accel_X_RAW = (int16_t)(Rx_data[0] << 8 | Rx_data [1]);
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21a      	sxth	r2, r3
 800269c:	797b      	ldrb	r3, [r7, #5]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <GY521_Read_Accel+0xdc>)
 80026a6:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rx_data[2] << 8 | Rx_data [3]);
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <GY521_Read_Accel+0xe0>)
 80026b8:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data [5]);
 80026ba:	7a3b      	ldrb	r3, [r7, #8]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	7a7b      	ldrb	r3, [r7, #9]
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <GY521_Read_Accel+0xe4>)
 80026ca:	801a      	strh	r2, [r3, #0]
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/
	//	static float factor = 32678.0f/16000.0f; // factor for 16G
	static int g = 2;
	float scalingFactor = (32678.0f/g);
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <GY521_Read_Accel+0xe8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002770 <GY521_Read_Accel+0xec>
 80026dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e0:	edc7 7a03 	vstr	s15, [r7, #12]

	Ax = (Accel_X_RAW/scalingFactor) - Accel_X_Bias;
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <GY521_Read_Accel+0xdc>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <GY521_Read_Accel+0xf0>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <GY521_Read_Accel+0xf4>)
 8002706:	edc3 7a00 	vstr	s15, [r3]
	Ay = (Accel_Y_RAW/scalingFactor) - Accel_Y_Bias;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <GY521_Read_Accel+0xe0>)
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002718:	edd7 7a03 	vldr	s15, [r7, #12]
 800271c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <GY521_Read_Accel+0xf8>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <GY521_Read_Accel+0xfc>)
 800272c:	edc3 7a00 	vstr	s15, [r3]
	Az = (Accel_Z_RAW/scalingFactor) - Accel_Z_Bias;
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <GY521_Read_Accel+0xe4>)
 8002732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800273e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <GY521_Read_Accel+0x100>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <GY521_Read_Accel+0x104>)
 8002752:	edc3 7a00 	vstr	s15, [r3]
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000180 	.word	0x20000180
 8002764:	20000182 	.word	0x20000182
 8002768:	20000184 	.word	0x20000184
 800276c:	20000000 	.word	0x20000000
 8002770:	46ff4c00 	.word	0x46ff4c00
 8002774:	20000194 	.word	0x20000194
 8002778:	20000188 	.word	0x20000188
 800277c:	20000198 	.word	0x20000198
 8002780:	2000018c 	.word	0x2000018c
 8002784:	2000019c 	.word	0x2000019c
 8002788:	20000190 	.word	0x20000190

0800278c <GY521_Init>:
	Gz = Gyro_Z_RAW/131.0;

}

void GY521_Init (void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
	I2C_Config();
 8002792:	f7ff fcd1 	bl	8002138 <I2C_Config>
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	GY521_Read (GY521_ADDR,WHO_AM_I_REG, &check, 1);
 8002796:	1dba      	adds	r2, r7, #6
 8002798:	2301      	movs	r3, #1
 800279a:	2175      	movs	r1, #117	; 0x75
 800279c:	20d0      	movs	r0, #208	; 0xd0
 800279e:	f7ff ff4c 	bl	800263a <GY521_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80027a2:	79bb      	ldrb	r3, [r7, #6]
 80027a4:	2b68      	cmp	r3, #104	; 0x68
 80027a6:	d11f      	bne.n	80027e8 <GY521_Init+0x5c>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	71fb      	strb	r3, [r7, #7]
		GY521_Write (GY521_ADDR, PWR_MGMT_1_REG, Data);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	461a      	mov	r2, r3
 80027b0:	216b      	movs	r1, #107	; 0x6b
 80027b2:	20d0      	movs	r0, #208	; 0xd0
 80027b4:	f7ff ff24 	bl	8002600 <GY521_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80027b8:	2307      	movs	r3, #7
 80027ba:	71fb      	strb	r3, [r7, #7]
		GY521_Write(GY521_ADDR, SMPLRT_DIV_REG, Data);
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	461a      	mov	r2, r3
 80027c0:	2119      	movs	r1, #25
 80027c2:	20d0      	movs	r0, #208	; 0xd0
 80027c4:	f7ff ff1c 	bl	8002600 <GY521_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
		Data = 0x00;
 80027c8:	2300      	movs	r3, #0
 80027ca:	71fb      	strb	r3, [r7, #7]
		GY521_Write(GY521_ADDR, ACCEL_CONFIG_REG, Data);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	461a      	mov	r2, r3
 80027d0:	211c      	movs	r1, #28
 80027d2:	20d0      	movs	r0, #208	; 0xd0
 80027d4:	f7ff ff14 	bl	8002600 <GY521_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 250 ?/s
		Data = 0x00;
 80027d8:	2300      	movs	r3, #0
 80027da:	71fb      	strb	r3, [r7, #7]
		GY521_Write(GY521_ADDR, GYRO_CONFIG_REG, Data);
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	461a      	mov	r2, r3
 80027e0:	211b      	movs	r1, #27
 80027e2:	20d0      	movs	r0, #208	; 0xd0
 80027e4:	f7ff ff0c 	bl	8002600 <GY521_Write>
	}

	// TIM2->EGR |= (1<<0); // Reset timer counter registers
	// TIM2->CR1 |= (1<<0); // Enable timer
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <Moisture_Init>:
#include "moisture.h"

#include "adc.h"

void Moisture_Init(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	ADC_Init();
 80027f4:	f7ff fc0a 	bl	800200c <ADC_Init>
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <getMoistureValue>:

int getMoistureValue(){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
	// Enable the ADC 
	ADC1->CR2 |= (1 << 0); 
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <getMoistureValue+0x44>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <getMoistureValue+0x44>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 fd2e 	bl	8003270 <HAL_Delay>

	// Start ADC conversion
	ADC1->CR2 |= (1 << 30);
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <getMoistureValue+0x44>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a09      	ldr	r2, [pc, #36]	; (8002840 <getMoistureValue+0x44>)
 800281a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800281e:	6093      	str	r3, [r2, #8]
	while (!((ADC1->SR) & (1 << 1))); // Wait for conversion to finish
 8002820:	bf00      	nop
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <getMoistureValue+0x44>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f9      	beq.n	8002822 <getMoistureValue+0x26>

	uint32_t moisture_value = ADC1->DR;
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <getMoistureValue+0x44>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	607b      	str	r3, [r7, #4]
	return moisture_value;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40012000 	.word	0x40012000

08002844 <Vibration_Init>:
#include "vibration.h"

#include "adc.h"

void Vibration_Init(){
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	ADC_Init();
 8002848:	f7ff fbe0 	bl	800200c <ADC_Init>
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <getVibrationValue>:

uint16_t getVibrationValue(){
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
	// Enable the ADC 
	ADC1->CR2 |= (1 << 0); 
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <getVibrationValue+0x44>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <getVibrationValue+0x44>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6093      	str	r3, [r2, #8]
	HAL_Delay(0.5);
 8002862:	2000      	movs	r0, #0
 8002864:	f000 fd04 	bl	8003270 <HAL_Delay>

	// Start ADC conversion
	ADC1->CR2 |= (1 << 30);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <getVibrationValue+0x44>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a09      	ldr	r2, [pc, #36]	; (8002894 <getVibrationValue+0x44>)
 800286e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002872:	6093      	str	r3, [r2, #8]
	while (!((ADC1->SR) & (1 << 1))); // Wait for conversion to finish
 8002874:	bf00      	nop
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <getVibrationValue+0x44>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f9      	beq.n	8002876 <getVibrationValue+0x26>

	uint32_t vibration_value = ADC1->DR;
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <getVibrationValue+0x44>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	607b      	str	r3, [r7, #4]
	return vibration_value;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	b29b      	uxth	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40012000 	.word	0x40012000

08002898 <main>:
int compareString(char* message, char* compareTo);
void removeFirstChar(char* str);
void IWDG_Init(void);
void IWDG_Refresh(void);

int main(){
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	initializeSystem();
 800289c:	f000 fa6e 	bl	8002d7c <initializeSystem>
	while(1){
		isMaster ? doMasterNode() : doSensorNode();
 80028a0:	2301      	movs	r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <main+0x14>
 80028a6:	f000 f805 	bl	80028b4 <doMasterNode>
 80028aa:	e7f9      	b.n	80028a0 <main+0x8>
 80028ac:	f000 f918 	bl	8002ae0 <doSensorNode>
 80028b0:	e7f6      	b.n	80028a0 <main+0x8>
	...

080028b4 <doMasterNode>:
	}
	return 1;
}

void doMasterNode(){
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b0a0      	sub	sp, #128	; 0x80
 80028b8:	af00      	add	r7, sp, #0

	char* field_values [5] = {"0.00", "0.00", "0.00", "0.00", "0.00"};
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <doMasterNode+0x21c>)
 80028bc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80028c0:	461d      	mov	r5, r3
 80028c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	6023      	str	r3, [r4, #0]
	uint8_t received_data[10]; // Data buffer for data received from LoRa
	uint8_t packet_size = 0; // Size of packet received from LoRa
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	// Poll data from the sensors
	for (int i=0; i < 5; i++){
 80028d0:	2300      	movs	r3, #0
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028d4:	e0ea      	b.n	8002aac <doMasterNode+0x1f8>
		int correct_packet_received = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	677b      	str	r3, [r7, #116]	; 0x74
		startTimer();
 80028da:	f7fe fb5d 	bl	8000f98 <startTimer>
		while(doDelay || correct_packet_received){
 80028de:	e0d9      	b.n	8002a94 <doMasterNode+0x1e0>
			packet_size = LoRa_receive(&myLoRa, received_data, 5);
 80028e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028e4:	2205      	movs	r2, #5
 80028e6:	4619      	mov	r1, r3
 80028e8:	487a      	ldr	r0, [pc, #488]	; (8002ad4 <doMasterNode+0x220>)
 80028ea:	f7ff fa87 	bl	8001dfc <LoRa_receive>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			IWDG_Refresh();
 80028f4:	f000 fab8 	bl	8002e68 <IWDG_Refresh>
			// if DATA exists, parse it and check if sender_id matches what we want
			if (packet_size >= 5){
 80028f8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	f240 80c5 	bls.w	8002a8c <doMasterNode+0x1d8>
				char sender_id[1];
				if (i == 0){
 8002902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d125      	bne.n	8002954 <doMasterNode+0xa0>
					sender_id[0] = 'X';
 8002908:	2358      	movs	r3, #88	; 0x58
 800290a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					int is_same = received_data[0] == sender_id[0];
 800290e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002912:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002916:	429a      	cmp	r2, r3
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	663b      	str	r3, [r7, #96]	; 0x60
					if (is_same){ // data packet matches ID
 8002922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80b1 	beq.w	8002a8c <doMasterNode+0x1d8>
						char parsed_data[10 + 1];
						memcpy(parsed_data, received_data, 10);
 800292a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800292e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002932:	ca07      	ldmia	r2, {r0, r1, r2}
 8002934:	c303      	stmia	r3!, {r0, r1}
 8002936:	801a      	strh	r2, [r3, #0]
						parsed_data[10] = '\0';
 8002938:	2300      	movs	r3, #0
 800293a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						removeFirstChar(parsed_data);
 800293e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb06 	bl	8002f54 <removeFirstChar>
						field_values[0] = parsed_data;
 8002948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800294c:	64fb      	str	r3, [r7, #76]	; 0x4c
						correct_packet_received = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	677b      	str	r3, [r7, #116]	; 0x74
						break;
 8002952:	e0a8      	b.n	8002aa6 <doMasterNode+0x1f2>
					}

				}
				else if (i == 1){
 8002954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d125      	bne.n	80029a6 <doMasterNode+0xf2>
					sender_id[0] = 'Y';
 800295a:	2359      	movs	r3, #89	; 0x59
 800295c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					int is_same = received_data[0] == sender_id[0];
 8002960:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002964:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002968:	429a      	cmp	r2, r3
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	667b      	str	r3, [r7, #100]	; 0x64
					if (is_same){ // data packet matches ID
 8002974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8088 	beq.w	8002a8c <doMasterNode+0x1d8>
						char parsed_data[10 + 1];
						memcpy(parsed_data, received_data, 10);
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002984:	ca07      	ldmia	r2, {r0, r1, r2}
 8002986:	c303      	stmia	r3!, {r0, r1}
 8002988:	801a      	strh	r2, [r3, #0]
						parsed_data[10] = '\0';
 800298a:	2300      	movs	r3, #0
 800298c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						removeFirstChar(parsed_data);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fadd 	bl	8002f54 <removeFirstChar>
						field_values[1] = parsed_data;
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	653b      	str	r3, [r7, #80]	; 0x50
						correct_packet_received = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	677b      	str	r3, [r7, #116]	; 0x74
						break;
 80029a4:	e07f      	b.n	8002aa6 <doMasterNode+0x1f2>
					}

				}
				else if (i == 2){
 80029a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d124      	bne.n	80029f6 <doMasterNode+0x142>
					sender_id[0] = 'Z';
 80029ac:	235a      	movs	r3, #90	; 0x5a
 80029ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					int is_same = received_data[0] == sender_id[0];
 80029b2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80029b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	66bb      	str	r3, [r7, #104]	; 0x68
					if (is_same){ // data packet matches ID
 80029c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05f      	beq.n	8002a8c <doMasterNode+0x1d8>
						char parsed_data[10 + 1];
						memcpy(parsed_data, received_data, 10);
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80029d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029d6:	c303      	stmia	r3!, {r0, r1}
 80029d8:	801a      	strh	r2, [r3, #0]
						parsed_data[10] = '\0';
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						removeFirstChar(parsed_data);
 80029e0:	f107 0318 	add.w	r3, r7, #24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fab5 	bl	8002f54 <removeFirstChar>
						field_values[2] = parsed_data;
 80029ea:	f107 0318 	add.w	r3, r7, #24
 80029ee:	657b      	str	r3, [r7, #84]	; 0x54
						correct_packet_received = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	677b      	str	r3, [r7, #116]	; 0x74
						break;
 80029f4:	e057      	b.n	8002aa6 <doMasterNode+0x1f2>
					}

				}
				else if (i == 3){
 80029f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d123      	bne.n	8002a44 <doMasterNode+0x190>
					sender_id[0] = 'M';
 80029fc:	234d      	movs	r3, #77	; 0x4d
 80029fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					int is_same = received_data[0] == sender_id[0];
 8002a02:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002a06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	66fb      	str	r3, [r7, #108]	; 0x6c
					if (is_same){ // data packet matches ID
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d037      	beq.n	8002a8c <doMasterNode+0x1d8>
						char parsed_data[10 + 1];
						memcpy(parsed_data, received_data, 10);
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a26:	c303      	stmia	r3!, {r0, r1}
 8002a28:	801a      	strh	r2, [r3, #0]
						parsed_data[10] = '\0';
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75bb      	strb	r3, [r7, #22]
						removeFirstChar(parsed_data);
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fa8e 	bl	8002f54 <removeFirstChar>
						field_values[3] = parsed_data;
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	65bb      	str	r3, [r7, #88]	; 0x58
						correct_packet_received = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	677b      	str	r3, [r7, #116]	; 0x74
						break;
 8002a42:	e030      	b.n	8002aa6 <doMasterNode+0x1f2>
					}
				}
				else if (i == 4){
 8002a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d120      	bne.n	8002a8c <doMasterNode+0x1d8>
					sender_id[0] = 'V';
 8002a4a:	2356      	movs	r3, #86	; 0x56
 8002a4c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					int is_same = received_data[0] == sender_id[0];
 8002a50:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002a54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	673b      	str	r3, [r7, #112]	; 0x70
					if (is_same){ // data packet matches ID
 8002a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <doMasterNode+0x1d8>
						char parsed_data[10 + 1];
						memcpy(parsed_data, received_data, 10);
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a72:	c303      	stmia	r3!, {r0, r1}
 8002a74:	801a      	strh	r2, [r3, #0]
						parsed_data[10] = '\0';
 8002a76:	2300      	movs	r3, #0
 8002a78:	72bb      	strb	r3, [r7, #10]
						removeFirstChar(parsed_data);
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fa69 	bl	8002f54 <removeFirstChar>
						field_values[4] = parsed_data;
 8002a82:	463b      	mov	r3, r7
 8002a84:	65fb      	str	r3, [r7, #92]	; 0x5c
						correct_packet_received = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	677b      	str	r3, [r7, #116]	; 0x74
						break;
 8002a8a:	e00c      	b.n	8002aa6 <doMasterNode+0x1f2>
					}
				}


			}
			HAL_Delay(500);
 8002a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a90:	f000 fbee 	bl	8003270 <HAL_Delay>
		while(doDelay || correct_packet_received){
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <doMasterNode+0x224>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f47f af21 	bne.w	80028e0 <doMasterNode+0x2c>
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af1d 	bne.w	80028e0 <doMasterNode+0x2c>
	for (int i=0; i < 5; i++){
 8002aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	f77f af11 	ble.w	80028d6 <doMasterNode+0x22>
	}
	// Display to LCD
	// insert function for LCD here

	// Send all polled data to Master channel
	ESP_Send_Multi(MASTER_THINGSPEAK_API_KEY, 5, field_values);
 8002ab4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2105      	movs	r1, #5
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <doMasterNode+0x228>)
 8002abe:	f7fe fbe5 	bl	800128c <ESP_Send_Multi>
	IWDG_Refresh();
 8002ac2:	f000 f9d1 	bl	8002e68 <IWDG_Refresh>
}
 8002ac6:	bf00      	nop
 8002ac8:	3780      	adds	r7, #128	; 0x80
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	0800753c 	.word	0x0800753c
 8002ad4:	200001a0 	.word	0x200001a0
 8002ad8:	2000008c 	.word	0x2000008c
 8002adc:	08007520 	.word	0x08007520

08002ae0 <doSensorNode>:

void doSensorNode(){
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b09a      	sub	sp, #104	; 0x68
 8002ae4:	af00      	add	r7, sp, #0
	IWDG_Refresh();
 8002ae6:	f000 f9bf 	bl	8002e68 <IWDG_Refresh>

	int adc_value;
	char lora_send[10];
	char sensor_data_buffer[6];

	switch(sender){
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	f000 80ca 	beq.w	8002c86 <doSensorNode+0x1a6>
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f300 8121 	bgt.w	8002d3a <doSensorNode+0x25a>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <doSensorNode+0x22>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d067      	beq.n	8002bd0 <doSensorNode+0xf0>
			LoRa_transmit(&myLoRa, (uint8_t*)lora_send, 6, 1000);
			IWDG_Refresh();
			HAL_Delay(15000);
			break;
	}
}
 8002b00:	e11b      	b.n	8002d3a <doSensorNode+0x25a>
			GY521_Read_Accel();
 8002b02:	f7ff fdbf 	bl	8002684 <GY521_Read_Accel>
			floatToString(Ax, Ax_char, 2);
 8002b06:	4b92      	ldr	r3, [pc, #584]	; (8002d50 <doSensorNode+0x270>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	f000 f9b6 	bl	8002e88 <floatToString>
			floatToString(Ay, Ay_char, 2);
 8002b1c:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <doSensorNode+0x274>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b26:	2102      	movs	r1, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2e:	f000 f9ab 	bl	8002e88 <floatToString>
			floatToString(Az, Az_char, 2);
 8002b32:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <doSensorNode+0x278>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	f000 f9a0 	bl	8002e88 <floatToString>
			acceleration_values[0] = Ax_char;
 8002b48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
			acceleration_values[1] = Ay_char;
 8002b4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
			acceleration_values[2] = Az_char;
 8002b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
			ESP_Send_Multi(ACCEGYRO_THINGSPEAK_API_KEY, 3, acceleration_values);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2103      	movs	r1, #3
 8002b62:	487e      	ldr	r0, [pc, #504]	; (8002d5c <doSensorNode+0x27c>)
 8002b64:	f7fe fb92 	bl	800128c <ESP_Send_Multi>
			IWDG_Refresh();
 8002b68:	f000 f97e 	bl	8002e68 <IWDG_Refresh>
			HAL_Delay(15000);
 8002b6c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002b70:	f000 fb7e 	bl	8003270 <HAL_Delay>
			sprintf(loraX, "%c%s", 'X',Ax_char);
 8002b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b78:	f107 0018 	add.w	r0, r7, #24
 8002b7c:	2258      	movs	r2, #88	; 0x58
 8002b7e:	4978      	ldr	r1, [pc, #480]	; (8002d60 <doSensorNode+0x280>)
 8002b80:	f003 f818 	bl	8005bb4 <siprintf>
			sprintf(loraY, "%c%s", 'Y',Ay_char);
 8002b84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b88:	f107 000c 	add.w	r0, r7, #12
 8002b8c:	2259      	movs	r2, #89	; 0x59
 8002b8e:	4974      	ldr	r1, [pc, #464]	; (8002d60 <doSensorNode+0x280>)
 8002b90:	f003 f810 	bl	8005bb4 <siprintf>
			sprintf(loraZ, "%c%s", 'Z',Az_char);
 8002b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b98:	4638      	mov	r0, r7
 8002b9a:	225a      	movs	r2, #90	; 0x5a
 8002b9c:	4970      	ldr	r1, [pc, #448]	; (8002d60 <doSensorNode+0x280>)
 8002b9e:	f003 f809 	bl	8005bb4 <siprintf>
			LoRa_transmit(&myLoRa, (uint8_t*)loraX, 6, 100);
 8002ba2:	f107 0118 	add.w	r1, r7, #24
 8002ba6:	2364      	movs	r3, #100	; 0x64
 8002ba8:	2206      	movs	r2, #6
 8002baa:	486e      	ldr	r0, [pc, #440]	; (8002d64 <doSensorNode+0x284>)
 8002bac:	f7ff f8c2 	bl	8001d34 <LoRa_transmit>
			LoRa_transmit(&myLoRa, (uint8_t*)loraY, 6, 100);
 8002bb0:	f107 010c 	add.w	r1, r7, #12
 8002bb4:	2364      	movs	r3, #100	; 0x64
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	486a      	ldr	r0, [pc, #424]	; (8002d64 <doSensorNode+0x284>)
 8002bba:	f7ff f8bb 	bl	8001d34 <LoRa_transmit>
			LoRa_transmit(&myLoRa, (uint8_t*)loraZ, 6, 100);
 8002bbe:	4639      	mov	r1, r7
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	2206      	movs	r2, #6
 8002bc4:	4867      	ldr	r0, [pc, #412]	; (8002d64 <doSensorNode+0x284>)
 8002bc6:	f7ff f8b5 	bl	8001d34 <LoRa_transmit>
			IWDG_Refresh();
 8002bca:	f000 f94d 	bl	8002e68 <IWDG_Refresh>
			break;
 8002bce:	e0b4      	b.n	8002d3a <doSensorNode+0x25a>
			adc_value = getVibrationValue();
 8002bd0:	f7ff fe3e 	bl	8002850 <getVibrationValue>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	667b      	str	r3, [r7, #100]	; 0x64
			float vibration_data = abs(((adc_value * 5.0) / 1023)-vibration_bias);
 8002bd8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002bda:	f7fd fcab 	bl	8000534 <__aeabi_i2d>
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <doSensorNode+0x288>)
 8002be4:	f7fd fd10 	bl	8000608 <__aeabi_dmul>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	a355      	add	r3, pc, #340	; (adr r3, 8002d48 <doSensorNode+0x268>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fe31 	bl	800085c <__aeabi_ddiv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	461d      	mov	r5, r3
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <doSensorNode+0x28c>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fca7 	bl	8000558 <__aeabi_f2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	f7fd fb41 	bl	8000298 <__aeabi_dsub>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd ffa3 	bl	8000b68 <__aeabi_d2iz>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bfb8      	it	lt
 8002c28:	425b      	neglt	r3, r3
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c32:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			floatToString(vibration_data, sensor_data_buffer, 2);
 8002c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8002c42:	f000 f921 	bl	8002e88 <floatToString>
			ESP_Send_Data(VIBRATION_THINGSPEAK_API_KEY, 1, sensor_data_buffer);
 8002c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	4848      	ldr	r0, [pc, #288]	; (8002d70 <doSensorNode+0x290>)
 8002c50:	f7fe faa0 	bl	8001194 <ESP_Send_Data>
			IWDG_Refresh();
 8002c54:	f000 f908 	bl	8002e68 <IWDG_Refresh>
			sprintf(lora_send, "%c%s", 'V', sensor_data_buffer); // merge sendID and data
 8002c58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c5c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002c60:	2256      	movs	r2, #86	; 0x56
 8002c62:	493f      	ldr	r1, [pc, #252]	; (8002d60 <doSensorNode+0x280>)
 8002c64:	f002 ffa6 	bl	8005bb4 <siprintf>
			LoRa_transmit(&myLoRa, (uint8_t*)lora_send, 6, 1000);
 8002c68:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c70:	2206      	movs	r2, #6
 8002c72:	483c      	ldr	r0, [pc, #240]	; (8002d64 <doSensorNode+0x284>)
 8002c74:	f7ff f85e 	bl	8001d34 <LoRa_transmit>
			IWDG_Refresh();
 8002c78:	f000 f8f6 	bl	8002e68 <IWDG_Refresh>
			HAL_Delay(15000);
 8002c7c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002c80:	f000 faf6 	bl	8003270 <HAL_Delay>
			break;
 8002c84:	e059      	b.n	8002d3a <doSensorNode+0x25a>
			adc_value = getMoistureValue();
 8002c86:	f7ff fdb9 	bl	80027fc <getMoistureValue>
 8002c8a:	6678      	str	r0, [r7, #100]	; 0x64
			float moisture_data = abs(((adc_value * 5.0) / 1023)-moisture_bias);
 8002c8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c8e:	f7fd fc51 	bl	8000534 <__aeabi_i2d>
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <doSensorNode+0x288>)
 8002c98:	f7fd fcb6 	bl	8000608 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	a328      	add	r3, pc, #160	; (adr r3, 8002d48 <doSensorNode+0x268>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fdd7 	bl	800085c <__aeabi_ddiv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	461d      	mov	r5, r3
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <doSensorNode+0x294>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc4d 	bl	8000558 <__aeabi_f2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	f7fd fae7 	bl	8000298 <__aeabi_dsub>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff49 	bl	8000b68 <__aeabi_d2iz>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bfb8      	it	lt
 8002cdc:	425b      	neglt	r3, r3
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			floatToString(moisture_data, sensor_data_buffer, 2);
 8002cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8002cf6:	f000 f8c7 	bl	8002e88 <floatToString>
			ESP_Send_Data(MOISTURE_THINGSPEAK_API_KEY, 1, sensor_data_buffer);
 8002cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2101      	movs	r1, #1
 8002d02:	481d      	ldr	r0, [pc, #116]	; (8002d78 <doSensorNode+0x298>)
 8002d04:	f7fe fa46 	bl	8001194 <ESP_Send_Data>
			IWDG_Refresh();
 8002d08:	f000 f8ae 	bl	8002e68 <IWDG_Refresh>
			sprintf(lora_send, "%c%s", 'M', sensor_data_buffer); // merge sendID and data
 8002d0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d10:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002d14:	224d      	movs	r2, #77	; 0x4d
 8002d16:	4912      	ldr	r1, [pc, #72]	; (8002d60 <doSensorNode+0x280>)
 8002d18:	f002 ff4c 	bl	8005bb4 <siprintf>
			LoRa_transmit(&myLoRa, (uint8_t*)lora_send, 6, 1000);
 8002d1c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d24:	2206      	movs	r2, #6
 8002d26:	480f      	ldr	r0, [pc, #60]	; (8002d64 <doSensorNode+0x284>)
 8002d28:	f7ff f804 	bl	8001d34 <LoRa_transmit>
			IWDG_Refresh();
 8002d2c:	f000 f89c 	bl	8002e68 <IWDG_Refresh>
			HAL_Delay(15000);
 8002d30:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002d34:	f000 fa9c 	bl	8003270 <HAL_Delay>
			break;
 8002d38:	bf00      	nop
}
 8002d3a:	bf00      	nop
 8002d3c:	3768      	adds	r7, #104	; 0x68
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	f3af 8000 	nop.w
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	408ff800 	.word	0x408ff800
 8002d50:	20000188 	.word	0x20000188
 8002d54:	2000018c 	.word	0x2000018c
 8002d58:	20000190 	.word	0x20000190
 8002d5c:	08007550 	.word	0x08007550
 8002d60:	08007564 	.word	0x08007564
 8002d64:	200001a0 	.word	0x200001a0
 8002d68:	40140000 	.word	0x40140000
 8002d6c:	41a00000 	.word	0x41a00000
 8002d70:	0800756c 	.word	0x0800756c
 8002d74:	41a0147b 	.word	0x41a0147b
 8002d78:	08007580 	.word	0x08007580

08002d7c <initializeSystem>:


void initializeSystem(){
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0
	SystemClock_HSEConfig();
 8002d82:	f7fe f925 	bl	8000fd0 <SystemClock_HSEConfig>
	MX_USART1_UART_Init();
 8002d86:	f000 f985 	bl	8003094 <MX_USART1_UART_Init>
	TIM2_Init();
 8002d8a:	f7fe f893 	bl	8000eb4 <TIM2_Init>

	// Initialize watchdog to reset the system when encountering code halting loops
	IWDG_Init();
 8002d8e:	f000 f84f 	bl	8002e30 <IWDG_Init>

	// Initialize LORA
	IWDG_Refresh();
 8002d92:	f000 f869 	bl	8002e68 <IWDG_Refresh>
	myLoRa = newLoRa();
 8002d96:	4c23      	ldr	r4, [pc, #140]	; (8002e24 <initializeSystem+0xa8>)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fcfe 	bl	800179c <newLoRa>
 8002da0:	4625      	mov	r5, r4
 8002da2:	463c      	mov	r4, r7
 8002da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002db0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	int loraInitSuccess = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
	loraInitSuccess = LoRa_init(&myLoRa);
 8002db8:	481a      	ldr	r0, [pc, #104]	; (8002e24 <initializeSystem+0xa8>)
 8002dba:	f7ff f87f 	bl	8001ebc <LoRa_init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
	while (!loraInitSuccess){
 8002dc2:	e008      	b.n	8002dd6 <initializeSystem+0x5a>
		loraInitSuccess = LoRa_init(&myLoRa);
 8002dc4:	4817      	ldr	r0, [pc, #92]	; (8002e24 <initializeSystem+0xa8>)
 8002dc6:	f7ff f879 	bl	8001ebc <LoRa_init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_Delay(5000);
 8002dce:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dd2:	f000 fa4d 	bl	8003270 <HAL_Delay>
	while (!loraInitSuccess){
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f3      	beq.n	8002dc4 <initializeSystem+0x48>
	}
	ESP_Init(WIFI_SSID, WIFI_PASSWD);
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <initializeSystem+0xac>)
 8002dde:	4813      	ldr	r0, [pc, #76]	; (8002e2c <initializeSystem+0xb0>)
 8002de0:	f7fe f980 	bl	80010e4 <ESP_Init>


	LoRa_startReceiving(&myLoRa);
 8002de4:	480f      	ldr	r0, [pc, #60]	; (8002e24 <initializeSystem+0xa8>)
 8002de6:	f7fe fffd 	bl	8001de4 <LoRa_startReceiving>


	if (isMaster){
 8002dea:	2301      	movs	r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d114      	bne.n	8002e1a <initializeSystem+0x9e>
		// Setup LCD
//		MX_I2C1_Init();

	}
	else {
		IWDG_Refresh();
 8002df0:	f000 f83a 	bl	8002e68 <IWDG_Refresh>
		switch(sender){
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d00c      	beq.n	8002e14 <initializeSystem+0x98>
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	dc0d      	bgt.n	8002e1a <initializeSystem+0x9e>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <initializeSystem+0x8c>
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d003      	beq.n	8002e0e <initializeSystem+0x92>
			case 2:
				Moisture_Init();
				break;
		}
	}
}
 8002e06:	e008      	b.n	8002e1a <initializeSystem+0x9e>
				GY521_Init();
 8002e08:	f7ff fcc0 	bl	800278c <GY521_Init>
				break;
 8002e0c:	e005      	b.n	8002e1a <initializeSystem+0x9e>
				Vibration_Init();
 8002e0e:	f7ff fd19 	bl	8002844 <Vibration_Init>
				break;
 8002e12:	e002      	b.n	8002e1a <initializeSystem+0x9e>
				Moisture_Init();
 8002e14:	f7ff fcec 	bl	80027f0 <Moisture_Init>
				break;
 8002e18:	bf00      	nop
}
 8002e1a:	bf00      	nop
 8002e1c:	3738      	adds	r7, #56	; 0x38
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdb0      	pop	{r4, r5, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200001a0 	.word	0x200001a0
 8002e28:	08007594 	.word	0x08007594
 8002e2c:	080075a0 	.word	0x080075a0

08002e30 <IWDG_Init>:

/* ------ Helper functions -------*/
void IWDG_Init(void){
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
	IWDG->KR = 0x5555;
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <IWDG_Init+0x34>)
 8002e36:	f245 5255 	movw	r2, #21845	; 0x5555
 8002e3a:	601a      	str	r2, [r3, #0]
	IWDG->PR = 0x07;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <IWDG_Init+0x34>)
 8002e3e:	2207      	movs	r2, #7
 8002e40:	605a      	str	r2, [r3, #4]
	IWDG->RLR = 0xFFFF;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <IWDG_Init+0x34>)
 8002e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e48:	609a      	str	r2, [r3, #8]
	IWDG->KR = 0xAAAA;
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <IWDG_Init+0x34>)
 8002e4c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e50:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0xCCCC;
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <IWDG_Init+0x34>)
 8002e54:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40003000 	.word	0x40003000

08002e68 <IWDG_Refresh>:

void IWDG_Refresh(void){
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	IWDG->KR = 0xAAAA;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <IWDG_Refresh+0x18>)
 8002e6e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40003000 	.word	0x40003000
 8002e84:	00000000 	.word	0x00000000

08002e88 <floatToString>:

void floatToString(float value, char* buffer, int precision) {
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e92:	60b8      	str	r0, [r7, #8]
 8002e94:	6079      	str	r1, [r7, #4]
    // Check if the value is negative
    int isNegative = value < 0;
 8002e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	bf4c      	ite	mi
 8002ea4:	2301      	movmi	r3, #1
 8002ea6:	2300      	movpl	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24

    // Get the absolute value for processing
    float absValue = fabs(value);
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	eef0 7ae7 	vabs.f32	s15, s15
 8002eb4:	edc7 7a08 	vstr	s15, [r7, #32]
    int integerPart = (int)absValue;
 8002eb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec0:	ee17 3a90 	vmov	r3, s15
 8002ec4:	61fb      	str	r3, [r7, #28]
    float fractionalPart = absValue - integerPart;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed8:	edc7 7a06 	vstr	s15, [r7, #24]
    int fractionalPartAsInt = (int)(fractionalPart * pow(10, precision));
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	f7fd fb3b 	bl	8000558 <__aeabi_f2d>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fb24 	bl	8000534 <__aeabi_i2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	ec43 2b11 	vmov	d1, r2, r3
 8002ef4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002f40 <floatToString+0xb8>
 8002ef8:	f003 fb10 	bl	800651c <pow>
 8002efc:	ec53 2b10 	vmov	r2, r3, d0
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd fb80 	bl	8000608 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fd fe2a 	bl	8000b68 <__aeabi_d2iz>
 8002f14:	4603      	mov	r3, r0
 8002f16:	617b      	str	r3, [r7, #20]

    // Print the result to the buffer with the correct sign
    sprintf(buffer, "%s%d.%0*d", isNegative ? "-" : "", integerPart, precision, fractionalPartAsInt);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <floatToString+0x9a>
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <floatToString+0xc0>)
 8002f20:	e000      	b.n	8002f24 <floatToString+0x9c>
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <floatToString+0xc4>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4908      	ldr	r1, [pc, #32]	; (8002f50 <floatToString+0xc8>)
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f002 fe3f 	bl	8005bb4 <siprintf>
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	00000000 	.word	0x00000000
 8002f44:	40240000 	.word	0x40240000
 8002f48:	080075a8 	.word	0x080075a8
 8002f4c:	080075ac 	.word	0x080075ac
 8002f50:	080075b0 	.word	0x080075b0

08002f54 <removeFirstChar>:
		return 1;
	}
	return 0;
}

void removeFirstChar(char* str) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    // Get the length of the string
    int length = strlen(str);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd f93f 	bl	80001e0 <strlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	60bb      	str	r3, [r7, #8]

    // Shift each character one position to the left
    for (int i = 0; i < length; i++) {
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e00b      	b.n	8002f84 <removeFirstChar+0x30>
        str[i] = str[i + 1];
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	440b      	add	r3, r1
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++) {
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbef      	blt.n	8002f6c <removeFirstChar+0x18>
    }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f9a:	e7fe      	b.n	8002f9a <NMI_Handler+0x4>

08002f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <HardFault_Handler+0x4>

08002fa2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <MemManage_Handler+0x4>

08002fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <BusFault_Handler+0x4>

08002fae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <UsageFault_Handler+0x4>

08002fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe2:	f000 f925 	bl	8003230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002ff0:	4803      	ldr	r0, [pc, #12]	; (8003000 <USART1_IRQHandler+0x14>)
 8002ff2:	f7fe fb79 	bl	80016e8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ff6:	4802      	ldr	r0, [pc, #8]	; (8003000 <USART1_IRQHandler+0x14>)
 8002ff8:	f001 ff16 	bl	8004e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200001d0 	.word	0x200001d0

08003004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <_sbrk+0x5c>)
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <_sbrk+0x60>)
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <_sbrk+0x64>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_sbrk+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d207      	bcs.n	8003044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003034:	f002 fdf6 	bl	8005c24 <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	220c      	movs	r2, #12
 800303c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	e009      	b.n	8003058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_sbrk+0x64>)
 8003054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20020000 	.word	0x20020000
 8003064:	00000400 	.word	0x00000400
 8003068:	200001cc 	.word	0x200001cc
 800306c:	20000360 	.word	0x20000360

08003070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SystemInit+0x20>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <SystemInit+0x20>)
 800307c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 800309a:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <MX_USART1_UART_Init+0x44>)
 800309c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ca:	4802      	ldr	r0, [pc, #8]	; (80030d4 <MX_USART1_UART_Init+0x40>)
 80030cc:	f001 fe5e 	bl	8004d8c <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	200001d0 	.word	0x200001d0
 80030d8:	40011000 	.word	0x40011000

080030dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_UART_MspInit+0x94>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d134      	bne.n	8003168 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_UART_MspInit+0x98>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_UART_MspInit+0x98>)
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_UART_MspInit+0x98>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_UART_MspInit+0x98>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_UART_MspInit+0x98>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_UART_MspInit+0x98>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003136:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800313a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003144:	2303      	movs	r3, #3
 8003146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003148:	2307      	movs	r3, #7
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4619      	mov	r1, r3
 8003152:	4809      	ldr	r0, [pc, #36]	; (8003178 <HAL_UART_MspInit+0x9c>)
 8003154:	f000 fa24 	bl	80035a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	2100      	movs	r1, #0
 800315c:	2025      	movs	r0, #37	; 0x25
 800315e:	f000 f957 	bl	8003410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003162:	2025      	movs	r0, #37	; 0x25
 8003164:	f000 f970 	bl	8003448 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40011000 	.word	0x40011000
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000

0800317c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800317c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003182:	490e      	ldr	r1, [pc, #56]	; (80031bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003188:	e002      	b.n	8003190 <LoopCopyDataInit>

0800318a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800318a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800318c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800318e:	3304      	adds	r3, #4

08003190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003194:	d3f9      	bcc.n	800318a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003196:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003198:	4c0b      	ldr	r4, [pc, #44]	; (80031c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800319a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800319c:	e001      	b.n	80031a2 <LoopFillZerobss>

0800319e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800319e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a0:	3204      	adds	r2, #4

080031a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a4:	d3fb      	bcc.n	800319e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031a6:	f7ff ff63 	bl	8003070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031aa:	f002 fd41 	bl	8005c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ae:	f7ff fb73 	bl	8002898 <main>
  bx  lr    
 80031b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80031c0:	08007648 	.word	0x08007648
  ldr r2, =_sbss
 80031c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80031c8:	20000360 	.word	0x20000360

080031cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031cc:	e7fe      	b.n	80031cc <ADC_IRQHandler>
	...

080031d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_InitTick+0x54>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_InitTick+0x58>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f938 	bl	8003464 <HAL_SYSTICK_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00e      	b.n	800321c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b0f      	cmp	r3, #15
 8003202:	d80a      	bhi.n	800321a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003204:	2200      	movs	r2, #0
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f000 f900 	bl	8003410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003210:	4a06      	ldr	r2, [pc, #24]	; (800322c <HAL_InitTick+0x5c>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000004 	.word	0x20000004
 8003228:	2000000c 	.word	0x2000000c
 800322c:	20000008 	.word	0x20000008

08003230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_IncTick+0x20>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x24>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4413      	add	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_IncTick+0x24>)
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000000c 	.word	0x2000000c
 8003254:	20000214 	.word	0x20000214

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000214 	.word	0x20000214

08003270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff ffee 	bl	8003258 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d005      	beq.n	8003296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_Delay+0x44>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003296:	bf00      	nop
 8003298:	f7ff ffde 	bl	8003258 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d8f7      	bhi.n	8003298 <HAL_Delay+0x28>
  {
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c

080032b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <__NVIC_GetPriorityGrouping+0x18>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 0307 	and.w	r3, r3, #7
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db0b      	blt.n	80032fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <__NVIC_EnableIRQ+0x38>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000e100 	.word	0xe000e100

08003310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db0a      	blt.n	800333a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	490c      	ldr	r1, [pc, #48]	; (800335c <__NVIC_SetPriority+0x4c>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	440b      	add	r3, r1
 8003334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003338:	e00a      	b.n	8003350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4908      	ldr	r1, [pc, #32]	; (8003360 <__NVIC_SetPriority+0x50>)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3b04      	subs	r3, #4
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	440b      	add	r3, r1
 800334e:	761a      	strb	r2, [r3, #24]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f1c3 0307 	rsb	r3, r3, #7
 800337e:	2b04      	cmp	r3, #4
 8003380:	bf28      	it	cs
 8003382:	2304      	movcs	r3, #4
 8003384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3304      	adds	r3, #4
 800338a:	2b06      	cmp	r3, #6
 800338c:	d902      	bls.n	8003394 <NVIC_EncodePriority+0x30>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3b03      	subs	r3, #3
 8003392:	e000      	b.n	8003396 <NVIC_EncodePriority+0x32>
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	4313      	orrs	r3, r2
         );
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033dc:	d301      	bcc.n	80033e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033de:	2301      	movs	r3, #1
 80033e0:	e00f      	b.n	8003402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <SysTick_Config+0x40>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ea:	210f      	movs	r1, #15
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	f7ff ff8e 	bl	8003310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <SysTick_Config+0x40>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fa:	4b04      	ldr	r3, [pc, #16]	; (800340c <SysTick_Config+0x40>)
 80033fc:	2207      	movs	r2, #7
 80033fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	e000e010 	.word	0xe000e010

08003410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003422:	f7ff ff49 	bl	80032b8 <__NVIC_GetPriorityGrouping>
 8003426:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f7ff ff99 	bl	8003364 <NVIC_EncodePriority>
 8003432:	4602      	mov	r2, r0
 8003434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff68 	bl	8003310 <__NVIC_SetPriority>
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff3c 	bl	80032d4 <__NVIC_EnableIRQ>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ffad 	bl	80033cc <SysTick_Config>
 8003472:	4603      	mov	r3, r0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800348a:	f7ff fee5 	bl	8003258 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e052      	b.n	8003554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_Abort+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fe:	e013      	b.n	8003528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003500:	f7ff feaa 	bl	8003258 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b05      	cmp	r3, #5
 800350c:	d90c      	bls.n	8003528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e015      	b.n	8003554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e4      	bne.n	8003500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	223f      	movs	r2, #63	; 0x3f
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d004      	beq.n	800357a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e00c      	b.n	8003594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2205      	movs	r2, #5
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e159      	b.n	8003870 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	f040 8148 	bne.w	800386a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d005      	beq.n	80035f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d130      	bne.n	8003654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0201 	and.w	r2, r3, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d017      	beq.n	8003690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d123      	bne.n	80036e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	69b9      	ldr	r1, [r7, #24]
 80036e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0203 	and.w	r2, r3, #3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a2 	beq.w	800386a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b57      	ldr	r3, [pc, #348]	; (8003888 <HAL_GPIO_Init+0x2e8>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a56      	ldr	r2, [pc, #344]	; (8003888 <HAL_GPIO_Init+0x2e8>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b54      	ldr	r3, [pc, #336]	; (8003888 <HAL_GPIO_Init+0x2e8>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003742:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_GPIO_Init+0x2ec>)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a49      	ldr	r2, [pc, #292]	; (8003890 <HAL_GPIO_Init+0x2f0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x202>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a48      	ldr	r2, [pc, #288]	; (8003894 <HAL_GPIO_Init+0x2f4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x1fe>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a47      	ldr	r2, [pc, #284]	; (8003898 <HAL_GPIO_Init+0x2f8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x1fa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a46      	ldr	r2, [pc, #280]	; (800389c <HAL_GPIO_Init+0x2fc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x1f6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a45      	ldr	r2, [pc, #276]	; (80038a0 <HAL_GPIO_Init+0x300>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x1f2>
 800378e:	2304      	movs	r3, #4
 8003790:	e008      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 8003792:	2307      	movs	r3, #7
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 8003796:	2303      	movs	r3, #3
 8003798:	e004      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 800379a:	2302      	movs	r3, #2
 800379c:	e002      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 80037a2:	2300      	movs	r3, #0
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	f002 0203 	and.w	r2, r2, #3
 80037aa:	0092      	lsls	r2, r2, #2
 80037ac:	4093      	lsls	r3, r2
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b4:	4935      	ldr	r1, [pc, #212]	; (800388c <HAL_GPIO_Init+0x2ec>)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	3302      	adds	r3, #2
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <HAL_GPIO_Init+0x304>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037e6:	4a2f      	ldr	r2, [pc, #188]	; (80038a4 <HAL_GPIO_Init+0x304>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_GPIO_Init+0x304>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003810:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_GPIO_Init+0x304>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003816:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <HAL_GPIO_Init+0x304>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800383a:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_GPIO_Init+0x304>)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_GPIO_Init+0x304>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003864:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_GPIO_Init+0x304>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	f67f aea2 	bls.w	80035bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3724      	adds	r7, #36	; 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40013800 	.word	0x40013800
 8003890:	40020000 	.word	0x40020000
 8003894:	40020400 	.word	0x40020400
 8003898:	40020800 	.word	0x40020800
 800389c:	40020c00 	.word	0x40020c00
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40013c00 	.word	0x40013c00

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c4:	e003      	b.n	80038ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	041a      	lsls	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	619a      	str	r2, [r3, #24]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e267      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d075      	beq.n	80039e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d00c      	beq.n	8003920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4b85      	ldr	r3, [pc, #532]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390e:	2b08      	cmp	r3, #8
 8003910:	d112      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b82      	ldr	r3, [pc, #520]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d10b      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05b      	beq.n	80039e4 <HAL_RCC_OscConfig+0x108>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d157      	bne.n	80039e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e242      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d106      	bne.n	8003950 <HAL_RCC_OscConfig+0x74>
 8003942:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x98>
 800395a:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6f      	ldr	r2, [pc, #444]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6c      	ldr	r2, [pc, #432]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003974:	4b69      	ldr	r3, [pc, #420]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a68      	ldr	r2, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7ff fc60 	bl	8003258 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399c:	f7ff fc5c 	bl	8003258 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e207      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xc0>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7ff fc4c 	bl	8003258 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c4:	f7ff fc48 	bl	8003258 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1f3      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0xe8>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	4b4a      	ldr	r3, [pc, #296]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x152>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1c7      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4937      	ldr	r1, [pc, #220]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e03a      	b.n	8003aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7ff fc01 	bl	8003258 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7ff fbfd 	bl	8003258 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e1a8      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4925      	ldr	r1, [pc, #148]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7ff fbe0 	bl	8003258 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7ff fbdc 	bl	8003258 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e187      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d036      	beq.n	8003b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_RCC_OscConfig+0x248>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7ff fbc0 	bl	8003258 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003adc:	f7ff fbbc 	bl	8003258 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e167      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x200>
 8003afa:	e01b      	b.n	8003b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_OscConfig+0x248>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7ff fba9 	bl	8003258 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	e00e      	b.n	8003b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0a:	f7ff fba5 	bl	8003258 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d907      	bls.n	8003b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e150      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	42470000 	.word	0x42470000
 8003b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	4b88      	ldr	r3, [pc, #544]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ea      	bne.n	8003b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8097 	beq.w	8003c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b46:	4b81      	ldr	r3, [pc, #516]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
 8003b62:	4b7a      	ldr	r3, [pc, #488]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b77      	ldr	r3, [pc, #476]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d118      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b74      	ldr	r3, [pc, #464]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a73      	ldr	r2, [pc, #460]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8a:	f7ff fb65 	bl	8003258 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7ff fb61 	bl	8003258 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e10c      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2ea>
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a63      	ldr	r2, [pc, #396]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e01c      	b.n	8003c00 <HAL_RCC_OscConfig+0x324>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x30c>
 8003bce:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a5e      	ldr	r2, [pc, #376]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a5b      	ldr	r2, [pc, #364]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e00b      	b.n	8003c00 <HAL_RCC_OscConfig+0x324>
 8003be8:	4b58      	ldr	r3, [pc, #352]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a57      	ldr	r2, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	4b55      	ldr	r3, [pc, #340]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a54      	ldr	r2, [pc, #336]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	f023 0304 	bic.w	r3, r3, #4
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7ff fb26 	bl	8003258 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7ff fb22 	bl	8003258 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0cb      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ee      	beq.n	8003c10 <HAL_RCC_OscConfig+0x334>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7ff fb10 	bl	8003258 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7ff fb0c 	bl	8003258 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0b5      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	4b3e      	ldr	r3, [pc, #248]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ee      	bne.n	8003c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a1 	beq.w	8003dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7a:	4b34      	ldr	r3, [pc, #208]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d05c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d141      	bne.n	8003d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCC_OscConfig+0x478>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7ff fae0 	bl	8003258 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7ff fadc 	bl	8003258 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e087      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	019b      	lsls	r3, r3, #6
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	491b      	ldr	r1, [pc, #108]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x478>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7ff fab5 	bl	8003258 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7ff fab1 	bl	8003258 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e05c      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x416>
 8003d10:	e054      	b.n	8003dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7ff fa9e 	bl	8003258 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7ff fa9a 	bl	8003258 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e045      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x444>
 8003d3e:	e03d      	b.n	8003dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e038      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40007000 	.word	0x40007000
 8003d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x4ec>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d028      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d121      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d11a      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d111      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0cc      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d90c      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b63      	ldr	r3, [pc, #396]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b8      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e20:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	494d      	ldr	r1, [pc, #308]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d044      	beq.n	8003eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d119      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e067      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4934      	ldr	r1, [pc, #208]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ebc:	f7ff f9cc 	bl	8003258 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7ff f9c8 	bl	8003258 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e04f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d20c      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4916      	ldr	r1, [pc, #88]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	490e      	ldr	r1, [pc, #56]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f52:	f000 f821 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490a      	ldr	r1, [pc, #40]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f92c 	bl	80031d0 <HAL_InitTick>

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023c00 	.word	0x40023c00
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	080075bc 	.word	0x080075bc
 8003f90:	20000004 	.word	0x20000004
 8003f94:	20000008 	.word	0x20000008

08003f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b094      	sub	sp, #80	; 0x50
 8003f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa8:	2300      	movs	r3, #0
 8003faa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb0:	4b79      	ldr	r3, [pc, #484]	; (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d00d      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	f200 80e1 	bhi.w	8004184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x34>
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fca:	e0db      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b73      	ldr	r3, [pc, #460]	; (800419c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fd0:	e0db      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd2:	4b73      	ldr	r3, [pc, #460]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fd6:	e0d8      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe2:	4b6d      	ldr	r3, [pc, #436]	; (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	0159      	lsls	r1, r3, #5
 8004018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401c:	0150      	lsls	r0, r2, #5
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4621      	mov	r1, r4
 8004024:	1a51      	subs	r1, r2, r1
 8004026:	6139      	str	r1, [r7, #16]
 8004028:	4629      	mov	r1, r5
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800403c:	4659      	mov	r1, fp
 800403e:	018b      	lsls	r3, r1, #6
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004046:	4651      	mov	r1, sl
 8004048:	018a      	lsls	r2, r1, #6
 800404a:	4651      	mov	r1, sl
 800404c:	ebb2 0801 	subs.w	r8, r2, r1
 8004050:	4659      	mov	r1, fp
 8004052:	eb63 0901 	sbc.w	r9, r3, r1
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800406a:	4690      	mov	r8, r2
 800406c:	4699      	mov	r9, r3
 800406e:	4623      	mov	r3, r4
 8004070:	eb18 0303 	adds.w	r3, r8, r3
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	462b      	mov	r3, r5
 8004078:	eb49 0303 	adc.w	r3, r9, r3
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800408a:	4629      	mov	r1, r5
 800408c:	024b      	lsls	r3, r1, #9
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004094:	4621      	mov	r1, r4
 8004096:	024a      	lsls	r2, r1, #9
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040a8:	f7fc fd86 	bl	8000bb8 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b4:	e058      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	2200      	movs	r2, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	4611      	mov	r1, r2
 80040c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040c6:	623b      	str	r3, [r7, #32]
 80040c8:	2300      	movs	r3, #0
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	f04f 0000 	mov.w	r0, #0
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	0159      	lsls	r1, r3, #5
 80040de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e2:	0150      	lsls	r0, r2, #5
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4641      	mov	r1, r8
 80040ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ee:	4649      	mov	r1, r9
 80040f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004108:	ebb2 040a 	subs.w	r4, r2, sl
 800410c:	eb63 050b 	sbc.w	r5, r3, fp
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	00eb      	lsls	r3, r5, #3
 800411a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800411e:	00e2      	lsls	r2, r4, #3
 8004120:	4614      	mov	r4, r2
 8004122:	461d      	mov	r5, r3
 8004124:	4643      	mov	r3, r8
 8004126:	18e3      	adds	r3, r4, r3
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	464b      	mov	r3, r9
 800412c:	eb45 0303 	adc.w	r3, r5, r3
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800413e:	4629      	mov	r1, r5
 8004140:	028b      	lsls	r3, r1, #10
 8004142:	4621      	mov	r1, r4
 8004144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004148:	4621      	mov	r1, r4
 800414a:	028a      	lsls	r2, r1, #10
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004152:	2200      	movs	r2, #0
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	61fa      	str	r2, [r7, #28]
 8004158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800415c:	f7fc fd2c 	bl	8000bb8 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4613      	mov	r3, r2
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	3301      	adds	r3, #1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004182:	e002      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetSysClockFreq+0x204>)
 8004186:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800418c:	4618      	mov	r0, r3
 800418e:	3750      	adds	r7, #80	; 0x50
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	007a1200 	.word	0x007a1200

080041a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4903      	ldr	r1, [pc, #12]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	080075cc 	.word	0x080075cc

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041e8:	f7ff ffdc 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0b5b      	lsrs	r3, r3, #13
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	080075cc 	.word	0x080075cc

0800420c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e07b      	b.n	8004316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422e:	d009      	beq.n	8004244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
 8004236:	e005      	b.n	8004244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f85d 	bl	800431e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0104 	and.w	r1, r3, #4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0210 	and.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_SPI_Transmit+0x22>
 8004350:	2302      	movs	r3, #2
 8004352:	e126      	b.n	80045a2 <HAL_SPI_Transmit+0x270>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435c:	f7fe ff7c 	bl	8003258 <HAL_GetTick>
 8004360:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004376:	e10b      	b.n	8004590 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SPI_Transmit+0x52>
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004388:	e102      	b.n	8004590 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2203      	movs	r2, #3
 800438e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d0:	d10f      	bne.n	80043f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d007      	beq.n	8004410 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d14b      	bne.n	80044b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_SPI_Transmit+0xf6>
 8004422:	8afb      	ldrh	r3, [r7, #22]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d13e      	bne.n	80044a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	881a      	ldrh	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	1c9a      	adds	r2, r3, #2
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800444c:	e02b      	b.n	80044a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d112      	bne.n	8004482 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004480:	e011      	b.n	80044a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004482:	f7fe fee9 	bl	8003258 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d803      	bhi.n	800449a <HAL_SPI_Transmit+0x168>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d102      	bne.n	80044a0 <HAL_SPI_Transmit+0x16e>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044a4:	e074      	b.n	8004590 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ce      	bne.n	800444e <HAL_SPI_Transmit+0x11c>
 80044b0:	e04c      	b.n	800454c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_SPI_Transmit+0x18e>
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d140      	bne.n	8004542 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044e6:	e02c      	b.n	8004542 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d113      	bne.n	800451e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	86da      	strh	r2, [r3, #54]	; 0x36
 800451c:	e011      	b.n	8004542 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451e:	f7fe fe9b 	bl	8003258 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d803      	bhi.n	8004536 <HAL_SPI_Transmit+0x204>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d102      	bne.n	800453c <HAL_SPI_Transmit+0x20a>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004540:	e026      	b.n	8004590 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1cd      	bne.n	80044e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fbd9 	bl	8004d08 <SPI_EndRxTxTransaction>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e000      	b.n	8004590 <HAL_SPI_Transmit+0x25e>
  }

error:
 800458e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b088      	sub	sp, #32
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d112      	bne.n	80045ee <HAL_SPI_Receive+0x44>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10e      	bne.n	80045ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f8f1 	bl	80047cc <HAL_SPI_TransmitReceive>
 80045ea:	4603      	mov	r3, r0
 80045ec:	e0ea      	b.n	80047c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_Receive+0x52>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e0e3      	b.n	80047c4 <HAL_SPI_Receive+0x21a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fe fe28 	bl	8003258 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d002      	beq.n	800461c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004616:	2302      	movs	r3, #2
 8004618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800461a:	e0ca      	b.n	80047b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_SPI_Receive+0x7e>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462c:	e0c1      	b.n	80047b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2204      	movs	r2, #4
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004674:	d10f      	bne.n	8004696 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004684:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004694:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d007      	beq.n	80046b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d162      	bne.n	8004782 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046bc:	e02e      	b.n	800471c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d115      	bne.n	80046f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f103 020c 	add.w	r2, r3, #12
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f6:	e011      	b.n	800471c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f8:	f7fe fdae 	bl	8003258 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d803      	bhi.n	8004710 <HAL_SPI_Receive+0x166>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d102      	bne.n	8004716 <HAL_SPI_Receive+0x16c>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	75fb      	strb	r3, [r7, #23]
          goto error;
 800471a:	e04a      	b.n	80047b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1cb      	bne.n	80046be <HAL_SPI_Receive+0x114>
 8004726:	e031      	b.n	800478c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d113      	bne.n	800475e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	b292      	uxth	r2, r2
 8004742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	1c9a      	adds	r2, r3, #2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800475c:	e011      	b.n	8004782 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475e:	f7fe fd7b 	bl	8003258 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d803      	bhi.n	8004776 <HAL_SPI_Receive+0x1cc>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d102      	bne.n	800477c <HAL_SPI_Receive+0x1d2>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004780:	e017      	b.n	80047b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1cd      	bne.n	8004728 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fa53 	bl	8004c3c <SPI_EndRxTransaction>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
 80047ae:	e000      	b.n	80047b2 <HAL_SPI_Receive+0x208>
  }

error :
 80047b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	; 0x30
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047da:	2301      	movs	r3, #1
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_SPI_TransmitReceive+0x26>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e18a      	b.n	8004b08 <HAL_SPI_TransmitReceive+0x33c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047fa:	f7fe fd2d 	bl	8003258 <HAL_GetTick>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004810:	887b      	ldrh	r3, [r7, #2]
 8004812:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004818:	2b01      	cmp	r3, #1
 800481a:	d00f      	beq.n	800483c <HAL_SPI_TransmitReceive+0x70>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d107      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x68>
 800482c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004830:	2b04      	cmp	r3, #4
 8004832:	d003      	beq.n	800483c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004834:	2302      	movs	r3, #2
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800483a:	e15b      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_SPI_TransmitReceive+0x82>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_TransmitReceive+0x82>
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004854:	e14e      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b04      	cmp	r3, #4
 8004860:	d003      	beq.n	800486a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2205      	movs	r2, #5
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	887a      	ldrh	r2, [r7, #2]
 800487a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	887a      	ldrh	r2, [r7, #2]
 8004892:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d007      	beq.n	80048be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c6:	d178      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x10a>
 80048d0:	8b7b      	ldrh	r3, [r7, #26]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d166      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048fa:	e053      	b.n	80049a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b02      	cmp	r3, #2
 8004908:	d11b      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x176>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d016      	beq.n	8004942 <HAL_SPI_TransmitReceive+0x176>
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d113      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	881a      	ldrh	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	1c9a      	adds	r2, r3, #2
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d119      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x1b8>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d014      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	b292      	uxth	r2, r2
 8004966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	1c9a      	adds	r2, r3, #2
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004980:	2301      	movs	r3, #1
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004984:	f7fe fc68 	bl	8003258 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004990:	429a      	cmp	r2, r3
 8004992:	d807      	bhi.n	80049a4 <HAL_SPI_TransmitReceive+0x1d8>
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d003      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049a2:	e0a7      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1a6      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x130>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1a1      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x130>
 80049b8:	e07c      	b.n	8004ab4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x1fc>
 80049c2:	8b7b      	ldrh	r3, [r7, #26]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d16b      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	7812      	ldrb	r2, [r2, #0]
 80049d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ee:	e057      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d11c      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x26c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x26c>
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d114      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d119      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x2ae>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d014      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a76:	2301      	movs	r3, #1
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a7a:	f7fe fbed 	bl	8003258 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_TransmitReceive+0x2c6>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x2cc>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a9e:	e029      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1a2      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x224>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d19d      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f925 	bl	8004d08 <SPI_EndRxTxTransaction>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d006      	beq.n	8004ad2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ad0:	e010      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	e000      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3730      	adds	r7, #48	; 0x30
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1e:	b2db      	uxtb	r3, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b3c:	f7fe fb8c 	bl	8003258 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b4c:	f7fe fb84 	bl	8003258 <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	015b      	lsls	r3, r3, #5
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b62:	e054      	b.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d050      	beq.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b6c:	f7fe fb74 	bl	8003258 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d902      	bls.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d13d      	bne.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9a:	d111      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	d004      	beq.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bae:	d107      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc8:	d10f      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e017      	b.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d19b      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000004 	.word	0x20000004

08004c3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c50:	d111      	bne.n	8004c76 <SPI_EndRxTransaction+0x3a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5a:	d004      	beq.n	8004c66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c64:	d107      	bne.n	8004c76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7e:	d12a      	bne.n	8004cd6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c88:	d012      	beq.n	8004cb0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff49 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02d      	beq.n	8004cfc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e026      	b.n	8004cfe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2101      	movs	r1, #1
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff ff36 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e013      	b.n	8004cfe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2101      	movs	r1, #1
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ff23 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e000      	b.n	8004cfe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <SPI_EndRxTxTransaction+0x7c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <SPI_EndRxTxTransaction+0x80>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0d5b      	lsrs	r3, r3, #21
 8004d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d24:	fb02 f303 	mul.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d32:	d112      	bne.n	8004d5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fef4 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f043 0220 	orr.w	r2, r3, #32
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e00f      	b.n	8004d7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	d0f2      	beq.n	8004d5a <SPI_EndRxTxTransaction+0x52>
 8004d74:	e000      	b.n	8004d78 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d76:	bf00      	nop
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000004 	.word	0x20000004
 8004d88:	165e9f81 	.word	0x165e9f81

08004d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e03f      	b.n	8004e1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fe f992 	bl	80030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fc7b 	bl	80056cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b0ba      	sub	sp, #232	; 0xe8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_UART_IRQHandler+0x66>
 8004e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fb65 	bl	8005556 <UART_Receive_IT>
      return;
 8004e8c:	e256      	b.n	800533c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80de 	beq.w	8005054 <HAL_UART_IRQHandler+0x22c>
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80d1 	beq.w	8005054 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_UART_IRQHandler+0xae>
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_UART_IRQHandler+0xd2>
 8004ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0202 	orr.w	r2, r3, #2
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_UART_IRQHandler+0xf6>
 8004f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f043 0204 	orr.w	r2, r3, #4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d011      	beq.n	8004f4e <HAL_UART_IRQHandler+0x126>
 8004f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f043 0208 	orr.w	r2, r3, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 81ed 	beq.w	8005332 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_UART_IRQHandler+0x14e>
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 faf0 	bl	8005556 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x17a>
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d04f      	beq.n	8005042 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9f8 	bl	8005398 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d141      	bne.n	800503a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3314      	adds	r3, #20
 8004fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3314      	adds	r3, #20
 8004fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1d9      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	2b00      	cmp	r3, #0
 8005008:	d013      	beq.n	8005032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	4a7d      	ldr	r2, [pc, #500]	; (8005204 <HAL_UART_IRQHandler+0x3dc>)
 8005010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe faa0 	bl	800355c <HAL_DMA_Abort_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e00e      	b.n	8005050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f99a 	bl	800536c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e00a      	b.n	8005050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f996 	bl	800536c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e006      	b.n	8005050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f992 	bl	800536c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800504e:	e170      	b.n	8005332 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	bf00      	nop
    return;
 8005052:	e16e      	b.n	8005332 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 814a 	bne.w	80052f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8143 	beq.w	80052f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 813c 	beq.w	80052f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	f040 80b4 	bne.w	8005208 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8140 	beq.w	8005336 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050be:	429a      	cmp	r2, r3
 80050c0:	f080 8139 	bcs.w	8005336 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	f000 8088 	beq.w	80051ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800510a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800511e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1d9      	bne.n	80050da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3314      	adds	r3, #20
 8005146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800514a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800514e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800515c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e1      	bne.n	8005126 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800518c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e3      	bne.n	8005162 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ba:	f023 0310 	bic.w	r3, r3, #16
 80051be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e3      	bne.n	80051a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe f949 	bl	800347c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8c0 	bl	8005380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005200:	e099      	b.n	8005336 <HAL_UART_IRQHandler+0x50e>
 8005202:	bf00      	nop
 8005204:	0800545f 	.word	0x0800545f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005210:	b29b      	uxth	r3, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 808b 	beq.w	800533a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8086 	beq.w	800533a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005252:	647a      	str	r2, [r7, #68]	; 0x44
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e3      	bne.n	800522e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	623b      	str	r3, [r7, #32]
   return(result);
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800528a:	633a      	str	r2, [r7, #48]	; 0x30
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e3      	bne.n	8005266 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052d0:	61fa      	str	r2, [r7, #28]
 80052d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	69b9      	ldr	r1, [r7, #24]
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	617b      	str	r3, [r7, #20]
   return(result);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e3      	bne.n	80052ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f848 	bl	8005380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052f0:	e023      	b.n	800533a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_UART_IRQHandler+0x4ea>
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f8bb 	bl	8005486 <UART_Transmit_IT>
    return;
 8005310:	e014      	b.n	800533c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <HAL_UART_IRQHandler+0x514>
 800531e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f8fb 	bl	8005526 <UART_EndTransmit_IT>
    return;
 8005330:	e004      	b.n	800533c <HAL_UART_IRQHandler+0x514>
    return;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <HAL_UART_IRQHandler+0x514>
      return;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <HAL_UART_IRQHandler+0x514>
      return;
 800533a:	bf00      	nop
  }
}
 800533c:	37e8      	adds	r7, #232	; 0xe8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop

08005344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b095      	sub	sp, #84	; 0x54
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c0:	643a      	str	r2, [r7, #64]	; 0x40
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	2b01      	cmp	r3, #1
 800540e:	d119      	bne.n	8005444 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005430:	61ba      	str	r2, [r7, #24]
 8005432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e5      	bne.n	8005410 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005452:	bf00      	nop
 8005454:	3754      	adds	r7, #84	; 0x54
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff ff77 	bl	800536c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b21      	cmp	r3, #33	; 0x21
 8005498:	d13e      	bne.n	8005518 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	d114      	bne.n	80054ce <UART_Transmit_IT+0x48>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d110      	bne.n	80054ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	1c9a      	adds	r2, r3, #2
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	621a      	str	r2, [r3, #32]
 80054cc:	e008      	b.n	80054e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	1c59      	adds	r1, r3, #1
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6211      	str	r1, [r2, #32]
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4619      	mov	r1, r3
 80054ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10f      	bne.n	8005514 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005502:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005512:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff fefc 	bl	8005344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b08c      	sub	sp, #48	; 0x30
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b22      	cmp	r3, #34	; 0x22
 8005568:	f040 80ab 	bne.w	80056c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005574:	d117      	bne.n	80055a6 <UART_Receive_IT+0x50>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d113      	bne.n	80055a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	b29b      	uxth	r3, r3
 8005590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005594:	b29a      	uxth	r2, r3
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	1c9a      	adds	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
 80055a4:	e026      	b.n	80055f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d007      	beq.n	80055ca <UART_Receive_IT+0x74>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <UART_Receive_IT+0x82>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e008      	b.n	80055ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4619      	mov	r1, r3
 8005602:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005604:	2b00      	cmp	r3, #0
 8005606:	d15a      	bne.n	80056be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0220 	bic.w	r2, r2, #32
 8005616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	2b01      	cmp	r3, #1
 8005646:	d135      	bne.n	80056b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	613b      	str	r3, [r7, #16]
   return(result);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f023 0310 	bic.w	r3, r3, #16
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566e:	623a      	str	r2, [r7, #32]
 8005670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	69f9      	ldr	r1, [r7, #28]
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	61bb      	str	r3, [r7, #24]
   return(result);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b10      	cmp	r3, #16
 800568e:	d10a      	bne.n	80056a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe67 	bl	8005380 <HAL_UARTEx_RxEventCallback>
 80056b2:	e002      	b.n	80056ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fe4f 	bl	8005358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e002      	b.n	80056c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e000      	b.n	80056c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
  }
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3730      	adds	r7, #48	; 0x30
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d0:	b0c0      	sub	sp, #256	; 0x100
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	68d9      	ldr	r1, [r3, #12]
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	ea40 0301 	orr.w	r3, r0, r1
 80056f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	431a      	orrs	r2, r3
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005724:	f021 010c 	bic.w	r1, r1, #12
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005732:	430b      	orrs	r3, r1
 8005734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	6999      	ldr	r1, [r3, #24]
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	ea40 0301 	orr.w	r3, r0, r1
 8005752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b8f      	ldr	r3, [pc, #572]	; (8005998 <UART_SetConfig+0x2cc>)
 800575c:	429a      	cmp	r2, r3
 800575e:	d005      	beq.n	800576c <UART_SetConfig+0xa0>
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b8d      	ldr	r3, [pc, #564]	; (800599c <UART_SetConfig+0x2d0>)
 8005768:	429a      	cmp	r2, r3
 800576a:	d104      	bne.n	8005776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7fe fd3a 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8005770:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005774:	e003      	b.n	800577e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005776:	f7fe fd21 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 800577a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005788:	f040 810c 	bne.w	80059a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800578c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800579a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800579e:	4622      	mov	r2, r4
 80057a0:	462b      	mov	r3, r5
 80057a2:	1891      	adds	r1, r2, r2
 80057a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80057a6:	415b      	adcs	r3, r3
 80057a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057ae:	4621      	mov	r1, r4
 80057b0:	eb12 0801 	adds.w	r8, r2, r1
 80057b4:	4629      	mov	r1, r5
 80057b6:	eb43 0901 	adc.w	r9, r3, r1
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ce:	4690      	mov	r8, r2
 80057d0:	4699      	mov	r9, r3
 80057d2:	4623      	mov	r3, r4
 80057d4:	eb18 0303 	adds.w	r3, r8, r3
 80057d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057dc:	462b      	mov	r3, r5
 80057de:	eb49 0303 	adc.w	r3, r9, r3
 80057e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057fa:	460b      	mov	r3, r1
 80057fc:	18db      	adds	r3, r3, r3
 80057fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005800:	4613      	mov	r3, r2
 8005802:	eb42 0303 	adc.w	r3, r2, r3
 8005806:	657b      	str	r3, [r7, #84]	; 0x54
 8005808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800580c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005810:	f7fb f9d2 	bl	8000bb8 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4b61      	ldr	r3, [pc, #388]	; (80059a0 <UART_SetConfig+0x2d4>)
 800581a:	fba3 2302 	umull	r2, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	011c      	lsls	r4, r3, #4
 8005822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800582c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	64b9      	str	r1, [r7, #72]	; 0x48
 800583c:	415b      	adcs	r3, r3
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005844:	4641      	mov	r1, r8
 8005846:	eb12 0a01 	adds.w	sl, r2, r1
 800584a:	4649      	mov	r1, r9
 800584c:	eb43 0b01 	adc.w	fp, r3, r1
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800585c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005864:	4692      	mov	sl, r2
 8005866:	469b      	mov	fp, r3
 8005868:	4643      	mov	r3, r8
 800586a:	eb1a 0303 	adds.w	r3, sl, r3
 800586e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005872:	464b      	mov	r3, r9
 8005874:	eb4b 0303 	adc.w	r3, fp, r3
 8005878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005888:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800588c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005890:	460b      	mov	r3, r1
 8005892:	18db      	adds	r3, r3, r3
 8005894:	643b      	str	r3, [r7, #64]	; 0x40
 8005896:	4613      	mov	r3, r2
 8005898:	eb42 0303 	adc.w	r3, r2, r3
 800589c:	647b      	str	r3, [r7, #68]	; 0x44
 800589e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058a6:	f7fb f987 	bl	8000bb8 <__aeabi_uldivmod>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	4b3b      	ldr	r3, [pc, #236]	; (80059a0 <UART_SetConfig+0x2d4>)
 80058b2:	fba3 2301 	umull	r2, r3, r3, r1
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2264      	movs	r2, #100	; 0x64
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	1acb      	subs	r3, r1, r3
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058c6:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <UART_SetConfig+0x2d4>)
 80058c8:	fba3 2302 	umull	r2, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058d4:	441c      	add	r4, r3
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	1891      	adds	r1, r2, r2
 80058ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f0:	415b      	adcs	r3, r3
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058f8:	4641      	mov	r1, r8
 80058fa:	1851      	adds	r1, r2, r1
 80058fc:	6339      	str	r1, [r7, #48]	; 0x30
 80058fe:	4649      	mov	r1, r9
 8005900:	414b      	adcs	r3, r1
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005910:	4659      	mov	r1, fp
 8005912:	00cb      	lsls	r3, r1, #3
 8005914:	4651      	mov	r1, sl
 8005916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591a:	4651      	mov	r1, sl
 800591c:	00ca      	lsls	r2, r1, #3
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	4603      	mov	r3, r0
 8005924:	4642      	mov	r2, r8
 8005926:	189b      	adds	r3, r3, r2
 8005928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800592c:	464b      	mov	r3, r9
 800592e:	460a      	mov	r2, r1
 8005930:	eb42 0303 	adc.w	r3, r2, r3
 8005934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800594c:	460b      	mov	r3, r1
 800594e:	18db      	adds	r3, r3, r3
 8005950:	62bb      	str	r3, [r7, #40]	; 0x28
 8005952:	4613      	mov	r3, r2
 8005954:	eb42 0303 	adc.w	r3, r2, r3
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800595e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005962:	f7fb f929 	bl	8000bb8 <__aeabi_uldivmod>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <UART_SetConfig+0x2d4>)
 800596c:	fba3 1302 	umull	r1, r3, r3, r2
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	2164      	movs	r1, #100	; 0x64
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	3332      	adds	r3, #50	; 0x32
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <UART_SetConfig+0x2d4>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	f003 0207 	and.w	r2, r3, #7
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4422      	add	r2, r4
 8005992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005994:	e106      	b.n	8005ba4 <UART_SetConfig+0x4d8>
 8005996:	bf00      	nop
 8005998:	40011000 	.word	0x40011000
 800599c:	40011400 	.word	0x40011400
 80059a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059b6:	4642      	mov	r2, r8
 80059b8:	464b      	mov	r3, r9
 80059ba:	1891      	adds	r1, r2, r2
 80059bc:	6239      	str	r1, [r7, #32]
 80059be:	415b      	adcs	r3, r3
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
 80059c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059c6:	4641      	mov	r1, r8
 80059c8:	1854      	adds	r4, r2, r1
 80059ca:	4649      	mov	r1, r9
 80059cc:	eb43 0501 	adc.w	r5, r3, r1
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	00eb      	lsls	r3, r5, #3
 80059da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059de:	00e2      	lsls	r2, r4, #3
 80059e0:	4614      	mov	r4, r2
 80059e2:	461d      	mov	r5, r3
 80059e4:	4643      	mov	r3, r8
 80059e6:	18e3      	adds	r3, r4, r3
 80059e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059ec:	464b      	mov	r3, r9
 80059ee:	eb45 0303 	adc.w	r3, r5, r3
 80059f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a12:	4629      	mov	r1, r5
 8005a14:	008b      	lsls	r3, r1, #2
 8005a16:	4621      	mov	r1, r4
 8005a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	008a      	lsls	r2, r1, #2
 8005a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a24:	f7fb f8c8 	bl	8000bb8 <__aeabi_uldivmod>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4b60      	ldr	r3, [pc, #384]	; (8005bb0 <UART_SetConfig+0x4e4>)
 8005a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	011c      	lsls	r4, r3, #4
 8005a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	61b9      	str	r1, [r7, #24]
 8005a50:	415b      	adcs	r3, r3
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a58:	4641      	mov	r1, r8
 8005a5a:	1851      	adds	r1, r2, r1
 8005a5c:	6139      	str	r1, [r7, #16]
 8005a5e:	4649      	mov	r1, r9
 8005a60:	414b      	adcs	r3, r1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a70:	4659      	mov	r1, fp
 8005a72:	00cb      	lsls	r3, r1, #3
 8005a74:	4651      	mov	r1, sl
 8005a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	00ca      	lsls	r2, r1, #3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	4642      	mov	r2, r8
 8005a86:	189b      	adds	r3, r3, r2
 8005a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	460a      	mov	r2, r1
 8005a90:	eb42 0303 	adc.w	r3, r2, r3
 8005a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	008b      	lsls	r3, r1, #2
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aba:	4641      	mov	r1, r8
 8005abc:	008a      	lsls	r2, r1, #2
 8005abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ac2:	f7fb f879 	bl	8000bb8 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <UART_SetConfig+0x4e4>)
 8005ace:	fba3 2301 	umull	r2, r3, r3, r1
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2264      	movs	r2, #100	; 0x64
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	1acb      	subs	r3, r1, r3
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	3332      	adds	r3, #50	; 0x32
 8005ae0:	4a33      	ldr	r2, [pc, #204]	; (8005bb0 <UART_SetConfig+0x4e4>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aec:	441c      	add	r4, r3
 8005aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af2:	2200      	movs	r2, #0
 8005af4:	673b      	str	r3, [r7, #112]	; 0x70
 8005af6:	677a      	str	r2, [r7, #116]	; 0x74
 8005af8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	1891      	adds	r1, r2, r2
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	415b      	adcs	r3, r3
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	1851      	adds	r1, r2, r1
 8005b10:	6039      	str	r1, [r7, #0]
 8005b12:	4649      	mov	r1, r9
 8005b14:	414b      	adcs	r3, r1
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b24:	4659      	mov	r1, fp
 8005b26:	00cb      	lsls	r3, r1, #3
 8005b28:	4651      	mov	r1, sl
 8005b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b2e:	4651      	mov	r1, sl
 8005b30:	00ca      	lsls	r2, r1, #3
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	4642      	mov	r2, r8
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3e:	464b      	mov	r3, r9
 8005b40:	460a      	mov	r2, r1
 8005b42:	eb42 0303 	adc.w	r3, r2, r3
 8005b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	663b      	str	r3, [r7, #96]	; 0x60
 8005b52:	667a      	str	r2, [r7, #100]	; 0x64
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b60:	4649      	mov	r1, r9
 8005b62:	008b      	lsls	r3, r1, #2
 8005b64:	4641      	mov	r1, r8
 8005b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	008a      	lsls	r2, r1, #2
 8005b6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b72:	f7fb f821 	bl	8000bb8 <__aeabi_uldivmod>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <UART_SetConfig+0x4e4>)
 8005b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	2164      	movs	r1, #100	; 0x64
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	3332      	adds	r3, #50	; 0x32
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <UART_SetConfig+0x4e4>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	f003 020f 	and.w	r2, r3, #15
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4422      	add	r2, r4
 8005ba2:	609a      	str	r2, [r3, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005baa:	46bd      	mov	sp, r7
 8005bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb0:	51eb851f 	.word	0x51eb851f

08005bb4 <siprintf>:
 8005bb4:	b40e      	push	{r1, r2, r3}
 8005bb6:	b500      	push	{lr}
 8005bb8:	b09c      	sub	sp, #112	; 0x70
 8005bba:	ab1d      	add	r3, sp, #116	; 0x74
 8005bbc:	9002      	str	r0, [sp, #8]
 8005bbe:	9006      	str	r0, [sp, #24]
 8005bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bc4:	4809      	ldr	r0, [pc, #36]	; (8005bec <siprintf+0x38>)
 8005bc6:	9107      	str	r1, [sp, #28]
 8005bc8:	9104      	str	r1, [sp, #16]
 8005bca:	4909      	ldr	r1, [pc, #36]	; (8005bf0 <siprintf+0x3c>)
 8005bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd0:	9105      	str	r1, [sp, #20]
 8005bd2:	6800      	ldr	r0, [r0, #0]
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	a902      	add	r1, sp, #8
 8005bd8:	f000 f9b0 	bl	8005f3c <_svfiprintf_r>
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	b01c      	add	sp, #112	; 0x70
 8005be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005be8:	b003      	add	sp, #12
 8005bea:	4770      	bx	lr
 8005bec:	2000005c 	.word	0x2000005c
 8005bf0:	ffff0208 	.word	0xffff0208

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <strcat>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4602      	mov	r2, r0
 8005c08:	7814      	ldrb	r4, [r2, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	3201      	adds	r2, #1
 8005c0e:	2c00      	cmp	r4, #0
 8005c10:	d1fa      	bne.n	8005c08 <strcat+0x4>
 8005c12:	3b01      	subs	r3, #1
 8005c14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d1f9      	bne.n	8005c14 <strcat+0x10>
 8005c20:	bd10      	pop	{r4, pc}
	...

08005c24 <__errno>:
 8005c24:	4b01      	ldr	r3, [pc, #4]	; (8005c2c <__errno+0x8>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000005c 	.word	0x2000005c

08005c30 <__libc_init_array>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4d0d      	ldr	r5, [pc, #52]	; (8005c68 <__libc_init_array+0x38>)
 8005c34:	4c0d      	ldr	r4, [pc, #52]	; (8005c6c <__libc_init_array+0x3c>)
 8005c36:	1b64      	subs	r4, r4, r5
 8005c38:	10a4      	asrs	r4, r4, #2
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	42a6      	cmp	r6, r4
 8005c3e:	d109      	bne.n	8005c54 <__libc_init_array+0x24>
 8005c40:	4d0b      	ldr	r5, [pc, #44]	; (8005c70 <__libc_init_array+0x40>)
 8005c42:	4c0c      	ldr	r4, [pc, #48]	; (8005c74 <__libc_init_array+0x44>)
 8005c44:	f001 fba4 	bl	8007390 <_init>
 8005c48:	1b64      	subs	r4, r4, r5
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	d105      	bne.n	8005c5e <__libc_init_array+0x2e>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c58:	4798      	blx	r3
 8005c5a:	3601      	adds	r6, #1
 8005c5c:	e7ee      	b.n	8005c3c <__libc_init_array+0xc>
 8005c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c62:	4798      	blx	r3
 8005c64:	3601      	adds	r6, #1
 8005c66:	e7f2      	b.n	8005c4e <__libc_init_array+0x1e>
 8005c68:	08007640 	.word	0x08007640
 8005c6c:	08007640 	.word	0x08007640
 8005c70:	08007640 	.word	0x08007640
 8005c74:	08007644 	.word	0x08007644

08005c78 <__retarget_lock_acquire_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <__retarget_lock_release_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <memcpy>:
 8005c7c:	440a      	add	r2, r1
 8005c7e:	4291      	cmp	r1, r2
 8005c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c84:	d100      	bne.n	8005c88 <memcpy+0xc>
 8005c86:	4770      	bx	lr
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c92:	4291      	cmp	r1, r2
 8005c94:	d1f9      	bne.n	8005c8a <memcpy+0xe>
 8005c96:	bd10      	pop	{r4, pc}

08005c98 <_free_r>:
 8005c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d044      	beq.n	8005d28 <_free_r+0x90>
 8005c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca2:	9001      	str	r0, [sp, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8005caa:	bfb8      	it	lt
 8005cac:	18e4      	addlt	r4, r4, r3
 8005cae:	f000 f8df 	bl	8005e70 <__malloc_lock>
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <_free_r+0x94>)
 8005cb4:	9801      	ldr	r0, [sp, #4]
 8005cb6:	6813      	ldr	r3, [r2, #0]
 8005cb8:	b933      	cbnz	r3, 8005cc8 <_free_r+0x30>
 8005cba:	6063      	str	r3, [r4, #4]
 8005cbc:	6014      	str	r4, [r2, #0]
 8005cbe:	b003      	add	sp, #12
 8005cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cc4:	f000 b8da 	b.w	8005e7c <__malloc_unlock>
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	d908      	bls.n	8005cde <_free_r+0x46>
 8005ccc:	6825      	ldr	r5, [r4, #0]
 8005cce:	1961      	adds	r1, r4, r5
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	bf01      	itttt	eq
 8005cd4:	6819      	ldreq	r1, [r3, #0]
 8005cd6:	685b      	ldreq	r3, [r3, #4]
 8005cd8:	1949      	addeq	r1, r1, r5
 8005cda:	6021      	streq	r1, [r4, #0]
 8005cdc:	e7ed      	b.n	8005cba <_free_r+0x22>
 8005cde:	461a      	mov	r2, r3
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	b10b      	cbz	r3, 8005ce8 <_free_r+0x50>
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	d9fa      	bls.n	8005cde <_free_r+0x46>
 8005ce8:	6811      	ldr	r1, [r2, #0]
 8005cea:	1855      	adds	r5, r2, r1
 8005cec:	42a5      	cmp	r5, r4
 8005cee:	d10b      	bne.n	8005d08 <_free_r+0x70>
 8005cf0:	6824      	ldr	r4, [r4, #0]
 8005cf2:	4421      	add	r1, r4
 8005cf4:	1854      	adds	r4, r2, r1
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	d1e0      	bne.n	8005cbe <_free_r+0x26>
 8005cfc:	681c      	ldr	r4, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	6053      	str	r3, [r2, #4]
 8005d02:	440c      	add	r4, r1
 8005d04:	6014      	str	r4, [r2, #0]
 8005d06:	e7da      	b.n	8005cbe <_free_r+0x26>
 8005d08:	d902      	bls.n	8005d10 <_free_r+0x78>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	6003      	str	r3, [r0, #0]
 8005d0e:	e7d6      	b.n	8005cbe <_free_r+0x26>
 8005d10:	6825      	ldr	r5, [r4, #0]
 8005d12:	1961      	adds	r1, r4, r5
 8005d14:	428b      	cmp	r3, r1
 8005d16:	bf04      	itt	eq
 8005d18:	6819      	ldreq	r1, [r3, #0]
 8005d1a:	685b      	ldreq	r3, [r3, #4]
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	bf04      	itt	eq
 8005d20:	1949      	addeq	r1, r1, r5
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	6054      	str	r4, [r2, #4]
 8005d26:	e7ca      	b.n	8005cbe <_free_r+0x26>
 8005d28:	b003      	add	sp, #12
 8005d2a:	bd30      	pop	{r4, r5, pc}
 8005d2c:	20000358 	.word	0x20000358

08005d30 <sbrk_aligned>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4e0e      	ldr	r6, [pc, #56]	; (8005d6c <sbrk_aligned+0x3c>)
 8005d34:	460c      	mov	r4, r1
 8005d36:	6831      	ldr	r1, [r6, #0]
 8005d38:	4605      	mov	r5, r0
 8005d3a:	b911      	cbnz	r1, 8005d42 <sbrk_aligned+0x12>
 8005d3c:	f000 fba6 	bl	800648c <_sbrk_r>
 8005d40:	6030      	str	r0, [r6, #0]
 8005d42:	4621      	mov	r1, r4
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 fba1 	bl	800648c <_sbrk_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d00a      	beq.n	8005d64 <sbrk_aligned+0x34>
 8005d4e:	1cc4      	adds	r4, r0, #3
 8005d50:	f024 0403 	bic.w	r4, r4, #3
 8005d54:	42a0      	cmp	r0, r4
 8005d56:	d007      	beq.n	8005d68 <sbrk_aligned+0x38>
 8005d58:	1a21      	subs	r1, r4, r0
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 fb96 	bl	800648c <_sbrk_r>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d101      	bne.n	8005d68 <sbrk_aligned+0x38>
 8005d64:	f04f 34ff 	mov.w	r4, #4294967295
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	2000035c 	.word	0x2000035c

08005d70 <_malloc_r>:
 8005d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d74:	1ccd      	adds	r5, r1, #3
 8005d76:	f025 0503 	bic.w	r5, r5, #3
 8005d7a:	3508      	adds	r5, #8
 8005d7c:	2d0c      	cmp	r5, #12
 8005d7e:	bf38      	it	cc
 8005d80:	250c      	movcc	r5, #12
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	4607      	mov	r7, r0
 8005d86:	db01      	blt.n	8005d8c <_malloc_r+0x1c>
 8005d88:	42a9      	cmp	r1, r5
 8005d8a:	d905      	bls.n	8005d98 <_malloc_r+0x28>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	2600      	movs	r6, #0
 8005d92:	4630      	mov	r0, r6
 8005d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e6c <_malloc_r+0xfc>
 8005d9c:	f000 f868 	bl	8005e70 <__malloc_lock>
 8005da0:	f8d8 3000 	ldr.w	r3, [r8]
 8005da4:	461c      	mov	r4, r3
 8005da6:	bb5c      	cbnz	r4, 8005e00 <_malloc_r+0x90>
 8005da8:	4629      	mov	r1, r5
 8005daa:	4638      	mov	r0, r7
 8005dac:	f7ff ffc0 	bl	8005d30 <sbrk_aligned>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	4604      	mov	r4, r0
 8005db4:	d155      	bne.n	8005e62 <_malloc_r+0xf2>
 8005db6:	f8d8 4000 	ldr.w	r4, [r8]
 8005dba:	4626      	mov	r6, r4
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	d145      	bne.n	8005e4c <_malloc_r+0xdc>
 8005dc0:	2c00      	cmp	r4, #0
 8005dc2:	d048      	beq.n	8005e56 <_malloc_r+0xe6>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4638      	mov	r0, r7
 8005dca:	eb04 0903 	add.w	r9, r4, r3
 8005dce:	f000 fb5d 	bl	800648c <_sbrk_r>
 8005dd2:	4581      	cmp	r9, r0
 8005dd4:	d13f      	bne.n	8005e56 <_malloc_r+0xe6>
 8005dd6:	6821      	ldr	r1, [r4, #0]
 8005dd8:	1a6d      	subs	r5, r5, r1
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa7 	bl	8005d30 <sbrk_aligned>
 8005de2:	3001      	adds	r0, #1
 8005de4:	d037      	beq.n	8005e56 <_malloc_r+0xe6>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	442b      	add	r3, r5
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	f8d8 3000 	ldr.w	r3, [r8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d038      	beq.n	8005e66 <_malloc_r+0xf6>
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	42a2      	cmp	r2, r4
 8005df8:	d12b      	bne.n	8005e52 <_malloc_r+0xe2>
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	e00f      	b.n	8005e20 <_malloc_r+0xb0>
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	1b52      	subs	r2, r2, r5
 8005e04:	d41f      	bmi.n	8005e46 <_malloc_r+0xd6>
 8005e06:	2a0b      	cmp	r2, #11
 8005e08:	d917      	bls.n	8005e3a <_malloc_r+0xca>
 8005e0a:	1961      	adds	r1, r4, r5
 8005e0c:	42a3      	cmp	r3, r4
 8005e0e:	6025      	str	r5, [r4, #0]
 8005e10:	bf18      	it	ne
 8005e12:	6059      	strne	r1, [r3, #4]
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	bf08      	it	eq
 8005e18:	f8c8 1000 	streq.w	r1, [r8]
 8005e1c:	5162      	str	r2, [r4, r5]
 8005e1e:	604b      	str	r3, [r1, #4]
 8005e20:	4638      	mov	r0, r7
 8005e22:	f104 060b 	add.w	r6, r4, #11
 8005e26:	f000 f829 	bl	8005e7c <__malloc_unlock>
 8005e2a:	f026 0607 	bic.w	r6, r6, #7
 8005e2e:	1d23      	adds	r3, r4, #4
 8005e30:	1af2      	subs	r2, r6, r3
 8005e32:	d0ae      	beq.n	8005d92 <_malloc_r+0x22>
 8005e34:	1b9b      	subs	r3, r3, r6
 8005e36:	50a3      	str	r3, [r4, r2]
 8005e38:	e7ab      	b.n	8005d92 <_malloc_r+0x22>
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	6862      	ldr	r2, [r4, #4]
 8005e3e:	d1dd      	bne.n	8005dfc <_malloc_r+0x8c>
 8005e40:	f8c8 2000 	str.w	r2, [r8]
 8005e44:	e7ec      	b.n	8005e20 <_malloc_r+0xb0>
 8005e46:	4623      	mov	r3, r4
 8005e48:	6864      	ldr	r4, [r4, #4]
 8005e4a:	e7ac      	b.n	8005da6 <_malloc_r+0x36>
 8005e4c:	4634      	mov	r4, r6
 8005e4e:	6876      	ldr	r6, [r6, #4]
 8005e50:	e7b4      	b.n	8005dbc <_malloc_r+0x4c>
 8005e52:	4613      	mov	r3, r2
 8005e54:	e7cc      	b.n	8005df0 <_malloc_r+0x80>
 8005e56:	230c      	movs	r3, #12
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f000 f80e 	bl	8005e7c <__malloc_unlock>
 8005e60:	e797      	b.n	8005d92 <_malloc_r+0x22>
 8005e62:	6025      	str	r5, [r4, #0]
 8005e64:	e7dc      	b.n	8005e20 <_malloc_r+0xb0>
 8005e66:	605b      	str	r3, [r3, #4]
 8005e68:	deff      	udf	#255	; 0xff
 8005e6a:	bf00      	nop
 8005e6c:	20000358 	.word	0x20000358

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_lock+0x8>)
 8005e72:	f7ff bf01 	b.w	8005c78 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20000354 	.word	0x20000354

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f7ff befc 	b.w	8005c7a <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20000354 	.word	0x20000354

08005e88 <__ssputs_r>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	688e      	ldr	r6, [r1, #8]
 8005e8e:	461f      	mov	r7, r3
 8005e90:	42be      	cmp	r6, r7
 8005e92:	680b      	ldr	r3, [r1, #0]
 8005e94:	4682      	mov	sl, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	4690      	mov	r8, r2
 8005e9a:	d82c      	bhi.n	8005ef6 <__ssputs_r+0x6e>
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ea2:	d026      	beq.n	8005ef2 <__ssputs_r+0x6a>
 8005ea4:	6965      	ldr	r5, [r4, #20]
 8005ea6:	6909      	ldr	r1, [r1, #16]
 8005ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eac:	eba3 0901 	sub.w	r9, r3, r1
 8005eb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eb4:	1c7b      	adds	r3, r7, #1
 8005eb6:	444b      	add	r3, r9
 8005eb8:	106d      	asrs	r5, r5, #1
 8005eba:	429d      	cmp	r5, r3
 8005ebc:	bf38      	it	cc
 8005ebe:	461d      	movcc	r5, r3
 8005ec0:	0553      	lsls	r3, r2, #21
 8005ec2:	d527      	bpl.n	8005f14 <__ssputs_r+0x8c>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	f7ff ff53 	bl	8005d70 <_malloc_r>
 8005eca:	4606      	mov	r6, r0
 8005ecc:	b360      	cbz	r0, 8005f28 <__ssputs_r+0xa0>
 8005ece:	6921      	ldr	r1, [r4, #16]
 8005ed0:	464a      	mov	r2, r9
 8005ed2:	f7ff fed3 	bl	8005c7c <memcpy>
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	6126      	str	r6, [r4, #16]
 8005ee4:	6165      	str	r5, [r4, #20]
 8005ee6:	444e      	add	r6, r9
 8005ee8:	eba5 0509 	sub.w	r5, r5, r9
 8005eec:	6026      	str	r6, [r4, #0]
 8005eee:	60a5      	str	r5, [r4, #8]
 8005ef0:	463e      	mov	r6, r7
 8005ef2:	42be      	cmp	r6, r7
 8005ef4:	d900      	bls.n	8005ef8 <__ssputs_r+0x70>
 8005ef6:	463e      	mov	r6, r7
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	4632      	mov	r2, r6
 8005efc:	4641      	mov	r1, r8
 8005efe:	f000 faab 	bl	8006458 <memmove>
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	1b9b      	subs	r3, r3, r6
 8005f06:	60a3      	str	r3, [r4, #8]
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	4433      	add	r3, r6
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	462a      	mov	r2, r5
 8005f16:	f000 fac9 	bl	80064ac <_realloc_r>
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d1e0      	bne.n	8005ee2 <__ssputs_r+0x5a>
 8005f20:	6921      	ldr	r1, [r4, #16]
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7ff feb8 	bl	8005c98 <_free_r>
 8005f28:	230c      	movs	r3, #12
 8005f2a:	f8ca 3000 	str.w	r3, [sl]
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3a:	e7e9      	b.n	8005f10 <__ssputs_r+0x88>

08005f3c <_svfiprintf_r>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	4698      	mov	r8, r3
 8005f42:	898b      	ldrh	r3, [r1, #12]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	b09d      	sub	sp, #116	; 0x74
 8005f48:	4607      	mov	r7, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	d50e      	bpl.n	8005f6e <_svfiprintf_r+0x32>
 8005f50:	690b      	ldr	r3, [r1, #16]
 8005f52:	b963      	cbnz	r3, 8005f6e <_svfiprintf_r+0x32>
 8005f54:	2140      	movs	r1, #64	; 0x40
 8005f56:	f7ff ff0b 	bl	8005d70 <_malloc_r>
 8005f5a:	6028      	str	r0, [r5, #0]
 8005f5c:	6128      	str	r0, [r5, #16]
 8005f5e:	b920      	cbnz	r0, 8005f6a <_svfiprintf_r+0x2e>
 8005f60:	230c      	movs	r3, #12
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	e0d0      	b.n	800610c <_svfiprintf_r+0x1d0>
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	616b      	str	r3, [r5, #20]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9309      	str	r3, [sp, #36]	; 0x24
 8005f72:	2320      	movs	r3, #32
 8005f74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006124 <_svfiprintf_r+0x1e8>
 8005f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f86:	f04f 0901 	mov.w	r9, #1
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f92:	b10a      	cbz	r2, 8005f98 <_svfiprintf_r+0x5c>
 8005f94:	2a25      	cmp	r2, #37	; 0x25
 8005f96:	d1f9      	bne.n	8005f8c <_svfiprintf_r+0x50>
 8005f98:	ebba 0b04 	subs.w	fp, sl, r4
 8005f9c:	d00b      	beq.n	8005fb6 <_svfiprintf_r+0x7a>
 8005f9e:	465b      	mov	r3, fp
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff ff6f 	bl	8005e88 <__ssputs_r>
 8005faa:	3001      	adds	r0, #1
 8005fac:	f000 80a9 	beq.w	8006102 <_svfiprintf_r+0x1c6>
 8005fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fb2:	445a      	add	r2, fp
 8005fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80a1 	beq.w	8006102 <_svfiprintf_r+0x1c6>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fca:	f10a 0a01 	add.w	sl, sl, #1
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	9307      	str	r3, [sp, #28]
 8005fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2205      	movs	r2, #5
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	4850      	ldr	r0, [pc, #320]	; (8006124 <_svfiprintf_r+0x1e8>)
 8005fe2:	f7fa f905 	bl	80001f0 <memchr>
 8005fe6:	9a04      	ldr	r2, [sp, #16]
 8005fe8:	b9d8      	cbnz	r0, 8006022 <_svfiprintf_r+0xe6>
 8005fea:	06d0      	lsls	r0, r2, #27
 8005fec:	bf44      	itt	mi
 8005fee:	2320      	movmi	r3, #32
 8005ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff4:	0711      	lsls	r1, r2, #28
 8005ff6:	bf44      	itt	mi
 8005ff8:	232b      	movmi	r3, #43	; 0x2b
 8005ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8006002:	2b2a      	cmp	r3, #42	; 0x2a
 8006004:	d015      	beq.n	8006032 <_svfiprintf_r+0xf6>
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	4654      	mov	r4, sl
 800600a:	2000      	movs	r0, #0
 800600c:	f04f 0c0a 	mov.w	ip, #10
 8006010:	4621      	mov	r1, r4
 8006012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006016:	3b30      	subs	r3, #48	; 0x30
 8006018:	2b09      	cmp	r3, #9
 800601a:	d94d      	bls.n	80060b8 <_svfiprintf_r+0x17c>
 800601c:	b1b0      	cbz	r0, 800604c <_svfiprintf_r+0x110>
 800601e:	9207      	str	r2, [sp, #28]
 8006020:	e014      	b.n	800604c <_svfiprintf_r+0x110>
 8006022:	eba0 0308 	sub.w	r3, r0, r8
 8006026:	fa09 f303 	lsl.w	r3, r9, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	46a2      	mov	sl, r4
 8006030:	e7d2      	b.n	8005fd8 <_svfiprintf_r+0x9c>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9103      	str	r1, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfbb      	ittet	lt
 800603e:	425b      	neglt	r3, r3
 8006040:	f042 0202 	orrlt.w	r2, r2, #2
 8006044:	9307      	strge	r3, [sp, #28]
 8006046:	9307      	strlt	r3, [sp, #28]
 8006048:	bfb8      	it	lt
 800604a:	9204      	strlt	r2, [sp, #16]
 800604c:	7823      	ldrb	r3, [r4, #0]
 800604e:	2b2e      	cmp	r3, #46	; 0x2e
 8006050:	d10c      	bne.n	800606c <_svfiprintf_r+0x130>
 8006052:	7863      	ldrb	r3, [r4, #1]
 8006054:	2b2a      	cmp	r3, #42	; 0x2a
 8006056:	d134      	bne.n	80060c2 <_svfiprintf_r+0x186>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9203      	str	r2, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfb8      	it	lt
 8006064:	f04f 33ff 	movlt.w	r3, #4294967295
 8006068:	3402      	adds	r4, #2
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006134 <_svfiprintf_r+0x1f8>
 8006070:	7821      	ldrb	r1, [r4, #0]
 8006072:	2203      	movs	r2, #3
 8006074:	4650      	mov	r0, sl
 8006076:	f7fa f8bb 	bl	80001f0 <memchr>
 800607a:	b138      	cbz	r0, 800608c <_svfiprintf_r+0x150>
 800607c:	9b04      	ldr	r3, [sp, #16]
 800607e:	eba0 000a 	sub.w	r0, r0, sl
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	4082      	lsls	r2, r0
 8006086:	4313      	orrs	r3, r2
 8006088:	3401      	adds	r4, #1
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006090:	4825      	ldr	r0, [pc, #148]	; (8006128 <_svfiprintf_r+0x1ec>)
 8006092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006096:	2206      	movs	r2, #6
 8006098:	f7fa f8aa 	bl	80001f0 <memchr>
 800609c:	2800      	cmp	r0, #0
 800609e:	d038      	beq.n	8006112 <_svfiprintf_r+0x1d6>
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <_svfiprintf_r+0x1f0>)
 80060a2:	bb1b      	cbnz	r3, 80060ec <_svfiprintf_r+0x1b0>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	3307      	adds	r3, #7
 80060a8:	f023 0307 	bic.w	r3, r3, #7
 80060ac:	3308      	adds	r3, #8
 80060ae:	9303      	str	r3, [sp, #12]
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	4433      	add	r3, r6
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	e768      	b.n	8005f8a <_svfiprintf_r+0x4e>
 80060b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80060bc:	460c      	mov	r4, r1
 80060be:	2001      	movs	r0, #1
 80060c0:	e7a6      	b.n	8006010 <_svfiprintf_r+0xd4>
 80060c2:	2300      	movs	r3, #0
 80060c4:	3401      	adds	r4, #1
 80060c6:	9305      	str	r3, [sp, #20]
 80060c8:	4619      	mov	r1, r3
 80060ca:	f04f 0c0a 	mov.w	ip, #10
 80060ce:	4620      	mov	r0, r4
 80060d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d4:	3a30      	subs	r2, #48	; 0x30
 80060d6:	2a09      	cmp	r2, #9
 80060d8:	d903      	bls.n	80060e2 <_svfiprintf_r+0x1a6>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0c6      	beq.n	800606c <_svfiprintf_r+0x130>
 80060de:	9105      	str	r1, [sp, #20]
 80060e0:	e7c4      	b.n	800606c <_svfiprintf_r+0x130>
 80060e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e6:	4604      	mov	r4, r0
 80060e8:	2301      	movs	r3, #1
 80060ea:	e7f0      	b.n	80060ce <_svfiprintf_r+0x192>
 80060ec:	ab03      	add	r3, sp, #12
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	462a      	mov	r2, r5
 80060f2:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <_svfiprintf_r+0x1f4>)
 80060f4:	a904      	add	r1, sp, #16
 80060f6:	4638      	mov	r0, r7
 80060f8:	f3af 8000 	nop.w
 80060fc:	1c42      	adds	r2, r0, #1
 80060fe:	4606      	mov	r6, r0
 8006100:	d1d6      	bne.n	80060b0 <_svfiprintf_r+0x174>
 8006102:	89ab      	ldrh	r3, [r5, #12]
 8006104:	065b      	lsls	r3, r3, #25
 8006106:	f53f af2d 	bmi.w	8005f64 <_svfiprintf_r+0x28>
 800610a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800610c:	b01d      	add	sp, #116	; 0x74
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006112:	ab03      	add	r3, sp, #12
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	462a      	mov	r2, r5
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <_svfiprintf_r+0x1f4>)
 800611a:	a904      	add	r1, sp, #16
 800611c:	4638      	mov	r0, r7
 800611e:	f000 f879 	bl	8006214 <_printf_i>
 8006122:	e7eb      	b.n	80060fc <_svfiprintf_r+0x1c0>
 8006124:	080075d4 	.word	0x080075d4
 8006128:	080075de 	.word	0x080075de
 800612c:	00000000 	.word	0x00000000
 8006130:	08005e89 	.word	0x08005e89
 8006134:	080075da 	.word	0x080075da

08006138 <_printf_common>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	4616      	mov	r6, r2
 800613e:	4699      	mov	r9, r3
 8006140:	688a      	ldr	r2, [r1, #8]
 8006142:	690b      	ldr	r3, [r1, #16]
 8006144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006148:	4293      	cmp	r3, r2
 800614a:	bfb8      	it	lt
 800614c:	4613      	movlt	r3, r2
 800614e:	6033      	str	r3, [r6, #0]
 8006150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006154:	4607      	mov	r7, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b10a      	cbz	r2, 800615e <_printf_common+0x26>
 800615a:	3301      	adds	r3, #1
 800615c:	6033      	str	r3, [r6, #0]
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	0699      	lsls	r1, r3, #26
 8006162:	bf42      	ittt	mi
 8006164:	6833      	ldrmi	r3, [r6, #0]
 8006166:	3302      	addmi	r3, #2
 8006168:	6033      	strmi	r3, [r6, #0]
 800616a:	6825      	ldr	r5, [r4, #0]
 800616c:	f015 0506 	ands.w	r5, r5, #6
 8006170:	d106      	bne.n	8006180 <_printf_common+0x48>
 8006172:	f104 0a19 	add.w	sl, r4, #25
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	6832      	ldr	r2, [r6, #0]
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	42ab      	cmp	r3, r5
 800617e:	dc26      	bgt.n	80061ce <_printf_common+0x96>
 8006180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006184:	1e13      	subs	r3, r2, #0
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	bf18      	it	ne
 800618a:	2301      	movne	r3, #1
 800618c:	0692      	lsls	r2, r2, #26
 800618e:	d42b      	bmi.n	80061e8 <_printf_common+0xb0>
 8006190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006194:	4649      	mov	r1, r9
 8006196:	4638      	mov	r0, r7
 8006198:	47c0      	blx	r8
 800619a:	3001      	adds	r0, #1
 800619c:	d01e      	beq.n	80061dc <_printf_common+0xa4>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	6922      	ldr	r2, [r4, #16]
 80061a2:	f003 0306 	and.w	r3, r3, #6
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	bf02      	ittt	eq
 80061aa:	68e5      	ldreq	r5, [r4, #12]
 80061ac:	6833      	ldreq	r3, [r6, #0]
 80061ae:	1aed      	subeq	r5, r5, r3
 80061b0:	68a3      	ldr	r3, [r4, #8]
 80061b2:	bf0c      	ite	eq
 80061b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b8:	2500      	movne	r5, #0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	bfc4      	itt	gt
 80061be:	1a9b      	subgt	r3, r3, r2
 80061c0:	18ed      	addgt	r5, r5, r3
 80061c2:	2600      	movs	r6, #0
 80061c4:	341a      	adds	r4, #26
 80061c6:	42b5      	cmp	r5, r6
 80061c8:	d11a      	bne.n	8006200 <_printf_common+0xc8>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e008      	b.n	80061e0 <_printf_common+0xa8>
 80061ce:	2301      	movs	r3, #1
 80061d0:	4652      	mov	r2, sl
 80061d2:	4649      	mov	r1, r9
 80061d4:	4638      	mov	r0, r7
 80061d6:	47c0      	blx	r8
 80061d8:	3001      	adds	r0, #1
 80061da:	d103      	bne.n	80061e4 <_printf_common+0xac>
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e4:	3501      	adds	r5, #1
 80061e6:	e7c6      	b.n	8006176 <_printf_common+0x3e>
 80061e8:	18e1      	adds	r1, r4, r3
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	2030      	movs	r0, #48	; 0x30
 80061ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061f2:	4422      	add	r2, r4
 80061f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061fc:	3302      	adds	r3, #2
 80061fe:	e7c7      	b.n	8006190 <_printf_common+0x58>
 8006200:	2301      	movs	r3, #1
 8006202:	4622      	mov	r2, r4
 8006204:	4649      	mov	r1, r9
 8006206:	4638      	mov	r0, r7
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d0e6      	beq.n	80061dc <_printf_common+0xa4>
 800620e:	3601      	adds	r6, #1
 8006210:	e7d9      	b.n	80061c6 <_printf_common+0x8e>
	...

08006214 <_printf_i>:
 8006214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	7e0f      	ldrb	r7, [r1, #24]
 800621a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800621c:	2f78      	cmp	r7, #120	; 0x78
 800621e:	4691      	mov	r9, r2
 8006220:	4680      	mov	r8, r0
 8006222:	460c      	mov	r4, r1
 8006224:	469a      	mov	sl, r3
 8006226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800622a:	d807      	bhi.n	800623c <_printf_i+0x28>
 800622c:	2f62      	cmp	r7, #98	; 0x62
 800622e:	d80a      	bhi.n	8006246 <_printf_i+0x32>
 8006230:	2f00      	cmp	r7, #0
 8006232:	f000 80d4 	beq.w	80063de <_printf_i+0x1ca>
 8006236:	2f58      	cmp	r7, #88	; 0x58
 8006238:	f000 80c0 	beq.w	80063bc <_printf_i+0x1a8>
 800623c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006244:	e03a      	b.n	80062bc <_printf_i+0xa8>
 8006246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800624a:	2b15      	cmp	r3, #21
 800624c:	d8f6      	bhi.n	800623c <_printf_i+0x28>
 800624e:	a101      	add	r1, pc, #4	; (adr r1, 8006254 <_printf_i+0x40>)
 8006250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006254:	080062ad 	.word	0x080062ad
 8006258:	080062c1 	.word	0x080062c1
 800625c:	0800623d 	.word	0x0800623d
 8006260:	0800623d 	.word	0x0800623d
 8006264:	0800623d 	.word	0x0800623d
 8006268:	0800623d 	.word	0x0800623d
 800626c:	080062c1 	.word	0x080062c1
 8006270:	0800623d 	.word	0x0800623d
 8006274:	0800623d 	.word	0x0800623d
 8006278:	0800623d 	.word	0x0800623d
 800627c:	0800623d 	.word	0x0800623d
 8006280:	080063c5 	.word	0x080063c5
 8006284:	080062ed 	.word	0x080062ed
 8006288:	0800637f 	.word	0x0800637f
 800628c:	0800623d 	.word	0x0800623d
 8006290:	0800623d 	.word	0x0800623d
 8006294:	080063e7 	.word	0x080063e7
 8006298:	0800623d 	.word	0x0800623d
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	0800623d 	.word	0x0800623d
 80062a4:	0800623d 	.word	0x0800623d
 80062a8:	08006387 	.word	0x08006387
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	602a      	str	r2, [r5, #0]
 80062b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062bc:	2301      	movs	r3, #1
 80062be:	e09f      	b.n	8006400 <_printf_i+0x1ec>
 80062c0:	6820      	ldr	r0, [r4, #0]
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	0607      	lsls	r7, r0, #24
 80062c6:	f103 0104 	add.w	r1, r3, #4
 80062ca:	6029      	str	r1, [r5, #0]
 80062cc:	d501      	bpl.n	80062d2 <_printf_i+0xbe>
 80062ce:	681e      	ldr	r6, [r3, #0]
 80062d0:	e003      	b.n	80062da <_printf_i+0xc6>
 80062d2:	0646      	lsls	r6, r0, #25
 80062d4:	d5fb      	bpl.n	80062ce <_printf_i+0xba>
 80062d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062da:	2e00      	cmp	r6, #0
 80062dc:	da03      	bge.n	80062e6 <_printf_i+0xd2>
 80062de:	232d      	movs	r3, #45	; 0x2d
 80062e0:	4276      	negs	r6, r6
 80062e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e6:	485a      	ldr	r0, [pc, #360]	; (8006450 <_printf_i+0x23c>)
 80062e8:	230a      	movs	r3, #10
 80062ea:	e012      	b.n	8006312 <_printf_i+0xfe>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	6820      	ldr	r0, [r4, #0]
 80062f0:	1d19      	adds	r1, r3, #4
 80062f2:	6029      	str	r1, [r5, #0]
 80062f4:	0605      	lsls	r5, r0, #24
 80062f6:	d501      	bpl.n	80062fc <_printf_i+0xe8>
 80062f8:	681e      	ldr	r6, [r3, #0]
 80062fa:	e002      	b.n	8006302 <_printf_i+0xee>
 80062fc:	0641      	lsls	r1, r0, #25
 80062fe:	d5fb      	bpl.n	80062f8 <_printf_i+0xe4>
 8006300:	881e      	ldrh	r6, [r3, #0]
 8006302:	4853      	ldr	r0, [pc, #332]	; (8006450 <_printf_i+0x23c>)
 8006304:	2f6f      	cmp	r7, #111	; 0x6f
 8006306:	bf0c      	ite	eq
 8006308:	2308      	moveq	r3, #8
 800630a:	230a      	movne	r3, #10
 800630c:	2100      	movs	r1, #0
 800630e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006312:	6865      	ldr	r5, [r4, #4]
 8006314:	60a5      	str	r5, [r4, #8]
 8006316:	2d00      	cmp	r5, #0
 8006318:	bfa2      	ittt	ge
 800631a:	6821      	ldrge	r1, [r4, #0]
 800631c:	f021 0104 	bicge.w	r1, r1, #4
 8006320:	6021      	strge	r1, [r4, #0]
 8006322:	b90e      	cbnz	r6, 8006328 <_printf_i+0x114>
 8006324:	2d00      	cmp	r5, #0
 8006326:	d04b      	beq.n	80063c0 <_printf_i+0x1ac>
 8006328:	4615      	mov	r5, r2
 800632a:	fbb6 f1f3 	udiv	r1, r6, r3
 800632e:	fb03 6711 	mls	r7, r3, r1, r6
 8006332:	5dc7      	ldrb	r7, [r0, r7]
 8006334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006338:	4637      	mov	r7, r6
 800633a:	42bb      	cmp	r3, r7
 800633c:	460e      	mov	r6, r1
 800633e:	d9f4      	bls.n	800632a <_printf_i+0x116>
 8006340:	2b08      	cmp	r3, #8
 8006342:	d10b      	bne.n	800635c <_printf_i+0x148>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07de      	lsls	r6, r3, #31
 8006348:	d508      	bpl.n	800635c <_printf_i+0x148>
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	6861      	ldr	r1, [r4, #4]
 800634e:	4299      	cmp	r1, r3
 8006350:	bfde      	ittt	le
 8006352:	2330      	movle	r3, #48	; 0x30
 8006354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800635c:	1b52      	subs	r2, r2, r5
 800635e:	6122      	str	r2, [r4, #16]
 8006360:	f8cd a000 	str.w	sl, [sp]
 8006364:	464b      	mov	r3, r9
 8006366:	aa03      	add	r2, sp, #12
 8006368:	4621      	mov	r1, r4
 800636a:	4640      	mov	r0, r8
 800636c:	f7ff fee4 	bl	8006138 <_printf_common>
 8006370:	3001      	adds	r0, #1
 8006372:	d14a      	bne.n	800640a <_printf_i+0x1f6>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	b004      	add	sp, #16
 800637a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	4833      	ldr	r0, [pc, #204]	; (8006454 <_printf_i+0x240>)
 8006388:	2778      	movs	r7, #120	; 0x78
 800638a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	6829      	ldr	r1, [r5, #0]
 8006392:	061f      	lsls	r7, r3, #24
 8006394:	f851 6b04 	ldr.w	r6, [r1], #4
 8006398:	d402      	bmi.n	80063a0 <_printf_i+0x18c>
 800639a:	065f      	lsls	r7, r3, #25
 800639c:	bf48      	it	mi
 800639e:	b2b6      	uxthmi	r6, r6
 80063a0:	07df      	lsls	r7, r3, #31
 80063a2:	bf48      	it	mi
 80063a4:	f043 0320 	orrmi.w	r3, r3, #32
 80063a8:	6029      	str	r1, [r5, #0]
 80063aa:	bf48      	it	mi
 80063ac:	6023      	strmi	r3, [r4, #0]
 80063ae:	b91e      	cbnz	r6, 80063b8 <_printf_i+0x1a4>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	f023 0320 	bic.w	r3, r3, #32
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	2310      	movs	r3, #16
 80063ba:	e7a7      	b.n	800630c <_printf_i+0xf8>
 80063bc:	4824      	ldr	r0, [pc, #144]	; (8006450 <_printf_i+0x23c>)
 80063be:	e7e4      	b.n	800638a <_printf_i+0x176>
 80063c0:	4615      	mov	r5, r2
 80063c2:	e7bd      	b.n	8006340 <_printf_i+0x12c>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	6826      	ldr	r6, [r4, #0]
 80063c8:	6961      	ldr	r1, [r4, #20]
 80063ca:	1d18      	adds	r0, r3, #4
 80063cc:	6028      	str	r0, [r5, #0]
 80063ce:	0635      	lsls	r5, r6, #24
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	d501      	bpl.n	80063d8 <_printf_i+0x1c4>
 80063d4:	6019      	str	r1, [r3, #0]
 80063d6:	e002      	b.n	80063de <_printf_i+0x1ca>
 80063d8:	0670      	lsls	r0, r6, #25
 80063da:	d5fb      	bpl.n	80063d4 <_printf_i+0x1c0>
 80063dc:	8019      	strh	r1, [r3, #0]
 80063de:	2300      	movs	r3, #0
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	4615      	mov	r5, r2
 80063e4:	e7bc      	b.n	8006360 <_printf_i+0x14c>
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	602a      	str	r2, [r5, #0]
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	2100      	movs	r1, #0
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7f9 fefc 	bl	80001f0 <memchr>
 80063f8:	b108      	cbz	r0, 80063fe <_printf_i+0x1ea>
 80063fa:	1b40      	subs	r0, r0, r5
 80063fc:	6060      	str	r0, [r4, #4]
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	2300      	movs	r3, #0
 8006404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006408:	e7aa      	b.n	8006360 <_printf_i+0x14c>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	462a      	mov	r2, r5
 800640e:	4649      	mov	r1, r9
 8006410:	4640      	mov	r0, r8
 8006412:	47d0      	blx	sl
 8006414:	3001      	adds	r0, #1
 8006416:	d0ad      	beq.n	8006374 <_printf_i+0x160>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	079b      	lsls	r3, r3, #30
 800641c:	d413      	bmi.n	8006446 <_printf_i+0x232>
 800641e:	68e0      	ldr	r0, [r4, #12]
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	4298      	cmp	r0, r3
 8006424:	bfb8      	it	lt
 8006426:	4618      	movlt	r0, r3
 8006428:	e7a6      	b.n	8006378 <_printf_i+0x164>
 800642a:	2301      	movs	r3, #1
 800642c:	4632      	mov	r2, r6
 800642e:	4649      	mov	r1, r9
 8006430:	4640      	mov	r0, r8
 8006432:	47d0      	blx	sl
 8006434:	3001      	adds	r0, #1
 8006436:	d09d      	beq.n	8006374 <_printf_i+0x160>
 8006438:	3501      	adds	r5, #1
 800643a:	68e3      	ldr	r3, [r4, #12]
 800643c:	9903      	ldr	r1, [sp, #12]
 800643e:	1a5b      	subs	r3, r3, r1
 8006440:	42ab      	cmp	r3, r5
 8006442:	dcf2      	bgt.n	800642a <_printf_i+0x216>
 8006444:	e7eb      	b.n	800641e <_printf_i+0x20a>
 8006446:	2500      	movs	r5, #0
 8006448:	f104 0619 	add.w	r6, r4, #25
 800644c:	e7f5      	b.n	800643a <_printf_i+0x226>
 800644e:	bf00      	nop
 8006450:	080075e5 	.word	0x080075e5
 8006454:	080075f6 	.word	0x080075f6

08006458 <memmove>:
 8006458:	4288      	cmp	r0, r1
 800645a:	b510      	push	{r4, lr}
 800645c:	eb01 0402 	add.w	r4, r1, r2
 8006460:	d902      	bls.n	8006468 <memmove+0x10>
 8006462:	4284      	cmp	r4, r0
 8006464:	4623      	mov	r3, r4
 8006466:	d807      	bhi.n	8006478 <memmove+0x20>
 8006468:	1e43      	subs	r3, r0, #1
 800646a:	42a1      	cmp	r1, r4
 800646c:	d008      	beq.n	8006480 <memmove+0x28>
 800646e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006476:	e7f8      	b.n	800646a <memmove+0x12>
 8006478:	4402      	add	r2, r0
 800647a:	4601      	mov	r1, r0
 800647c:	428a      	cmp	r2, r1
 800647e:	d100      	bne.n	8006482 <memmove+0x2a>
 8006480:	bd10      	pop	{r4, pc}
 8006482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800648a:	e7f7      	b.n	800647c <memmove+0x24>

0800648c <_sbrk_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d06      	ldr	r5, [pc, #24]	; (80064a8 <_sbrk_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	f7fc fdb4 	bl	8003004 <_sbrk>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_sbrk_r+0x1a>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_sbrk_r+0x1a>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	20000350 	.word	0x20000350

080064ac <_realloc_r>:
 80064ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b0:	4680      	mov	r8, r0
 80064b2:	4614      	mov	r4, r2
 80064b4:	460e      	mov	r6, r1
 80064b6:	b921      	cbnz	r1, 80064c2 <_realloc_r+0x16>
 80064b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	4611      	mov	r1, r2
 80064be:	f7ff bc57 	b.w	8005d70 <_malloc_r>
 80064c2:	b92a      	cbnz	r2, 80064d0 <_realloc_r+0x24>
 80064c4:	f7ff fbe8 	bl	8005c98 <_free_r>
 80064c8:	4625      	mov	r5, r4
 80064ca:	4628      	mov	r0, r5
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	f000 f81b 	bl	800650a <_malloc_usable_size_r>
 80064d4:	4284      	cmp	r4, r0
 80064d6:	4607      	mov	r7, r0
 80064d8:	d802      	bhi.n	80064e0 <_realloc_r+0x34>
 80064da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064de:	d812      	bhi.n	8006506 <_realloc_r+0x5a>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff fc44 	bl	8005d70 <_malloc_r>
 80064e8:	4605      	mov	r5, r0
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d0ed      	beq.n	80064ca <_realloc_r+0x1e>
 80064ee:	42bc      	cmp	r4, r7
 80064f0:	4622      	mov	r2, r4
 80064f2:	4631      	mov	r1, r6
 80064f4:	bf28      	it	cs
 80064f6:	463a      	movcs	r2, r7
 80064f8:	f7ff fbc0 	bl	8005c7c <memcpy>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fbca 	bl	8005c98 <_free_r>
 8006504:	e7e1      	b.n	80064ca <_realloc_r+0x1e>
 8006506:	4635      	mov	r5, r6
 8006508:	e7df      	b.n	80064ca <_realloc_r+0x1e>

0800650a <_malloc_usable_size_r>:
 800650a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650e:	1f18      	subs	r0, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	bfbc      	itt	lt
 8006514:	580b      	ldrlt	r3, [r1, r0]
 8006516:	18c0      	addlt	r0, r0, r3
 8006518:	4770      	bx	lr
	...

0800651c <pow>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	ed2d 8b02 	vpush	{d8}
 8006522:	eeb0 8a40 	vmov.f32	s16, s0
 8006526:	eef0 8a60 	vmov.f32	s17, s1
 800652a:	ec55 4b11 	vmov	r4, r5, d1
 800652e:	f000 f873 	bl	8006618 <__ieee754_pow>
 8006532:	4622      	mov	r2, r4
 8006534:	462b      	mov	r3, r5
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	ec57 6b10 	vmov	r6, r7, d0
 800653e:	f7fa fafd 	bl	8000b3c <__aeabi_dcmpun>
 8006542:	2800      	cmp	r0, #0
 8006544:	d13b      	bne.n	80065be <pow+0xa2>
 8006546:	ec51 0b18 	vmov	r0, r1, d8
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	f7fa fac3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006552:	b1b8      	cbz	r0, 8006584 <pow+0x68>
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	4620      	mov	r0, r4
 800655a:	4629      	mov	r1, r5
 800655c:	f7fa fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006560:	2800      	cmp	r0, #0
 8006562:	d146      	bne.n	80065f2 <pow+0xd6>
 8006564:	ec45 4b10 	vmov	d0, r4, r5
 8006568:	f000 f848 	bl	80065fc <finite>
 800656c:	b338      	cbz	r0, 80065be <pow+0xa2>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7fa fab9 	bl	8000aec <__aeabi_dcmplt>
 800657a:	b300      	cbz	r0, 80065be <pow+0xa2>
 800657c:	f7ff fb52 	bl	8005c24 <__errno>
 8006580:	2322      	movs	r3, #34	; 0x22
 8006582:	e01b      	b.n	80065bc <pow+0xa0>
 8006584:	ec47 6b10 	vmov	d0, r6, r7
 8006588:	f000 f838 	bl	80065fc <finite>
 800658c:	b9e0      	cbnz	r0, 80065c8 <pow+0xac>
 800658e:	eeb0 0a48 	vmov.f32	s0, s16
 8006592:	eef0 0a68 	vmov.f32	s1, s17
 8006596:	f000 f831 	bl	80065fc <finite>
 800659a:	b1a8      	cbz	r0, 80065c8 <pow+0xac>
 800659c:	ec45 4b10 	vmov	d0, r4, r5
 80065a0:	f000 f82c 	bl	80065fc <finite>
 80065a4:	b180      	cbz	r0, 80065c8 <pow+0xac>
 80065a6:	4632      	mov	r2, r6
 80065a8:	463b      	mov	r3, r7
 80065aa:	4630      	mov	r0, r6
 80065ac:	4639      	mov	r1, r7
 80065ae:	f7fa fac5 	bl	8000b3c <__aeabi_dcmpun>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d0e2      	beq.n	800657c <pow+0x60>
 80065b6:	f7ff fb35 	bl	8005c24 <__errno>
 80065ba:	2321      	movs	r3, #33	; 0x21
 80065bc:	6003      	str	r3, [r0, #0]
 80065be:	ecbd 8b02 	vpop	{d8}
 80065c2:	ec47 6b10 	vmov	d0, r6, r7
 80065c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d0f2      	beq.n	80065be <pow+0xa2>
 80065d8:	eeb0 0a48 	vmov.f32	s0, s16
 80065dc:	eef0 0a68 	vmov.f32	s1, s17
 80065e0:	f000 f80c 	bl	80065fc <finite>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d0ea      	beq.n	80065be <pow+0xa2>
 80065e8:	ec45 4b10 	vmov	d0, r4, r5
 80065ec:	f000 f806 	bl	80065fc <finite>
 80065f0:	e7c3      	b.n	800657a <pow+0x5e>
 80065f2:	4f01      	ldr	r7, [pc, #4]	; (80065f8 <pow+0xdc>)
 80065f4:	2600      	movs	r6, #0
 80065f6:	e7e2      	b.n	80065be <pow+0xa2>
 80065f8:	3ff00000 	.word	0x3ff00000

080065fc <finite>:
 80065fc:	b082      	sub	sp, #8
 80065fe:	ed8d 0b00 	vstr	d0, [sp]
 8006602:	9801      	ldr	r0, [sp, #4]
 8006604:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006608:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800660c:	0fc0      	lsrs	r0, r0, #31
 800660e:	b002      	add	sp, #8
 8006610:	4770      	bx	lr
 8006612:	0000      	movs	r0, r0
 8006614:	0000      	movs	r0, r0
	...

08006618 <__ieee754_pow>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	ed2d 8b06 	vpush	{d8-d10}
 8006620:	b089      	sub	sp, #36	; 0x24
 8006622:	ed8d 1b00 	vstr	d1, [sp]
 8006626:	e9dd 2900 	ldrd	r2, r9, [sp]
 800662a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800662e:	ea58 0102 	orrs.w	r1, r8, r2
 8006632:	ec57 6b10 	vmov	r6, r7, d0
 8006636:	d115      	bne.n	8006664 <__ieee754_pow+0x4c>
 8006638:	19b3      	adds	r3, r6, r6
 800663a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800663e:	4152      	adcs	r2, r2
 8006640:	4299      	cmp	r1, r3
 8006642:	4b89      	ldr	r3, [pc, #548]	; (8006868 <__ieee754_pow+0x250>)
 8006644:	4193      	sbcs	r3, r2
 8006646:	f080 84d1 	bcs.w	8006fec <__ieee754_pow+0x9d4>
 800664a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7f9 fe23 	bl	800029c <__adddf3>
 8006656:	ec41 0b10 	vmov	d0, r0, r1
 800665a:	b009      	add	sp, #36	; 0x24
 800665c:	ecbd 8b06 	vpop	{d8-d10}
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	4b81      	ldr	r3, [pc, #516]	; (800686c <__ieee754_pow+0x254>)
 8006666:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800666a:	429c      	cmp	r4, r3
 800666c:	ee10 aa10 	vmov	sl, s0
 8006670:	463d      	mov	r5, r7
 8006672:	dc06      	bgt.n	8006682 <__ieee754_pow+0x6a>
 8006674:	d101      	bne.n	800667a <__ieee754_pow+0x62>
 8006676:	2e00      	cmp	r6, #0
 8006678:	d1e7      	bne.n	800664a <__ieee754_pow+0x32>
 800667a:	4598      	cmp	r8, r3
 800667c:	dc01      	bgt.n	8006682 <__ieee754_pow+0x6a>
 800667e:	d10f      	bne.n	80066a0 <__ieee754_pow+0x88>
 8006680:	b172      	cbz	r2, 80066a0 <__ieee754_pow+0x88>
 8006682:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006686:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800668a:	ea55 050a 	orrs.w	r5, r5, sl
 800668e:	d1dc      	bne.n	800664a <__ieee754_pow+0x32>
 8006690:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006694:	18db      	adds	r3, r3, r3
 8006696:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800669a:	4152      	adcs	r2, r2
 800669c:	429d      	cmp	r5, r3
 800669e:	e7d0      	b.n	8006642 <__ieee754_pow+0x2a>
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	da3b      	bge.n	800671c <__ieee754_pow+0x104>
 80066a4:	4b72      	ldr	r3, [pc, #456]	; (8006870 <__ieee754_pow+0x258>)
 80066a6:	4598      	cmp	r8, r3
 80066a8:	dc51      	bgt.n	800674e <__ieee754_pow+0x136>
 80066aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80066ae:	4598      	cmp	r8, r3
 80066b0:	f340 84ab 	ble.w	800700a <__ieee754_pow+0x9f2>
 80066b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80066bc:	2b14      	cmp	r3, #20
 80066be:	dd0f      	ble.n	80066e0 <__ieee754_pow+0xc8>
 80066c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80066c4:	fa22 f103 	lsr.w	r1, r2, r3
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	4293      	cmp	r3, r2
 80066ce:	f040 849c 	bne.w	800700a <__ieee754_pow+0x9f2>
 80066d2:	f001 0101 	and.w	r1, r1, #1
 80066d6:	f1c1 0302 	rsb	r3, r1, #2
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	b182      	cbz	r2, 8006700 <__ieee754_pow+0xe8>
 80066de:	e05f      	b.n	80067a0 <__ieee754_pow+0x188>
 80066e0:	2a00      	cmp	r2, #0
 80066e2:	d15b      	bne.n	800679c <__ieee754_pow+0x184>
 80066e4:	f1c3 0314 	rsb	r3, r3, #20
 80066e8:	fa48 f103 	asr.w	r1, r8, r3
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	4543      	cmp	r3, r8
 80066f2:	f040 8487 	bne.w	8007004 <__ieee754_pow+0x9ec>
 80066f6:	f001 0101 	and.w	r1, r1, #1
 80066fa:	f1c1 0302 	rsb	r3, r1, #2
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	4b5c      	ldr	r3, [pc, #368]	; (8006874 <__ieee754_pow+0x25c>)
 8006702:	4598      	cmp	r8, r3
 8006704:	d132      	bne.n	800676c <__ieee754_pow+0x154>
 8006706:	f1b9 0f00 	cmp.w	r9, #0
 800670a:	f280 8477 	bge.w	8006ffc <__ieee754_pow+0x9e4>
 800670e:	4959      	ldr	r1, [pc, #356]	; (8006874 <__ieee754_pow+0x25c>)
 8006710:	4632      	mov	r2, r6
 8006712:	463b      	mov	r3, r7
 8006714:	2000      	movs	r0, #0
 8006716:	f7fa f8a1 	bl	800085c <__aeabi_ddiv>
 800671a:	e79c      	b.n	8006656 <__ieee754_pow+0x3e>
 800671c:	2300      	movs	r3, #0
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	2a00      	cmp	r2, #0
 8006722:	d13d      	bne.n	80067a0 <__ieee754_pow+0x188>
 8006724:	4b51      	ldr	r3, [pc, #324]	; (800686c <__ieee754_pow+0x254>)
 8006726:	4598      	cmp	r8, r3
 8006728:	d1ea      	bne.n	8006700 <__ieee754_pow+0xe8>
 800672a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800672e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006732:	ea53 030a 	orrs.w	r3, r3, sl
 8006736:	f000 8459 	beq.w	8006fec <__ieee754_pow+0x9d4>
 800673a:	4b4f      	ldr	r3, [pc, #316]	; (8006878 <__ieee754_pow+0x260>)
 800673c:	429c      	cmp	r4, r3
 800673e:	dd08      	ble.n	8006752 <__ieee754_pow+0x13a>
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	f2c0 8456 	blt.w	8006ff4 <__ieee754_pow+0x9dc>
 8006748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800674c:	e783      	b.n	8006656 <__ieee754_pow+0x3e>
 800674e:	2302      	movs	r3, #2
 8006750:	e7e5      	b.n	800671e <__ieee754_pow+0x106>
 8006752:	f1b9 0f00 	cmp.w	r9, #0
 8006756:	f04f 0000 	mov.w	r0, #0
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	f6bf af7a 	bge.w	8006656 <__ieee754_pow+0x3e>
 8006762:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006766:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800676a:	e774      	b.n	8006656 <__ieee754_pow+0x3e>
 800676c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006770:	d106      	bne.n	8006780 <__ieee754_pow+0x168>
 8006772:	4632      	mov	r2, r6
 8006774:	463b      	mov	r3, r7
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	f7f9 ff45 	bl	8000608 <__aeabi_dmul>
 800677e:	e76a      	b.n	8006656 <__ieee754_pow+0x3e>
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <__ieee754_pow+0x264>)
 8006782:	4599      	cmp	r9, r3
 8006784:	d10c      	bne.n	80067a0 <__ieee754_pow+0x188>
 8006786:	2d00      	cmp	r5, #0
 8006788:	db0a      	blt.n	80067a0 <__ieee754_pow+0x188>
 800678a:	ec47 6b10 	vmov	d0, r6, r7
 800678e:	b009      	add	sp, #36	; 0x24
 8006790:	ecbd 8b06 	vpop	{d8-d10}
 8006794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	f000 bd20 	b.w	80071dc <__ieee754_sqrt>
 800679c:	2300      	movs	r3, #0
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	ec47 6b10 	vmov	d0, r6, r7
 80067a4:	f000 fc62 	bl	800706c <fabs>
 80067a8:	ec51 0b10 	vmov	r0, r1, d0
 80067ac:	f1ba 0f00 	cmp.w	sl, #0
 80067b0:	d129      	bne.n	8006806 <__ieee754_pow+0x1ee>
 80067b2:	b124      	cbz	r4, 80067be <__ieee754_pow+0x1a6>
 80067b4:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <__ieee754_pow+0x25c>)
 80067b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d123      	bne.n	8006806 <__ieee754_pow+0x1ee>
 80067be:	f1b9 0f00 	cmp.w	r9, #0
 80067c2:	da05      	bge.n	80067d0 <__ieee754_pow+0x1b8>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	2000      	movs	r0, #0
 80067ca:	492a      	ldr	r1, [pc, #168]	; (8006874 <__ieee754_pow+0x25c>)
 80067cc:	f7fa f846 	bl	800085c <__aeabi_ddiv>
 80067d0:	2d00      	cmp	r5, #0
 80067d2:	f6bf af40 	bge.w	8006656 <__ieee754_pow+0x3e>
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80067dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80067e0:	431c      	orrs	r4, r3
 80067e2:	d108      	bne.n	80067f6 <__ieee754_pow+0x1de>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4610      	mov	r0, r2
 80067ea:	4619      	mov	r1, r3
 80067ec:	f7f9 fd54 	bl	8000298 <__aeabi_dsub>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	e78f      	b.n	8006716 <__ieee754_pow+0xfe>
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	f47f af2c 	bne.w	8006656 <__ieee754_pow+0x3e>
 80067fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006802:	4619      	mov	r1, r3
 8006804:	e727      	b.n	8006656 <__ieee754_pow+0x3e>
 8006806:	0feb      	lsrs	r3, r5, #31
 8006808:	3b01      	subs	r3, #1
 800680a:	9306      	str	r3, [sp, #24]
 800680c:	9a06      	ldr	r2, [sp, #24]
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	d102      	bne.n	800681a <__ieee754_pow+0x202>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	e7e6      	b.n	80067e8 <__ieee754_pow+0x1d0>
 800681a:	4b19      	ldr	r3, [pc, #100]	; (8006880 <__ieee754_pow+0x268>)
 800681c:	4598      	cmp	r8, r3
 800681e:	f340 80fb 	ble.w	8006a18 <__ieee754_pow+0x400>
 8006822:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006826:	4598      	cmp	r8, r3
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <__ieee754_pow+0x260>)
 800682a:	dd0c      	ble.n	8006846 <__ieee754_pow+0x22e>
 800682c:	429c      	cmp	r4, r3
 800682e:	dc0f      	bgt.n	8006850 <__ieee754_pow+0x238>
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	da0f      	bge.n	8006856 <__ieee754_pow+0x23e>
 8006836:	2000      	movs	r0, #0
 8006838:	b009      	add	sp, #36	; 0x24
 800683a:	ecbd 8b06 	vpop	{d8-d10}
 800683e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006842:	f000 bcc2 	b.w	80071ca <__math_oflow>
 8006846:	429c      	cmp	r4, r3
 8006848:	dbf2      	blt.n	8006830 <__ieee754_pow+0x218>
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <__ieee754_pow+0x25c>)
 800684c:	429c      	cmp	r4, r3
 800684e:	dd19      	ble.n	8006884 <__ieee754_pow+0x26c>
 8006850:	f1b9 0f00 	cmp.w	r9, #0
 8006854:	dcef      	bgt.n	8006836 <__ieee754_pow+0x21e>
 8006856:	2000      	movs	r0, #0
 8006858:	b009      	add	sp, #36	; 0x24
 800685a:	ecbd 8b06 	vpop	{d8-d10}
 800685e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006862:	f000 bca9 	b.w	80071b8 <__math_uflow>
 8006866:	bf00      	nop
 8006868:	fff00000 	.word	0xfff00000
 800686c:	7ff00000 	.word	0x7ff00000
 8006870:	433fffff 	.word	0x433fffff
 8006874:	3ff00000 	.word	0x3ff00000
 8006878:	3fefffff 	.word	0x3fefffff
 800687c:	3fe00000 	.word	0x3fe00000
 8006880:	41e00000 	.word	0x41e00000
 8006884:	4b60      	ldr	r3, [pc, #384]	; (8006a08 <__ieee754_pow+0x3f0>)
 8006886:	2200      	movs	r2, #0
 8006888:	f7f9 fd06 	bl	8000298 <__aeabi_dsub>
 800688c:	a354      	add	r3, pc, #336	; (adr r3, 80069e0 <__ieee754_pow+0x3c8>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	4604      	mov	r4, r0
 8006894:	460d      	mov	r5, r1
 8006896:	f7f9 feb7 	bl	8000608 <__aeabi_dmul>
 800689a:	a353      	add	r3, pc, #332	; (adr r3, 80069e8 <__ieee754_pow+0x3d0>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	4606      	mov	r6, r0
 80068a2:	460f      	mov	r7, r1
 80068a4:	4620      	mov	r0, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7f9 feae 	bl	8000608 <__aeabi_dmul>
 80068ac:	4b57      	ldr	r3, [pc, #348]	; (8006a0c <__ieee754_pow+0x3f4>)
 80068ae:	4682      	mov	sl, r0
 80068b0:	468b      	mov	fp, r1
 80068b2:	2200      	movs	r2, #0
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 fea6 	bl	8000608 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	a14b      	add	r1, pc, #300	; (adr r1, 80069f0 <__ieee754_pow+0x3d8>)
 80068c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c6:	f7f9 fce7 	bl	8000298 <__aeabi_dsub>
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	f7f9 fe9b 	bl	8000608 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	2000      	movs	r0, #0
 80068d8:	494d      	ldr	r1, [pc, #308]	; (8006a10 <__ieee754_pow+0x3f8>)
 80068da:	f7f9 fcdd 	bl	8000298 <__aeabi_dsub>
 80068de:	4622      	mov	r2, r4
 80068e0:	4680      	mov	r8, r0
 80068e2:	4689      	mov	r9, r1
 80068e4:	462b      	mov	r3, r5
 80068e6:	4620      	mov	r0, r4
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7f9 fe8d 	bl	8000608 <__aeabi_dmul>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4640      	mov	r0, r8
 80068f4:	4649      	mov	r1, r9
 80068f6:	f7f9 fe87 	bl	8000608 <__aeabi_dmul>
 80068fa:	a33f      	add	r3, pc, #252	; (adr r3, 80069f8 <__ieee754_pow+0x3e0>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fe82 	bl	8000608 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4650      	mov	r0, sl
 800690a:	4659      	mov	r1, fp
 800690c:	f7f9 fcc4 	bl	8000298 <__aeabi_dsub>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4680      	mov	r8, r0
 8006916:	4689      	mov	r9, r1
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7f9 fcbe 	bl	800029c <__adddf3>
 8006920:	2000      	movs	r0, #0
 8006922:	4632      	mov	r2, r6
 8006924:	463b      	mov	r3, r7
 8006926:	4604      	mov	r4, r0
 8006928:	460d      	mov	r5, r1
 800692a:	f7f9 fcb5 	bl	8000298 <__aeabi_dsub>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 fcaf 	bl	8000298 <__aeabi_dsub>
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	9a06      	ldr	r2, [sp, #24]
 800693e:	3b01      	subs	r3, #1
 8006940:	4313      	orrs	r3, r2
 8006942:	4682      	mov	sl, r0
 8006944:	468b      	mov	fp, r1
 8006946:	f040 81e7 	bne.w	8006d18 <__ieee754_pow+0x700>
 800694a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006a00 <__ieee754_pow+0x3e8>
 800694e:	eeb0 8a47 	vmov.f32	s16, s14
 8006952:	eef0 8a67 	vmov.f32	s17, s15
 8006956:	e9dd 6700 	ldrd	r6, r7, [sp]
 800695a:	2600      	movs	r6, #0
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006964:	f7f9 fc98 	bl	8000298 <__aeabi_dsub>
 8006968:	4622      	mov	r2, r4
 800696a:	462b      	mov	r3, r5
 800696c:	f7f9 fe4c 	bl	8000608 <__aeabi_dmul>
 8006970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006974:	4680      	mov	r8, r0
 8006976:	4689      	mov	r9, r1
 8006978:	4650      	mov	r0, sl
 800697a:	4659      	mov	r1, fp
 800697c:	f7f9 fe44 	bl	8000608 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4640      	mov	r0, r8
 8006986:	4649      	mov	r1, r9
 8006988:	f7f9 fc88 	bl	800029c <__adddf3>
 800698c:	4632      	mov	r2, r6
 800698e:	463b      	mov	r3, r7
 8006990:	4680      	mov	r8, r0
 8006992:	4689      	mov	r9, r1
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fe36 	bl	8000608 <__aeabi_dmul>
 800699c:	460b      	mov	r3, r1
 800699e:	4604      	mov	r4, r0
 80069a0:	460d      	mov	r5, r1
 80069a2:	4602      	mov	r2, r0
 80069a4:	4649      	mov	r1, r9
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7f9 fc78 	bl	800029c <__adddf3>
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <__ieee754_pow+0x3fc>)
 80069ae:	4299      	cmp	r1, r3
 80069b0:	ec45 4b19 	vmov	d9, r4, r5
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	468b      	mov	fp, r1
 80069ba:	f340 82f0 	ble.w	8006f9e <__ieee754_pow+0x986>
 80069be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80069c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80069c6:	4303      	orrs	r3, r0
 80069c8:	f000 81e4 	beq.w	8006d94 <__ieee754_pow+0x77c>
 80069cc:	ec51 0b18 	vmov	r0, r1, d8
 80069d0:	2200      	movs	r2, #0
 80069d2:	2300      	movs	r3, #0
 80069d4:	f7fa f88a 	bl	8000aec <__aeabi_dcmplt>
 80069d8:	3800      	subs	r0, #0
 80069da:	bf18      	it	ne
 80069dc:	2001      	movne	r0, #1
 80069de:	e72b      	b.n	8006838 <__ieee754_pow+0x220>
 80069e0:	60000000 	.word	0x60000000
 80069e4:	3ff71547 	.word	0x3ff71547
 80069e8:	f85ddf44 	.word	0xf85ddf44
 80069ec:	3e54ae0b 	.word	0x3e54ae0b
 80069f0:	55555555 	.word	0x55555555
 80069f4:	3fd55555 	.word	0x3fd55555
 80069f8:	652b82fe 	.word	0x652b82fe
 80069fc:	3ff71547 	.word	0x3ff71547
 8006a00:	00000000 	.word	0x00000000
 8006a04:	bff00000 	.word	0xbff00000
 8006a08:	3ff00000 	.word	0x3ff00000
 8006a0c:	3fd00000 	.word	0x3fd00000
 8006a10:	3fe00000 	.word	0x3fe00000
 8006a14:	408fffff 	.word	0x408fffff
 8006a18:	4bd5      	ldr	r3, [pc, #852]	; (8006d70 <__ieee754_pow+0x758>)
 8006a1a:	402b      	ands	r3, r5
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	b92b      	cbnz	r3, 8006a2c <__ieee754_pow+0x414>
 8006a20:	4bd4      	ldr	r3, [pc, #848]	; (8006d74 <__ieee754_pow+0x75c>)
 8006a22:	f7f9 fdf1 	bl	8000608 <__aeabi_dmul>
 8006a26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	1523      	asrs	r3, r4, #20
 8006a2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a32:	4413      	add	r3, r2
 8006a34:	9305      	str	r3, [sp, #20]
 8006a36:	4bd0      	ldr	r3, [pc, #832]	; (8006d78 <__ieee754_pow+0x760>)
 8006a38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a3c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006a40:	429c      	cmp	r4, r3
 8006a42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a46:	dd08      	ble.n	8006a5a <__ieee754_pow+0x442>
 8006a48:	4bcc      	ldr	r3, [pc, #816]	; (8006d7c <__ieee754_pow+0x764>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	f340 8162 	ble.w	8006d14 <__ieee754_pow+0x6fc>
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	3301      	adds	r3, #1
 8006a54:	9305      	str	r3, [sp, #20]
 8006a56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006a5a:	2400      	movs	r4, #0
 8006a5c:	00e3      	lsls	r3, r4, #3
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	4bc7      	ldr	r3, [pc, #796]	; (8006d80 <__ieee754_pow+0x768>)
 8006a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a66:	ed93 7b00 	vldr	d7, [r3]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	ec53 2b17 	vmov	r2, r3, d7
 8006a70:	eeb0 9a47 	vmov.f32	s18, s14
 8006a74:	eef0 9a67 	vmov.f32	s19, s15
 8006a78:	4682      	mov	sl, r0
 8006a7a:	f7f9 fc0d 	bl	8000298 <__aeabi_dsub>
 8006a7e:	4652      	mov	r2, sl
 8006a80:	4606      	mov	r6, r0
 8006a82:	460f      	mov	r7, r1
 8006a84:	462b      	mov	r3, r5
 8006a86:	ec51 0b19 	vmov	r0, r1, d9
 8006a8a:	f7f9 fc07 	bl	800029c <__adddf3>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	2000      	movs	r0, #0
 8006a94:	49bb      	ldr	r1, [pc, #748]	; (8006d84 <__ieee754_pow+0x76c>)
 8006a96:	f7f9 fee1 	bl	800085c <__aeabi_ddiv>
 8006a9a:	ec41 0b1a 	vmov	d10, r0, r1
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	f7f9 fdaf 	bl	8000608 <__aeabi_dmul>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab0:	9302      	str	r3, [sp, #8]
 8006ab2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ab6:	46ab      	mov	fp, r5
 8006ab8:	106d      	asrs	r5, r5, #1
 8006aba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006abe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006ac2:	ec41 0b18 	vmov	d8, r0, r1
 8006ac6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006aca:	2200      	movs	r2, #0
 8006acc:	4640      	mov	r0, r8
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	f7f9 fd98 	bl	8000608 <__aeabi_dmul>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 fbda 	bl	8000298 <__aeabi_dsub>
 8006ae4:	ec53 2b19 	vmov	r2, r3, d9
 8006ae8:	4606      	mov	r6, r0
 8006aea:	460f      	mov	r7, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fbd2 	bl	8000298 <__aeabi_dsub>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4650      	mov	r0, sl
 8006afa:	4659      	mov	r1, fp
 8006afc:	f7f9 fbcc 	bl	8000298 <__aeabi_dsub>
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	f7f9 fd80 	bl	8000608 <__aeabi_dmul>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fbc2 	bl	8000298 <__aeabi_dsub>
 8006b14:	ec53 2b1a 	vmov	r2, r3, d10
 8006b18:	f7f9 fd76 	bl	8000608 <__aeabi_dmul>
 8006b1c:	ec53 2b18 	vmov	r2, r3, d8
 8006b20:	ec41 0b19 	vmov	d9, r0, r1
 8006b24:	ec51 0b18 	vmov	r0, r1, d8
 8006b28:	f7f9 fd6e 	bl	8000608 <__aeabi_dmul>
 8006b2c:	a37c      	add	r3, pc, #496	; (adr r3, 8006d20 <__ieee754_pow+0x708>)
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	4604      	mov	r4, r0
 8006b34:	460d      	mov	r5, r1
 8006b36:	f7f9 fd67 	bl	8000608 <__aeabi_dmul>
 8006b3a:	a37b      	add	r3, pc, #492	; (adr r3, 8006d28 <__ieee754_pow+0x710>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fbac 	bl	800029c <__adddf3>
 8006b44:	4622      	mov	r2, r4
 8006b46:	462b      	mov	r3, r5
 8006b48:	f7f9 fd5e 	bl	8000608 <__aeabi_dmul>
 8006b4c:	a378      	add	r3, pc, #480	; (adr r3, 8006d30 <__ieee754_pow+0x718>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fba3 	bl	800029c <__adddf3>
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f7f9 fd55 	bl	8000608 <__aeabi_dmul>
 8006b5e:	a376      	add	r3, pc, #472	; (adr r3, 8006d38 <__ieee754_pow+0x720>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fb9a 	bl	800029c <__adddf3>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	f7f9 fd4c 	bl	8000608 <__aeabi_dmul>
 8006b70:	a373      	add	r3, pc, #460	; (adr r3, 8006d40 <__ieee754_pow+0x728>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fb91 	bl	800029c <__adddf3>
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	f7f9 fd43 	bl	8000608 <__aeabi_dmul>
 8006b82:	a371      	add	r3, pc, #452	; (adr r3, 8006d48 <__ieee754_pow+0x730>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fb88 	bl	800029c <__adddf3>
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460f      	mov	r7, r1
 8006b92:	462b      	mov	r3, r5
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fd36 	bl	8000608 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 fd30 	bl	8000608 <__aeabi_dmul>
 8006ba8:	4642      	mov	r2, r8
 8006baa:	4604      	mov	r4, r0
 8006bac:	460d      	mov	r5, r1
 8006bae:	464b      	mov	r3, r9
 8006bb0:	ec51 0b18 	vmov	r0, r1, d8
 8006bb4:	f7f9 fb72 	bl	800029c <__adddf3>
 8006bb8:	ec53 2b19 	vmov	r2, r3, d9
 8006bbc:	f7f9 fd24 	bl	8000608 <__aeabi_dmul>
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	f7f9 fb6a 	bl	800029c <__adddf3>
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4682      	mov	sl, r0
 8006bcc:	468b      	mov	fp, r1
 8006bce:	464b      	mov	r3, r9
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	f7f9 fd18 	bl	8000608 <__aeabi_dmul>
 8006bd8:	4b6b      	ldr	r3, [pc, #428]	; (8006d88 <__ieee754_pow+0x770>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4606      	mov	r6, r0
 8006bde:	460f      	mov	r7, r1
 8006be0:	f7f9 fb5c 	bl	800029c <__adddf3>
 8006be4:	4652      	mov	r2, sl
 8006be6:	465b      	mov	r3, fp
 8006be8:	f7f9 fb58 	bl	800029c <__adddf3>
 8006bec:	2000      	movs	r0, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	f7f9 fd05 	bl	8000608 <__aeabi_dmul>
 8006bfe:	4b62      	ldr	r3, [pc, #392]	; (8006d88 <__ieee754_pow+0x770>)
 8006c00:	4680      	mov	r8, r0
 8006c02:	4689      	mov	r9, r1
 8006c04:	2200      	movs	r2, #0
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 fb45 	bl	8000298 <__aeabi_dsub>
 8006c0e:	4632      	mov	r2, r6
 8006c10:	463b      	mov	r3, r7
 8006c12:	f7f9 fb41 	bl	8000298 <__aeabi_dsub>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	f7f9 fb3b 	bl	8000298 <__aeabi_dsub>
 8006c22:	ec53 2b18 	vmov	r2, r3, d8
 8006c26:	f7f9 fcef 	bl	8000608 <__aeabi_dmul>
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	462b      	mov	r3, r5
 8006c32:	ec51 0b19 	vmov	r0, r1, d9
 8006c36:	f7f9 fce7 	bl	8000608 <__aeabi_dmul>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4630      	mov	r0, r6
 8006c40:	4639      	mov	r1, r7
 8006c42:	f7f9 fb2b 	bl	800029c <__adddf3>
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4649      	mov	r1, r9
 8006c52:	f7f9 fb23 	bl	800029c <__adddf3>
 8006c56:	a33e      	add	r3, pc, #248	; (adr r3, 8006d50 <__ieee754_pow+0x738>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	460d      	mov	r5, r1
 8006c62:	f7f9 fcd1 	bl	8000608 <__aeabi_dmul>
 8006c66:	4642      	mov	r2, r8
 8006c68:	ec41 0b18 	vmov	d8, r0, r1
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 fb11 	bl	8000298 <__aeabi_dsub>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fb0b 	bl	8000298 <__aeabi_dsub>
 8006c82:	a335      	add	r3, pc, #212	; (adr r3, 8006d58 <__ieee754_pow+0x740>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f7f9 fcbe 	bl	8000608 <__aeabi_dmul>
 8006c8c:	a334      	add	r3, pc, #208	; (adr r3, 8006d60 <__ieee754_pow+0x748>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fcb5 	bl	8000608 <__aeabi_dmul>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 faf9 	bl	800029c <__adddf3>
 8006caa:	9a07      	ldr	r2, [sp, #28]
 8006cac:	4b37      	ldr	r3, [pc, #220]	; (8006d8c <__ieee754_pow+0x774>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f7f9 faf2 	bl	800029c <__adddf3>
 8006cb8:	4682      	mov	sl, r0
 8006cba:	9805      	ldr	r0, [sp, #20]
 8006cbc:	468b      	mov	fp, r1
 8006cbe:	f7f9 fc39 	bl	8000534 <__aeabi_i2d>
 8006cc2:	9a07      	ldr	r2, [sp, #28]
 8006cc4:	4b32      	ldr	r3, [pc, #200]	; (8006d90 <__ieee754_pow+0x778>)
 8006cc6:	4413      	add	r3, r2
 8006cc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460f      	mov	r7, r1
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	f7f9 fae0 	bl	800029c <__adddf3>
 8006cdc:	4642      	mov	r2, r8
 8006cde:	464b      	mov	r3, r9
 8006ce0:	f7f9 fadc 	bl	800029c <__adddf3>
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	f7f9 fad8 	bl	800029c <__adddf3>
 8006cec:	2000      	movs	r0, #0
 8006cee:	4632      	mov	r2, r6
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	f7f9 facf 	bl	8000298 <__aeabi_dsub>
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	f7f9 facb 	bl	8000298 <__aeabi_dsub>
 8006d02:	ec53 2b18 	vmov	r2, r3, d8
 8006d06:	f7f9 fac7 	bl	8000298 <__aeabi_dsub>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4650      	mov	r0, sl
 8006d10:	4659      	mov	r1, fp
 8006d12:	e610      	b.n	8006936 <__ieee754_pow+0x31e>
 8006d14:	2401      	movs	r4, #1
 8006d16:	e6a1      	b.n	8006a5c <__ieee754_pow+0x444>
 8006d18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006d68 <__ieee754_pow+0x750>
 8006d1c:	e617      	b.n	800694e <__ieee754_pow+0x336>
 8006d1e:	bf00      	nop
 8006d20:	4a454eef 	.word	0x4a454eef
 8006d24:	3fca7e28 	.word	0x3fca7e28
 8006d28:	93c9db65 	.word	0x93c9db65
 8006d2c:	3fcd864a 	.word	0x3fcd864a
 8006d30:	a91d4101 	.word	0xa91d4101
 8006d34:	3fd17460 	.word	0x3fd17460
 8006d38:	518f264d 	.word	0x518f264d
 8006d3c:	3fd55555 	.word	0x3fd55555
 8006d40:	db6fabff 	.word	0xdb6fabff
 8006d44:	3fdb6db6 	.word	0x3fdb6db6
 8006d48:	33333303 	.word	0x33333303
 8006d4c:	3fe33333 	.word	0x3fe33333
 8006d50:	e0000000 	.word	0xe0000000
 8006d54:	3feec709 	.word	0x3feec709
 8006d58:	dc3a03fd 	.word	0xdc3a03fd
 8006d5c:	3feec709 	.word	0x3feec709
 8006d60:	145b01f5 	.word	0x145b01f5
 8006d64:	be3e2fe0 	.word	0xbe3e2fe0
 8006d68:	00000000 	.word	0x00000000
 8006d6c:	3ff00000 	.word	0x3ff00000
 8006d70:	7ff00000 	.word	0x7ff00000
 8006d74:	43400000 	.word	0x43400000
 8006d78:	0003988e 	.word	0x0003988e
 8006d7c:	000bb679 	.word	0x000bb679
 8006d80:	08007608 	.word	0x08007608
 8006d84:	3ff00000 	.word	0x3ff00000
 8006d88:	40080000 	.word	0x40080000
 8006d8c:	08007628 	.word	0x08007628
 8006d90:	08007618 	.word	0x08007618
 8006d94:	a3b3      	add	r3, pc, #716	; (adr r3, 8007064 <__ieee754_pow+0xa4c>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f7f9 fa7d 	bl	800029c <__adddf3>
 8006da2:	4622      	mov	r2, r4
 8006da4:	ec41 0b1a 	vmov	d10, r0, r1
 8006da8:	462b      	mov	r3, r5
 8006daa:	4630      	mov	r0, r6
 8006dac:	4639      	mov	r1, r7
 8006dae:	f7f9 fa73 	bl	8000298 <__aeabi_dsub>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	ec51 0b1a 	vmov	r0, r1, d10
 8006dba:	f7f9 feb5 	bl	8000b28 <__aeabi_dcmpgt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f47f ae04 	bne.w	80069cc <__ieee754_pow+0x3b4>
 8006dc4:	4aa2      	ldr	r2, [pc, #648]	; (8007050 <__ieee754_pow+0xa38>)
 8006dc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f340 8107 	ble.w	8006fde <__ieee754_pow+0x9c6>
 8006dd0:	151b      	asrs	r3, r3, #20
 8006dd2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006dd6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006dda:	fa4a fa03 	asr.w	sl, sl, r3
 8006dde:	44da      	add	sl, fp
 8006de0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006de4:	489b      	ldr	r0, [pc, #620]	; (8007054 <__ieee754_pow+0xa3c>)
 8006de6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006dea:	4108      	asrs	r0, r1
 8006dec:	ea00 030a 	and.w	r3, r0, sl
 8006df0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006df4:	f1c1 0114 	rsb	r1, r1, #20
 8006df8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006dfc:	fa4a fa01 	asr.w	sl, sl, r1
 8006e00:	f1bb 0f00 	cmp.w	fp, #0
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	bfb8      	it	lt
 8006e0e:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e12:	f7f9 fa41 	bl	8000298 <__aeabi_dsub>
 8006e16:	ec41 0b19 	vmov	d9, r0, r1
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	ec51 0b19 	vmov	r0, r1, d9
 8006e22:	f7f9 fa3b 	bl	800029c <__adddf3>
 8006e26:	a37a      	add	r3, pc, #488	; (adr r3, 8007010 <__ieee754_pow+0x9f8>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	460d      	mov	r5, r1
 8006e32:	f7f9 fbe9 	bl	8000608 <__aeabi_dmul>
 8006e36:	ec53 2b19 	vmov	r2, r3, d9
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 fa29 	bl	8000298 <__aeabi_dsub>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	f7f9 fa23 	bl	8000298 <__aeabi_dsub>
 8006e52:	a371      	add	r3, pc, #452	; (adr r3, 8007018 <__ieee754_pow+0xa00>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fbd6 	bl	8000608 <__aeabi_dmul>
 8006e5c:	a370      	add	r3, pc, #448	; (adr r3, 8007020 <__ieee754_pow+0xa08>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	4680      	mov	r8, r0
 8006e64:	4689      	mov	r9, r1
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fbcd 	bl	8000608 <__aeabi_dmul>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4640      	mov	r0, r8
 8006e74:	4649      	mov	r1, r9
 8006e76:	f7f9 fa11 	bl	800029c <__adddf3>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fa09 	bl	800029c <__adddf3>
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	4680      	mov	r8, r0
 8006e90:	4689      	mov	r9, r1
 8006e92:	f7f9 fa01 	bl	8000298 <__aeabi_dsub>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f7f9 f9fb 	bl	8000298 <__aeabi_dsub>
 8006ea2:	4642      	mov	r2, r8
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	460f      	mov	r7, r1
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	4640      	mov	r0, r8
 8006eac:	4649      	mov	r1, r9
 8006eae:	f7f9 fbab 	bl	8000608 <__aeabi_dmul>
 8006eb2:	a35d      	add	r3, pc, #372	; (adr r3, 8007028 <__ieee754_pow+0xa10>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	f7f9 fba4 	bl	8000608 <__aeabi_dmul>
 8006ec0:	a35b      	add	r3, pc, #364	; (adr r3, 8007030 <__ieee754_pow+0xa18>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 f9e7 	bl	8000298 <__aeabi_dsub>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 fb9b 	bl	8000608 <__aeabi_dmul>
 8006ed2:	a359      	add	r3, pc, #356	; (adr r3, 8007038 <__ieee754_pow+0xa20>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 f9e0 	bl	800029c <__adddf3>
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	f7f9 fb92 	bl	8000608 <__aeabi_dmul>
 8006ee4:	a356      	add	r3, pc, #344	; (adr r3, 8007040 <__ieee754_pow+0xa28>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 f9d5 	bl	8000298 <__aeabi_dsub>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	f7f9 fb89 	bl	8000608 <__aeabi_dmul>
 8006ef6:	a354      	add	r3, pc, #336	; (adr r3, 8007048 <__ieee754_pow+0xa30>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 f9ce 	bl	800029c <__adddf3>
 8006f00:	4622      	mov	r2, r4
 8006f02:	462b      	mov	r3, r5
 8006f04:	f7f9 fb80 	bl	8000608 <__aeabi_dmul>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4649      	mov	r1, r9
 8006f10:	f7f9 f9c2 	bl	8000298 <__aeabi_dsub>
 8006f14:	4604      	mov	r4, r0
 8006f16:	460d      	mov	r5, r1
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fb72 	bl	8000608 <__aeabi_dmul>
 8006f24:	2200      	movs	r2, #0
 8006f26:	ec41 0b19 	vmov	d9, r0, r1
 8006f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7f9 f9b1 	bl	8000298 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	ec51 0b19 	vmov	r0, r1, d9
 8006f3e:	f7f9 fc8d 	bl	800085c <__aeabi_ddiv>
 8006f42:	4632      	mov	r2, r6
 8006f44:	4604      	mov	r4, r0
 8006f46:	460d      	mov	r5, r1
 8006f48:	463b      	mov	r3, r7
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fb5b 	bl	8000608 <__aeabi_dmul>
 8006f52:	4632      	mov	r2, r6
 8006f54:	463b      	mov	r3, r7
 8006f56:	f7f9 f9a1 	bl	800029c <__adddf3>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 f999 	bl	8000298 <__aeabi_dsub>
 8006f66:	4642      	mov	r2, r8
 8006f68:	464b      	mov	r3, r9
 8006f6a:	f7f9 f995 	bl	8000298 <__aeabi_dsub>
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4602      	mov	r2, r0
 8006f72:	4939      	ldr	r1, [pc, #228]	; (8007058 <__ieee754_pow+0xa40>)
 8006f74:	2000      	movs	r0, #0
 8006f76:	f7f9 f98f 	bl	8000298 <__aeabi_dsub>
 8006f7a:	ec41 0b10 	vmov	d0, r0, r1
 8006f7e:	ee10 3a90 	vmov	r3, s1
 8006f82:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8a:	da2b      	bge.n	8006fe4 <__ieee754_pow+0x9cc>
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	f000 f877 	bl	8007080 <scalbn>
 8006f92:	ec51 0b10 	vmov	r0, r1, d0
 8006f96:	ec53 2b18 	vmov	r2, r3, d8
 8006f9a:	f7ff bbee 	b.w	800677a <__ieee754_pow+0x162>
 8006f9e:	4b2f      	ldr	r3, [pc, #188]	; (800705c <__ieee754_pow+0xa44>)
 8006fa0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006fa4:	429e      	cmp	r6, r3
 8006fa6:	f77f af0d 	ble.w	8006dc4 <__ieee754_pow+0x7ac>
 8006faa:	4b2d      	ldr	r3, [pc, #180]	; (8007060 <__ieee754_pow+0xa48>)
 8006fac:	440b      	add	r3, r1
 8006fae:	4303      	orrs	r3, r0
 8006fb0:	d009      	beq.n	8006fc6 <__ieee754_pow+0x9ae>
 8006fb2:	ec51 0b18 	vmov	r0, r1, d8
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f7f9 fd97 	bl	8000aec <__aeabi_dcmplt>
 8006fbe:	3800      	subs	r0, #0
 8006fc0:	bf18      	it	ne
 8006fc2:	2001      	movne	r0, #1
 8006fc4:	e448      	b.n	8006858 <__ieee754_pow+0x240>
 8006fc6:	4622      	mov	r2, r4
 8006fc8:	462b      	mov	r3, r5
 8006fca:	f7f9 f965 	bl	8000298 <__aeabi_dsub>
 8006fce:	4642      	mov	r2, r8
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	f7f9 fd9f 	bl	8000b14 <__aeabi_dcmpge>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f43f aef4 	beq.w	8006dc4 <__ieee754_pow+0x7ac>
 8006fdc:	e7e9      	b.n	8006fb2 <__ieee754_pow+0x99a>
 8006fde:	f04f 0a00 	mov.w	sl, #0
 8006fe2:	e71a      	b.n	8006e1a <__ieee754_pow+0x802>
 8006fe4:	ec51 0b10 	vmov	r0, r1, d0
 8006fe8:	4619      	mov	r1, r3
 8006fea:	e7d4      	b.n	8006f96 <__ieee754_pow+0x97e>
 8006fec:	491a      	ldr	r1, [pc, #104]	; (8007058 <__ieee754_pow+0xa40>)
 8006fee:	2000      	movs	r0, #0
 8006ff0:	f7ff bb31 	b.w	8006656 <__ieee754_pow+0x3e>
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	f7ff bb2d 	b.w	8006656 <__ieee754_pow+0x3e>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7ff bb29 	b.w	8006656 <__ieee754_pow+0x3e>
 8007004:	9204      	str	r2, [sp, #16]
 8007006:	f7ff bb7b 	b.w	8006700 <__ieee754_pow+0xe8>
 800700a:	2300      	movs	r3, #0
 800700c:	f7ff bb65 	b.w	80066da <__ieee754_pow+0xc2>
 8007010:	00000000 	.word	0x00000000
 8007014:	3fe62e43 	.word	0x3fe62e43
 8007018:	fefa39ef 	.word	0xfefa39ef
 800701c:	3fe62e42 	.word	0x3fe62e42
 8007020:	0ca86c39 	.word	0x0ca86c39
 8007024:	be205c61 	.word	0xbe205c61
 8007028:	72bea4d0 	.word	0x72bea4d0
 800702c:	3e663769 	.word	0x3e663769
 8007030:	c5d26bf1 	.word	0xc5d26bf1
 8007034:	3ebbbd41 	.word	0x3ebbbd41
 8007038:	af25de2c 	.word	0xaf25de2c
 800703c:	3f11566a 	.word	0x3f11566a
 8007040:	16bebd93 	.word	0x16bebd93
 8007044:	3f66c16c 	.word	0x3f66c16c
 8007048:	5555553e 	.word	0x5555553e
 800704c:	3fc55555 	.word	0x3fc55555
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	fff00000 	.word	0xfff00000
 8007058:	3ff00000 	.word	0x3ff00000
 800705c:	4090cbff 	.word	0x4090cbff
 8007060:	3f6f3400 	.word	0x3f6f3400
 8007064:	652b82fe 	.word	0x652b82fe
 8007068:	3c971547 	.word	0x3c971547

0800706c <fabs>:
 800706c:	ec51 0b10 	vmov	r0, r1, d0
 8007070:	ee10 2a10 	vmov	r2, s0
 8007074:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007078:	ec43 2b10 	vmov	d0, r2, r3
 800707c:	4770      	bx	lr
	...

08007080 <scalbn>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	ec55 4b10 	vmov	r4, r5, d0
 8007086:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800708a:	4606      	mov	r6, r0
 800708c:	462b      	mov	r3, r5
 800708e:	b999      	cbnz	r1, 80070b8 <scalbn+0x38>
 8007090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007094:	4323      	orrs	r3, r4
 8007096:	d03f      	beq.n	8007118 <scalbn+0x98>
 8007098:	4b35      	ldr	r3, [pc, #212]	; (8007170 <scalbn+0xf0>)
 800709a:	4629      	mov	r1, r5
 800709c:	ee10 0a10 	vmov	r0, s0
 80070a0:	2200      	movs	r2, #0
 80070a2:	f7f9 fab1 	bl	8000608 <__aeabi_dmul>
 80070a6:	4b33      	ldr	r3, [pc, #204]	; (8007174 <scalbn+0xf4>)
 80070a8:	429e      	cmp	r6, r3
 80070aa:	4604      	mov	r4, r0
 80070ac:	460d      	mov	r5, r1
 80070ae:	da10      	bge.n	80070d2 <scalbn+0x52>
 80070b0:	a327      	add	r3, pc, #156	; (adr r3, 8007150 <scalbn+0xd0>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	e01f      	b.n	80070f8 <scalbn+0x78>
 80070b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80070bc:	4291      	cmp	r1, r2
 80070be:	d10c      	bne.n	80070da <scalbn+0x5a>
 80070c0:	ee10 2a10 	vmov	r2, s0
 80070c4:	4620      	mov	r0, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	f7f9 f8e8 	bl	800029c <__adddf3>
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	e022      	b.n	8007118 <scalbn+0x98>
 80070d2:	460b      	mov	r3, r1
 80070d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80070d8:	3936      	subs	r1, #54	; 0x36
 80070da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80070de:	4296      	cmp	r6, r2
 80070e0:	dd0d      	ble.n	80070fe <scalbn+0x7e>
 80070e2:	2d00      	cmp	r5, #0
 80070e4:	a11c      	add	r1, pc, #112	; (adr r1, 8007158 <scalbn+0xd8>)
 80070e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ea:	da02      	bge.n	80070f2 <scalbn+0x72>
 80070ec:	a11c      	add	r1, pc, #112	; (adr r1, 8007160 <scalbn+0xe0>)
 80070ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f2:	a319      	add	r3, pc, #100	; (adr r3, 8007158 <scalbn+0xd8>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 fa86 	bl	8000608 <__aeabi_dmul>
 80070fc:	e7e6      	b.n	80070cc <scalbn+0x4c>
 80070fe:	1872      	adds	r2, r6, r1
 8007100:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007104:	428a      	cmp	r2, r1
 8007106:	dcec      	bgt.n	80070e2 <scalbn+0x62>
 8007108:	2a00      	cmp	r2, #0
 800710a:	dd08      	ble.n	800711e <scalbn+0x9e>
 800710c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007110:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007114:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007118:	ec45 4b10 	vmov	d0, r4, r5
 800711c:	bd70      	pop	{r4, r5, r6, pc}
 800711e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007122:	da08      	bge.n	8007136 <scalbn+0xb6>
 8007124:	2d00      	cmp	r5, #0
 8007126:	a10a      	add	r1, pc, #40	; (adr r1, 8007150 <scalbn+0xd0>)
 8007128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800712c:	dac0      	bge.n	80070b0 <scalbn+0x30>
 800712e:	a10e      	add	r1, pc, #56	; (adr r1, 8007168 <scalbn+0xe8>)
 8007130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007134:	e7bc      	b.n	80070b0 <scalbn+0x30>
 8007136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800713a:	3236      	adds	r2, #54	; 0x36
 800713c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007140:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007144:	4620      	mov	r0, r4
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <scalbn+0xf8>)
 8007148:	2200      	movs	r2, #0
 800714a:	e7d5      	b.n	80070f8 <scalbn+0x78>
 800714c:	f3af 8000 	nop.w
 8007150:	c2f8f359 	.word	0xc2f8f359
 8007154:	01a56e1f 	.word	0x01a56e1f
 8007158:	8800759c 	.word	0x8800759c
 800715c:	7e37e43c 	.word	0x7e37e43c
 8007160:	8800759c 	.word	0x8800759c
 8007164:	fe37e43c 	.word	0xfe37e43c
 8007168:	c2f8f359 	.word	0xc2f8f359
 800716c:	81a56e1f 	.word	0x81a56e1f
 8007170:	43500000 	.word	0x43500000
 8007174:	ffff3cb0 	.word	0xffff3cb0
 8007178:	3c900000 	.word	0x3c900000

0800717c <with_errno>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	4616      	mov	r6, r2
 8007184:	f7fe fd4e 	bl	8005c24 <__errno>
 8007188:	4629      	mov	r1, r5
 800718a:	6006      	str	r6, [r0, #0]
 800718c:	4620      	mov	r0, r4
 800718e:	bd70      	pop	{r4, r5, r6, pc}

08007190 <xflow>:
 8007190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007192:	4614      	mov	r4, r2
 8007194:	461d      	mov	r5, r3
 8007196:	b108      	cbz	r0, 800719c <xflow+0xc>
 8007198:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800719c:	e9cd 2300 	strd	r2, r3, [sp]
 80071a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071a4:	4620      	mov	r0, r4
 80071a6:	4629      	mov	r1, r5
 80071a8:	f7f9 fa2e 	bl	8000608 <__aeabi_dmul>
 80071ac:	2222      	movs	r2, #34	; 0x22
 80071ae:	b003      	add	sp, #12
 80071b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071b4:	f7ff bfe2 	b.w	800717c <with_errno>

080071b8 <__math_uflow>:
 80071b8:	b508      	push	{r3, lr}
 80071ba:	2200      	movs	r2, #0
 80071bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071c0:	f7ff ffe6 	bl	8007190 <xflow>
 80071c4:	ec41 0b10 	vmov	d0, r0, r1
 80071c8:	bd08      	pop	{r3, pc}

080071ca <__math_oflow>:
 80071ca:	b508      	push	{r3, lr}
 80071cc:	2200      	movs	r2, #0
 80071ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80071d2:	f7ff ffdd 	bl	8007190 <xflow>
 80071d6:	ec41 0b10 	vmov	d0, r0, r1
 80071da:	bd08      	pop	{r3, pc}

080071dc <__ieee754_sqrt>:
 80071dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e0:	ec55 4b10 	vmov	r4, r5, d0
 80071e4:	4e67      	ldr	r6, [pc, #412]	; (8007384 <__ieee754_sqrt+0x1a8>)
 80071e6:	43ae      	bics	r6, r5
 80071e8:	ee10 0a10 	vmov	r0, s0
 80071ec:	ee10 2a10 	vmov	r2, s0
 80071f0:	4629      	mov	r1, r5
 80071f2:	462b      	mov	r3, r5
 80071f4:	d10d      	bne.n	8007212 <__ieee754_sqrt+0x36>
 80071f6:	f7f9 fa07 	bl	8000608 <__aeabi_dmul>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f84b 	bl	800029c <__adddf3>
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	ec45 4b10 	vmov	d0, r4, r5
 800720e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007212:	2d00      	cmp	r5, #0
 8007214:	dc0b      	bgt.n	800722e <__ieee754_sqrt+0x52>
 8007216:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800721a:	4326      	orrs	r6, r4
 800721c:	d0f5      	beq.n	800720a <__ieee754_sqrt+0x2e>
 800721e:	b135      	cbz	r5, 800722e <__ieee754_sqrt+0x52>
 8007220:	f7f9 f83a 	bl	8000298 <__aeabi_dsub>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	f7f9 fb18 	bl	800085c <__aeabi_ddiv>
 800722c:	e7eb      	b.n	8007206 <__ieee754_sqrt+0x2a>
 800722e:	1509      	asrs	r1, r1, #20
 8007230:	f000 808d 	beq.w	800734e <__ieee754_sqrt+0x172>
 8007234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007238:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800723c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007240:	07c9      	lsls	r1, r1, #31
 8007242:	bf5c      	itt	pl
 8007244:	005b      	lslpl	r3, r3, #1
 8007246:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800724a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800724e:	bf58      	it	pl
 8007250:	0052      	lslpl	r2, r2, #1
 8007252:	2500      	movs	r5, #0
 8007254:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007258:	1076      	asrs	r6, r6, #1
 800725a:	0052      	lsls	r2, r2, #1
 800725c:	f04f 0e16 	mov.w	lr, #22
 8007260:	46ac      	mov	ip, r5
 8007262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007266:	eb0c 0001 	add.w	r0, ip, r1
 800726a:	4298      	cmp	r0, r3
 800726c:	bfde      	ittt	le
 800726e:	1a1b      	suble	r3, r3, r0
 8007270:	eb00 0c01 	addle.w	ip, r0, r1
 8007274:	186d      	addle	r5, r5, r1
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	f1be 0e01 	subs.w	lr, lr, #1
 800727c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007280:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007284:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007288:	d1ed      	bne.n	8007266 <__ieee754_sqrt+0x8a>
 800728a:	4674      	mov	r4, lr
 800728c:	2720      	movs	r7, #32
 800728e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007292:	4563      	cmp	r3, ip
 8007294:	eb01 000e 	add.w	r0, r1, lr
 8007298:	dc02      	bgt.n	80072a0 <__ieee754_sqrt+0xc4>
 800729a:	d113      	bne.n	80072c4 <__ieee754_sqrt+0xe8>
 800729c:	4290      	cmp	r0, r2
 800729e:	d811      	bhi.n	80072c4 <__ieee754_sqrt+0xe8>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	eb00 0e01 	add.w	lr, r0, r1
 80072a6:	da57      	bge.n	8007358 <__ieee754_sqrt+0x17c>
 80072a8:	f1be 0f00 	cmp.w	lr, #0
 80072ac:	db54      	blt.n	8007358 <__ieee754_sqrt+0x17c>
 80072ae:	f10c 0801 	add.w	r8, ip, #1
 80072b2:	eba3 030c 	sub.w	r3, r3, ip
 80072b6:	4290      	cmp	r0, r2
 80072b8:	bf88      	it	hi
 80072ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80072be:	1a12      	subs	r2, r2, r0
 80072c0:	440c      	add	r4, r1
 80072c2:	46c4      	mov	ip, r8
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	3f01      	subs	r7, #1
 80072c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80072cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80072d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80072d4:	d1dd      	bne.n	8007292 <__ieee754_sqrt+0xb6>
 80072d6:	4313      	orrs	r3, r2
 80072d8:	d01b      	beq.n	8007312 <__ieee754_sqrt+0x136>
 80072da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007388 <__ieee754_sqrt+0x1ac>
 80072de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800738c <__ieee754_sqrt+0x1b0>
 80072e2:	e9da 0100 	ldrd	r0, r1, [sl]
 80072e6:	e9db 2300 	ldrd	r2, r3, [fp]
 80072ea:	f7f8 ffd5 	bl	8000298 <__aeabi_dsub>
 80072ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f9 fc01 	bl	8000b00 <__aeabi_dcmple>
 80072fe:	b140      	cbz	r0, 8007312 <__ieee754_sqrt+0x136>
 8007300:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007304:	e9da 0100 	ldrd	r0, r1, [sl]
 8007308:	e9db 2300 	ldrd	r2, r3, [fp]
 800730c:	d126      	bne.n	800735c <__ieee754_sqrt+0x180>
 800730e:	3501      	adds	r5, #1
 8007310:	463c      	mov	r4, r7
 8007312:	106a      	asrs	r2, r5, #1
 8007314:	0863      	lsrs	r3, r4, #1
 8007316:	07e9      	lsls	r1, r5, #31
 8007318:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800731c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007320:	bf48      	it	mi
 8007322:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007326:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800732a:	461c      	mov	r4, r3
 800732c:	e76d      	b.n	800720a <__ieee754_sqrt+0x2e>
 800732e:	0ad3      	lsrs	r3, r2, #11
 8007330:	3815      	subs	r0, #21
 8007332:	0552      	lsls	r2, r2, #21
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0fa      	beq.n	800732e <__ieee754_sqrt+0x152>
 8007338:	02dc      	lsls	r4, r3, #11
 800733a:	d50a      	bpl.n	8007352 <__ieee754_sqrt+0x176>
 800733c:	f1c1 0420 	rsb	r4, r1, #32
 8007340:	fa22 f404 	lsr.w	r4, r2, r4
 8007344:	1e4d      	subs	r5, r1, #1
 8007346:	408a      	lsls	r2, r1
 8007348:	4323      	orrs	r3, r4
 800734a:	1b41      	subs	r1, r0, r5
 800734c:	e772      	b.n	8007234 <__ieee754_sqrt+0x58>
 800734e:	4608      	mov	r0, r1
 8007350:	e7f0      	b.n	8007334 <__ieee754_sqrt+0x158>
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	3101      	adds	r1, #1
 8007356:	e7ef      	b.n	8007338 <__ieee754_sqrt+0x15c>
 8007358:	46e0      	mov	r8, ip
 800735a:	e7aa      	b.n	80072b2 <__ieee754_sqrt+0xd6>
 800735c:	f7f8 ff9e 	bl	800029c <__adddf3>
 8007360:	e9da 8900 	ldrd	r8, r9, [sl]
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4640      	mov	r0, r8
 800736a:	4649      	mov	r1, r9
 800736c:	f7f9 fbbe 	bl	8000aec <__aeabi_dcmplt>
 8007370:	b120      	cbz	r0, 800737c <__ieee754_sqrt+0x1a0>
 8007372:	1ca0      	adds	r0, r4, #2
 8007374:	bf08      	it	eq
 8007376:	3501      	addeq	r5, #1
 8007378:	3402      	adds	r4, #2
 800737a:	e7ca      	b.n	8007312 <__ieee754_sqrt+0x136>
 800737c:	3401      	adds	r4, #1
 800737e:	f024 0401 	bic.w	r4, r4, #1
 8007382:	e7c6      	b.n	8007312 <__ieee754_sqrt+0x136>
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	20000060 	.word	0x20000060
 800738c:	20000068 	.word	0x20000068

08007390 <_init>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr

0800739c <_fini>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	bf00      	nop
 80073a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a2:	bc08      	pop	{r3}
 80073a4:	469e      	mov	lr, r3
 80073a6:	4770      	bx	lr
